syntax = "proto2";

package apollo.planning;

message PlannerOpenSpaceConfig {
  // Open Space ROIConfig
  optional ROIConfig roi_config = 1;
  // Hybrid A Star Warm Start
  optional WarmStartConfig warm_start_config = 2;
  // Dual Variable Warm Start
  optional DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  // Distance Approach Configs
  optional DistanceApproachConfig distance_approach_config = 4;
  optional float delta_t = 5 [default = 1.0];
  optional double max_position_error_to_end_point = 6 [default = 0.5];
  optional double max_theta_error_to_end_point = 7 [default = 0.2];
  optional double is_near_destination_threshold = 8 [default = 0.001];
  // optional IpoptConfig ipopt_config = 9;
}

message ROIConfig {
  // longitudinal range of parking roi
  optional double roi_longitudinal_range = 1 [default = 10.0];
  // parking spot range detection threadhold
  optional double parking_start_range = 2 [default = 7.0];
  // Parking orientation for reverse parking
  optional bool parking_inwards = 3 [default = false];
}

message WarmStartConfig {
  // Hybrid A Star Warm Start
  optional double xy_grid_resolution = 1 [default = 0.2];
  optional double phi_grid_resolution = 2 [default = 0.05];
  optional uint64 next_node_num = 3 [default = 10];
  optional double step_size = 4 [default = 0.5];
  optional double traj_forward_penalty = 5 [default = 0.0];
  optional double traj_back_penalty = 6 [default = 0.0];
  optional double traj_gear_switch_penalty = 7 [default = 10.0];
  optional double traj_steer_penalty = 8 [default = 100.0];
  optional double traj_steer_change_penalty = 9 [default = 10.0];
  optional double heu_rs_forward_penalty = 10 [default = 0.0];
  optional double heu_rs_back_penalty = 11 [default = 0.0];
  optional double heu_rs_gear_switch_penalty = 12 [default = 10.0];
  optional double heu_rs_steer_penalty = 13 [default = 100.0];
  optional double heu_rs_steer_change_penalty = 14 [default = 10.0];
}

message DualVariableWarmStartConfig {
  // Dual variable Warm Start
  optional double weight_d = 1 [default = 1.0];
  optional IpoptConfig ipopt_config = 2;
}

message DistanceApproachConfig {
  // Distance approach weight configs
  repeated double weight_u = 1;
  repeated double weight_u_rate = 2;
  repeated double weight_state = 3;
  repeated double weight_stitching = 4;
  repeated double weight_time = 5;
  optional double min_safety_distance = 6 [default = 0.0];
  optional double max_speed_forward = 7 [default = 3.0];
  optional double max_speed_reverse = 8 [default = 2.0];
  optional double max_acceleration_forward = 9 [default = 2.0];
  optional double max_acceleration_reverse = 10 [default = 2.0];
  optional double min_time_sample_scaling = 11 [default = 0.1];
  optional double max_time_sample_scaling = 12 [default = 10.0];
  optional bool use_fix_time = 13 [default = false];
  optional IpoptConfig ipopt_config = 14;
}

message IpoptConfig {
  // Ipopt configs
  optional int32 ipopt_print_level = 1;
  optional int32 mumps_mem_percent = 2;
  optional double mumps_pivtol = 3;
  optional int32 ipopt_max_iter = 4;
  optional double ipopt_tol = 5;
  optional double ipopt_acceptable_constr_viol_tol = 6;
  optional double ipopt_min_hessian_perturbation = 7;
  optional double ipopt_jacobian_regularization_value = 8;
  optional string ipopt_print_timing_statistics = 9;
  optional string ipopt_alpha_for_y = 10;
  optional string ipopt_recalc_y = 11;
}