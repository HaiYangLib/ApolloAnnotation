syntax = "proto2";

package apollo.planning;

message BacksideVehicleConfig {
  // a vehicle is considered within current lane if it is behind the ADC and its
  // lateral difference is less than this number.
  optional double backside_lane_width = 1 [default = 4.0];
}

message ChangeLaneConfig {
  optional double min_overtake_distance = 1 [default = 10.0];
  optional double min_overtake_time = 2 [default = 2.0];
  optional bool enable_guard_obstacle = 3 [default = false];
  optional double guard_distance = 4 [default = 100.0];
  optional double min_guard_speed = 5 [default = 1.0];
}

message CreepConfig {
  optional bool enabled = 1;
  // stop distance(m) to the stop line of next lane overlap while creeping
  optional double creep_distance_to_stop_line = 2 [default = 1.0];  // meter
  // stop distance(m) to the stop line of next lane overlap while creeping
  optional double stop_distance = 3 [default = 0.5];  // meter
  optional double speed_limit = 4 [default = 1.0];    // m/s
  // max distance(m) to the stop line to be considered as a valid stop for creap
  optional double max_valid_stop_distance = 5 [default = 0.3];  // meter
  // min boundary t to ignore obstacles while creeping
  optional double min_boundary_t = 6 [default = 6.0];  // second
  // min boundary s to ignore obstacles while creeping
  optional double min_boundary_s = 7 [default = 3.0];  // meter
}

message CrosswalkConfig {
  // stop distance from stop line of crosswalk
  optional double stop_distance = 1 [default = 1.0];  // meter
  // max deceleration
  optional double max_stop_deceleration = 2 [default = 4.0];
  // min s_distance for adc to be considered have passed crosswalk
  // (stop_line_end_s)
  optional double min_pass_s_distance = 3 [default = 1.0];  // meter
  // max speed(m/s) to be considered as a valid stop
  optional double max_stop_speed = 4 [default = 0.3];  // m/s
  // max distance(m) to the stop line to be considered as a valid stop
  optional double max_valid_stop_distance = 5 [default = 3.0];  // meter
  // expand s_distance for pedestrian/bicycle detection
  optional double expand_s_distance = 6 [default = 2.0];  // meter
  // strick stop rule within this l_distance
  optional double stop_strick_l_distance = 7 [default = 4.0];  // meter
  // loose stop rule beyond this l_distance
  optional double stop_loose_l_distance = 8 [default = 5.0];  // meter
  // stop timeout for bicycles/pedestrians which are not moving
  optional double stop_timeout = 9 [default = 10.0];  // second
}

message DestinationConfig {
  // flag to enable pullover upon arriving destination
  optional bool enable_pull_over = 1 [default = false];
  // stop distance from destination line
  optional double stop_distance = 2 [default = 0.5];  // meter
  // distance to stop point to start planning pull over
  // TODO(all): must be in sync with the same config in PULL_OVER will remove
  optional double pull_over_plan_distance = 3 [default = 35.0];
}

message KeepClearConfig {
  // min s_distance to be considered have passed keep_clear (stop_line_end_s)
  optional bool enable_keep_clear_zone = 1 [default = true];
  optional bool enable_junction = 2 [default = true];
  optional double min_pass_s_distance = 3 [default = 2.0];  // meter
}

message PullOverConfig {
  // stop distance from stop line
  optional double stop_distance = 1 [default = 0.5];
  // max speed(m/s) to be considered as a valid stop
  optional double max_stop_speed = 2 [default = 0.3];  // m/s
  // max distance(m) to the stop line to be considered as a valid stop
  optional double max_valid_stop_distance = 3 [default = 3.0];  // meter
  // max deceleration
  optional double max_stop_deceleration = 4 [default = 2.5];
  // min s_distance for adc to be considered have passed crosswalk
  // (stop_line_end_s)
  optional double min_pass_s_distance = 5 [default = 1.0];  // meter
  // l-distance buffer to road/lane boundary
  optional double buffer_to_boundary = 6 [default = 0.5];
  // distance to stop point to start planning pull over
  optional double plan_distance = 7 [default = 35.0];
  // s_distance to beteeen start and stop points
  optional double operation_length = 8 [default = 30.0];  // meter
  // max s_distance to check ahead while planning pull over
  optional double max_check_distance = 9 [default = 60.0];  // meter
  // max failure count before changing to stop in-lane
  optional uint32 max_failure_count = 10 [default = 10];
}

message ReferenceLineEndConfig {
  // stop distance from refrence line end
  optional double stop_distance = 1 [default = 0.5];  // meter
  optional double min_reference_line_remain_length = 2 [default = 50.0];
}

message ReroutingConfig {
  // should not rerouting more frequent than this number
  optional double cooldown_time = 1 [default = 3.0];           // seconds
  optional double prepare_rerouting_time = 2 [default = 2.0];  // seconds
}

message SignalLightConfig {
  // stop distance from stop line
  optional double stop_distance = 1 [default = 1.0];  // meter
  // max deceleration
  optional double max_stop_deceleration = 2 [default = 4.0];
  // min s_distance for adc to be considered have passed signal_light
  // (stop_line_end_s)
  optional double min_pass_s_distance = 3 [default = 4.0];  // meter
  // treat yellow light as red when deceleration (abstract value in m/s^2)
  // is less than this threshold; otherwise treated as green light
  optional double max_stop_deacceleration_yellow_light = 4 [default = 3.0];
  optional double signal_expire_time_sec = 5 [default = 5.0];  // second
  optional double max_monitor_forward_distance = 6 [default = 135.0]; // meter
  optional CreepConfig righ_turn_creep = 7;
  // consider the signal msg is expired if its timestamp over this threshold(s)

}

// TODO(all) migrate all other traffic rules to pb config
message TrafficRuleConfig {
  enum RuleId {
    BACKSIDE_VEHICLE = 1;
    CHANGE_LANE = 2;
    CROSSWALK = 3;
    DESTINATION = 4;
    KEEP_CLEAR = 5;
    PULL_OVER = 6;
    REFERENCE_LINE_END = 7;
    REROUTING = 8;
    SIGNAL_LIGHT = 9;
    STOP_SIGN = 10;
  }
  optional RuleId rule_id = 1;
  optional bool enabled = 2;
  oneof config {
    BacksideVehicleConfig backside_vehicle = 3;
    ChangeLaneConfig change_lane = 4;
    CrosswalkConfig crosswalk = 5;
    DestinationConfig destination = 6;
    KeepClearConfig keep_clear = 7;
    PullOverConfig pull_over = 8;
    ReferenceLineEndConfig reference_line_end = 9;
    ReroutingConfig rerouting = 10;
    SignalLightConfig signal_light = 11;
  }
}

message TrafficRuleConfigs {
  repeated TrafficRuleConfig config = 1;
}
