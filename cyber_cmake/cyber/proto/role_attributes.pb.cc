// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/role_attributes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cyber/proto/role_attributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace cyber {
namespace proto {
class SocketAddrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SocketAddr> {
} _SocketAddr_default_instance_;
class RoleAttributesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoleAttributes> {
} _RoleAttributes_default_instance_;

namespace protobuf_cyber_2fproto_2frole_5fattributes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddr, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddr, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, host_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, host_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, proto_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, qos_profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, socket_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAttributes, service_id_),
  0,
  1,
  13,
  2,
  9,
  3,
  10,
  4,
  5,
  11,
  7,
  8,
  6,
  12,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(SocketAddr)},
  { 9, 28, sizeof(RoleAttributes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SocketAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoleAttributes_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cyber/proto/role_attributes.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _SocketAddr_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RoleAttributes_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::cyber::proto::protobuf_cyber_2fproto_2fqos_5fprofile_2eproto::InitDefaults();
  _SocketAddr_default_instance_.DefaultConstruct();
  _RoleAttributes_default_instance_.DefaultConstruct();
  _RoleAttributes_default_instance_.get_mutable()->qos_profile_ = const_cast< ::apollo::cyber::proto::QosProfile*>(
      ::apollo::cyber::proto::QosProfile::internal_default_instance());
  _RoleAttributes_default_instance_.get_mutable()->socket_addr_ = const_cast< ::apollo::cyber::proto::SocketAddr*>(
      ::apollo::cyber::proto::SocketAddr::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!cyber/proto/role_attributes.proto\022\022apo"
      "llo.cyber.proto\032\035cyber/proto/qos_profile"
      ".proto\"&\n\nSocketAddr\022\n\n\002ip\030\001 \001(\t\022\014\n\004port"
      "\030\002 \001(\r\"\340\002\n\016RoleAttributes\022\021\n\thost_name\030\001"
      " \001(\t\022\017\n\007host_ip\030\002 \001(\t\022\022\n\nprocess_id\030\003 \001("
      "\005\022\021\n\tnode_name\030\004 \001(\t\022\017\n\007node_id\030\005 \001(\004\022\024\n"
      "\014channel_name\030\006 \001(\t\022\022\n\nchannel_id\030\007 \001(\004\022"
      "\024\n\014message_type\030\010 \001(\t\022\022\n\nproto_desc\030\t \001("
      "\014\022\n\n\002id\030\n \001(\004\0223\n\013qos_profile\030\013 \001(\0132\036.apo"
      "llo.cyber.proto.QosProfile\0223\n\013socket_add"
      "r\030\014 \001(\0132\036.apollo.cyber.proto.SocketAddr\022"
      "\024\n\014service_name\030\r \001(\t\022\022\n\nservice_id\030\016 \001("
      "\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cyber/proto/role_attributes.proto", &protobuf_RegisterTypes);
  ::apollo::cyber::proto::protobuf_cyber_2fproto_2fqos_5fprofile_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cyber_2fproto_2frole_5fattributes_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketAddr::kIpFieldNumber;
const int SocketAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketAddr::SocketAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frole_5fattributes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.SocketAddr)
}
SocketAddr::SocketAddr(const SocketAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SocketAddr)
}

void SocketAddr::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

SocketAddr::~SocketAddr() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SocketAddr)
  SharedDtor();
}

void SocketAddr::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SocketAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketAddr::descriptor() {
  protobuf_cyber_2fproto_2frole_5fattributes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frole_5fattributes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketAddr& SocketAddr::default_instance() {
  protobuf_cyber_2fproto_2frole_5fattributes_2eproto::InitDefaults();
  return *internal_default_instance();
}

SocketAddr* SocketAddr::New(::google::protobuf::Arena* arena) const {
  SocketAddr* n = new SocketAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocketAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SocketAddr)
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SocketAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.SocketAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.SocketAddr.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.SocketAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.SocketAddr)
  return false;
#undef DO_
}

void SocketAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.SocketAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SocketAddr.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.SocketAddr)
}

::google::protobuf::uint8* SocketAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SocketAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SocketAddr.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SocketAddr)
  return target;
}

size_t SocketAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SocketAddr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.SocketAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.SocketAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.SocketAddr)
    MergeFrom(*source);
  }
}

void SocketAddr::MergeFrom(const SocketAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SocketAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SocketAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.SocketAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketAddr::CopyFrom(const SocketAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SocketAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketAddr::IsInitialized() const {
  return true;
}

void SocketAddr::Swap(SocketAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketAddr::InternalSwap(SocketAddr* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocketAddr::GetMetadata() const {
  protobuf_cyber_2fproto_2frole_5fattributes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frole_5fattributes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SocketAddr

// optional string ip = 1;
bool SocketAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SocketAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void SocketAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void SocketAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& SocketAddr::ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.ip)
  return ip_.GetNoArena();
}
void SocketAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.ip)
}
#if LANG_CXX11
void SocketAddr::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SocketAddr.ip)
}
#endif
void SocketAddr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SocketAddr.ip)
}
void SocketAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SocketAddr.ip)
}
::std::string* SocketAddr::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SocketAddr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SocketAddr::release_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SocketAddr.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SocketAddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SocketAddr.ip)
}

// optional uint32 port = 2;
bool SocketAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SocketAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void SocketAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void SocketAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 SocketAddr::port() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.port)
  return port_;
}
void SocketAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleAttributes::kHostNameFieldNumber;
const int RoleAttributes::kHostIpFieldNumber;
const int RoleAttributes::kProcessIdFieldNumber;
const int RoleAttributes::kNodeNameFieldNumber;
const int RoleAttributes::kNodeIdFieldNumber;
const int RoleAttributes::kChannelNameFieldNumber;
const int RoleAttributes::kChannelIdFieldNumber;
const int RoleAttributes::kMessageTypeFieldNumber;
const int RoleAttributes::kProtoDescFieldNumber;
const int RoleAttributes::kIdFieldNumber;
const int RoleAttributes::kQosProfileFieldNumber;
const int RoleAttributes::kSocketAddrFieldNumber;
const int RoleAttributes::kServiceNameFieldNumber;
const int RoleAttributes::kServiceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleAttributes::RoleAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frole_5fattributes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.RoleAttributes)
}
RoleAttributes::RoleAttributes(const RoleAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_name()) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  host_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_ip()) {
    host_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_ip_);
  }
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_name()) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  proto_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proto_desc()) {
    proto_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_desc_);
  }
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_qos_profile()) {
    qos_profile_ = new ::apollo::cyber::proto::QosProfile(*from.qos_profile_);
  } else {
    qos_profile_ = NULL;
  }
  if (from.has_socket_addr()) {
    socket_addr_ = new ::apollo::cyber::proto::SocketAddr(*from.socket_addr_);
  } else {
    socket_addr_ = NULL;
  }
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&process_id_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(process_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.RoleAttributes)
}

void RoleAttributes::SharedCtor() {
  _cached_size_ = 0;
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qos_profile_, 0, reinterpret_cast<char*>(&process_id_) -
    reinterpret_cast<char*>(&qos_profile_) + sizeof(process_id_));
}

RoleAttributes::~RoleAttributes() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.RoleAttributes)
  SharedDtor();
}

void RoleAttributes::SharedDtor() {
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete qos_profile_;
  }
  if (this != internal_default_instance()) {
    delete socket_addr_;
  }
}

void RoleAttributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleAttributes::descriptor() {
  protobuf_cyber_2fproto_2frole_5fattributes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frole_5fattributes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoleAttributes& RoleAttributes::default_instance() {
  protobuf_cyber_2fproto_2frole_5fattributes_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoleAttributes* RoleAttributes::New(::google::protobuf::Arena* arena) const {
  RoleAttributes* n = new RoleAttributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.RoleAttributes)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_host_name()) {
      GOOGLE_DCHECK(!host_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_host_ip()) {
      GOOGLE_DCHECK(!host_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_node_name()) {
      GOOGLE_DCHECK(!node_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*node_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_channel_name()) {
      GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*channel_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_message_type()) {
      GOOGLE_DCHECK(!message_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_proto_desc()) {
      GOOGLE_DCHECK(!proto_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*proto_desc_.UnsafeRawStringPointer())->clear();
    }
    if (has_service_name()) {
      GOOGLE_DCHECK(!service_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*service_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_qos_profile()) {
      GOOGLE_DCHECK(qos_profile_ != NULL);
      qos_profile_->::apollo::cyber::proto::QosProfile::Clear();
    }
  }
  if (has_socket_addr()) {
    GOOGLE_DCHECK(socket_addr_ != NULL);
    socket_addr_->::apollo::cyber::proto::SocketAddr::Clear();
  }
  if (_has_bits_[8 / 32] & 15872u) {
    ::memset(&node_id_, 0, reinterpret_cast<char*>(&process_id_) -
      reinterpret_cast<char*>(&node_id_) + sizeof(process_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoleAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.RoleAttributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.RoleAttributes.host_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_ip().data(), this->host_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.RoleAttributes.host_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 process_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_process_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string node_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.RoleAttributes.node_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 node_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.RoleAttributes.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 channel_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.RoleAttributes.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes proto_desc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qos_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_name = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.RoleAttributes.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 service_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_service_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.RoleAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.RoleAttributes)
  return false;
#undef DO_
}

void RoleAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.RoleAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // optional string host_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host_ip(), output);
  }

  // optional int32 process_id = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->process_id(), output);
  }

  // optional string node_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_name(), output);
  }

  // optional uint64 node_id = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->node_id(), output);
  }

  // optional string channel_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->channel_name(), output);
  }

  // optional uint64 channel_id = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->channel_id(), output);
  }

  // optional string message_type = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->message_type(), output);
  }

  // optional bytes proto_desc = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->proto_desc(), output);
  }

  // optional uint64 id = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->id(), output);
  }

  // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->qos_profile_, output);
  }

  // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->socket_addr_, output);
  }

  // optional string service_name = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->service_name(), output);
  }

  // optional uint64 service_id = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->service_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.RoleAttributes)
}

::google::protobuf::uint8* RoleAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.RoleAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // optional string host_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_ip(), target);
  }

  // optional int32 process_id = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->process_id(), target);
  }

  // optional string node_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_name(), target);
  }

  // optional uint64 node_id = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->node_id(), target);
  }

  // optional string channel_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel_name(), target);
  }

  // optional uint64 channel_id = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->channel_id(), target);
  }

  // optional string message_type = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->message_type(), target);
  }

  // optional bytes proto_desc = 9;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->proto_desc(), target);
  }

  // optional uint64 id = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->id(), target);
  }

  // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->qos_profile_, deterministic, target);
  }

  // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->socket_addr_, deterministic, target);
  }

  // optional string service_name = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->service_name(), target);
  }

  // optional uint64 service_id = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->service_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.RoleAttributes)
  return target;
}

size_t RoleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.RoleAttributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string host_name = 1;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // optional string host_ip = 2;
    if (has_host_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_ip());
    }

    // optional string node_name = 4;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional string channel_name = 6;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional string message_type = 8;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // optional bytes proto_desc = 9;
    if (has_proto_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proto_desc());
    }

    // optional string service_name = 13;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
    if (has_qos_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qos_profile_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
    if (has_socket_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socket_addr_);
    }

    // optional uint64 node_id = 5;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_id());
    }

    // optional uint64 channel_id = 7;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

    // optional uint64 id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 service_id = 14;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->service_id());
    }

    // optional int32 process_id = 3;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.RoleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.RoleAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.RoleAttributes)
    MergeFrom(*source);
  }
}

void RoleAttributes::MergeFrom(const RoleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.RoleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host_name();
      host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_host_ip();
      host_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_node_name();
      node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_proto_desc();
      proto_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_desc_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_service_name();
      service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_qos_profile()->::apollo::cyber::proto::QosProfile::MergeFrom(from.qos_profile());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_socket_addr()->::apollo::cyber::proto::SocketAddr::MergeFrom(from.socket_addr());
    }
    if (cached_has_bits & 0x00000200u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00001000u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      process_id_ = from.process_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoleAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.RoleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAttributes::CopyFrom(const RoleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.RoleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAttributes::IsInitialized() const {
  return true;
}

void RoleAttributes::Swap(RoleAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleAttributes::InternalSwap(RoleAttributes* other) {
  host_name_.Swap(&other->host_name_);
  host_ip_.Swap(&other->host_ip_);
  node_name_.Swap(&other->node_name_);
  channel_name_.Swap(&other->channel_name_);
  message_type_.Swap(&other->message_type_);
  proto_desc_.Swap(&other->proto_desc_);
  service_name_.Swap(&other->service_name_);
  std::swap(qos_profile_, other->qos_profile_);
  std::swap(socket_addr_, other->socket_addr_);
  std::swap(node_id_, other->node_id_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(id_, other->id_);
  std::swap(service_id_, other->service_id_);
  std::swap(process_id_, other->process_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleAttributes::GetMetadata() const {
  protobuf_cyber_2fproto_2frole_5fattributes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frole_5fattributes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleAttributes

// optional string host_name = 1;
bool RoleAttributes::has_host_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoleAttributes::set_has_host_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RoleAttributes::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoleAttributes::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_name();
}
const ::std::string& RoleAttributes::host_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_name)
  return host_name_.GetNoArena();
}
void RoleAttributes::set_host_name(const ::std::string& value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_name)
}
#if LANG_CXX11
void RoleAttributes::set_host_name(::std::string&& value) {
  set_has_host_name();
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.host_name)
}
#endif
void RoleAttributes::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.host_name)
}
void RoleAttributes::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.host_name)
}
::std::string* RoleAttributes::mutable_host_name() {
  set_has_host_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoleAttributes::release_host_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_name)
  clear_has_host_name();
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoleAttributes::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    set_has_host_name();
  } else {
    clear_has_host_name();
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_name)
}

// optional string host_ip = 2;
bool RoleAttributes::has_host_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoleAttributes::set_has_host_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void RoleAttributes::clear_has_host_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoleAttributes::clear_host_ip() {
  host_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_ip();
}
const ::std::string& RoleAttributes::host_ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_ip)
  return host_ip_.GetNoArena();
}
void RoleAttributes::set_host_ip(const ::std::string& value) {
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_ip)
}
#if LANG_CXX11
void RoleAttributes::set_host_ip(::std::string&& value) {
  set_has_host_ip();
  host_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.host_ip)
}
#endif
void RoleAttributes::set_host_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.host_ip)
}
void RoleAttributes::set_host_ip(const char* value, size_t size) {
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.host_ip)
}
::std::string* RoleAttributes::mutable_host_ip() {
  set_has_host_ip();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_ip)
  return host_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoleAttributes::release_host_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_ip)
  clear_has_host_ip();
  return host_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoleAttributes::set_allocated_host_ip(::std::string* host_ip) {
  if (host_ip != NULL) {
    set_has_host_ip();
  } else {
    clear_has_host_ip();
  }
  host_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_ip)
}

// optional int32 process_id = 3;
bool RoleAttributes::has_process_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RoleAttributes::set_has_process_id() {
  _has_bits_[0] |= 0x00002000u;
}
void RoleAttributes::clear_has_process_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void RoleAttributes::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
::google::protobuf::int32 RoleAttributes::process_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.process_id)
  return process_id_;
}
void RoleAttributes::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.process_id)
}

// optional string node_name = 4;
bool RoleAttributes::has_node_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoleAttributes::set_has_node_name() {
  _has_bits_[0] |= 0x00000004u;
}
void RoleAttributes::clear_has_node_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoleAttributes::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_name();
}
const ::std::string& RoleAttributes::node_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_name)
  return node_name_.GetNoArena();
}
void RoleAttributes::set_node_name(const ::std::string& value) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_name)
}
#if LANG_CXX11
void RoleAttributes::set_node_name(::std::string&& value) {
  set_has_node_name();
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.node_name)
}
#endif
void RoleAttributes::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.node_name)
}
void RoleAttributes::set_node_name(const char* value, size_t size) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.node_name)
}
::std::string* RoleAttributes::mutable_node_name() {
  set_has_node_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoleAttributes::release_node_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.node_name)
  clear_has_node_name();
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoleAttributes::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    set_has_node_name();
  } else {
    clear_has_node_name();
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.node_name)
}

// optional uint64 node_id = 5;
bool RoleAttributes::has_node_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RoleAttributes::set_has_node_id() {
  _has_bits_[0] |= 0x00000200u;
}
void RoleAttributes::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void RoleAttributes::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_node_id();
}
::google::protobuf::uint64 RoleAttributes::node_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_id)
  return node_id_;
}
void RoleAttributes::set_node_id(::google::protobuf::uint64 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_id)
}

// optional string channel_name = 6;
bool RoleAttributes::has_channel_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoleAttributes::set_has_channel_name() {
  _has_bits_[0] |= 0x00000008u;
}
void RoleAttributes::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoleAttributes::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
const ::std::string& RoleAttributes::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_name)
  return channel_name_.GetNoArena();
}
void RoleAttributes::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_name)
}
#if LANG_CXX11
void RoleAttributes::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.channel_name)
}
#endif
void RoleAttributes::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.channel_name)
}
void RoleAttributes::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.channel_name)
}
::std::string* RoleAttributes::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoleAttributes::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoleAttributes::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.channel_name)
}

// optional uint64 channel_id = 7;
bool RoleAttributes::has_channel_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RoleAttributes::set_has_channel_id() {
  _has_bits_[0] |= 0x00000400u;
}
void RoleAttributes::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void RoleAttributes::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 RoleAttributes::channel_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_id)
  return channel_id_;
}
void RoleAttributes::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_id)
}

// optional string message_type = 8;
bool RoleAttributes::has_message_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoleAttributes::set_has_message_type() {
  _has_bits_[0] |= 0x00000010u;
}
void RoleAttributes::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoleAttributes::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
const ::std::string& RoleAttributes::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.message_type)
  return message_type_.GetNoArena();
}
void RoleAttributes::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.message_type)
}
#if LANG_CXX11
void RoleAttributes::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.message_type)
}
#endif
void RoleAttributes::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.message_type)
}
void RoleAttributes::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.message_type)
}
::std::string* RoleAttributes::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoleAttributes::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoleAttributes::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.message_type)
}

// optional bytes proto_desc = 9;
bool RoleAttributes::has_proto_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoleAttributes::set_has_proto_desc() {
  _has_bits_[0] |= 0x00000020u;
}
void RoleAttributes::clear_has_proto_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoleAttributes::clear_proto_desc() {
  proto_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_desc();
}
const ::std::string& RoleAttributes::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.proto_desc)
  return proto_desc_.GetNoArena();
}
void RoleAttributes::set_proto_desc(const ::std::string& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.proto_desc)
}
#if LANG_CXX11
void RoleAttributes::set_proto_desc(::std::string&& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.proto_desc)
}
#endif
void RoleAttributes::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.proto_desc)
}
void RoleAttributes::set_proto_desc(const void* value, size_t size) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.proto_desc)
}
::std::string* RoleAttributes::mutable_proto_desc() {
  set_has_proto_desc();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.proto_desc)
  return proto_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoleAttributes::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.proto_desc)
  clear_has_proto_desc();
  return proto_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoleAttributes::set_allocated_proto_desc(::std::string* proto_desc) {
  if (proto_desc != NULL) {
    set_has_proto_desc();
  } else {
    clear_has_proto_desc();
  }
  proto_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.proto_desc)
}

// optional uint64 id = 10;
bool RoleAttributes::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RoleAttributes::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
void RoleAttributes::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void RoleAttributes::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 RoleAttributes::id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.id)
  return id_;
}
void RoleAttributes::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.id)
}

// optional .apollo.cyber.proto.QosProfile qos_profile = 11;
bool RoleAttributes::has_qos_profile() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RoleAttributes::set_has_qos_profile() {
  _has_bits_[0] |= 0x00000080u;
}
void RoleAttributes::clear_has_qos_profile() {
  _has_bits_[0] &= ~0x00000080u;
}
void RoleAttributes::clear_qos_profile() {
  if (qos_profile_ != NULL) qos_profile_->::apollo::cyber::proto::QosProfile::Clear();
  clear_has_qos_profile();
}
const ::apollo::cyber::proto::QosProfile& RoleAttributes::qos_profile() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.qos_profile)
  return qos_profile_ != NULL ? *qos_profile_
                         : *::apollo::cyber::proto::QosProfile::internal_default_instance();
}
::apollo::cyber::proto::QosProfile* RoleAttributes::mutable_qos_profile() {
  set_has_qos_profile();
  if (qos_profile_ == NULL) {
    qos_profile_ = new ::apollo::cyber::proto::QosProfile;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.qos_profile)
  return qos_profile_;
}
::apollo::cyber::proto::QosProfile* RoleAttributes::release_qos_profile() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.qos_profile)
  clear_has_qos_profile();
  ::apollo::cyber::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = NULL;
  return temp;
}
void RoleAttributes::set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile) {
  delete qos_profile_;
  qos_profile_ = qos_profile;
  if (qos_profile) {
    set_has_qos_profile();
  } else {
    clear_has_qos_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.qos_profile)
}

// optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
bool RoleAttributes::has_socket_addr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RoleAttributes::set_has_socket_addr() {
  _has_bits_[0] |= 0x00000100u;
}
void RoleAttributes::clear_has_socket_addr() {
  _has_bits_[0] &= ~0x00000100u;
}
void RoleAttributes::clear_socket_addr() {
  if (socket_addr_ != NULL) socket_addr_->::apollo::cyber::proto::SocketAddr::Clear();
  clear_has_socket_addr();
}
const ::apollo::cyber::proto::SocketAddr& RoleAttributes::socket_addr() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.socket_addr)
  return socket_addr_ != NULL ? *socket_addr_
                         : *::apollo::cyber::proto::SocketAddr::internal_default_instance();
}
::apollo::cyber::proto::SocketAddr* RoleAttributes::mutable_socket_addr() {
  set_has_socket_addr();
  if (socket_addr_ == NULL) {
    socket_addr_ = new ::apollo::cyber::proto::SocketAddr;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.socket_addr)
  return socket_addr_;
}
::apollo::cyber::proto::SocketAddr* RoleAttributes::release_socket_addr() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.socket_addr)
  clear_has_socket_addr();
  ::apollo::cyber::proto::SocketAddr* temp = socket_addr_;
  socket_addr_ = NULL;
  return temp;
}
void RoleAttributes::set_allocated_socket_addr(::apollo::cyber::proto::SocketAddr* socket_addr) {
  delete socket_addr_;
  socket_addr_ = socket_addr;
  if (socket_addr) {
    set_has_socket_addr();
  } else {
    clear_has_socket_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.socket_addr)
}

// optional string service_name = 13;
bool RoleAttributes::has_service_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RoleAttributes::set_has_service_name() {
  _has_bits_[0] |= 0x00000040u;
}
void RoleAttributes::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void RoleAttributes::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
const ::std::string& RoleAttributes::service_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_name)
  return service_name_.GetNoArena();
}
void RoleAttributes::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_name)
}
#if LANG_CXX11
void RoleAttributes::set_service_name(::std::string&& value) {
  set_has_service_name();
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.service_name)
}
#endif
void RoleAttributes::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.service_name)
}
void RoleAttributes::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.service_name)
}
::std::string* RoleAttributes::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoleAttributes::release_service_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.service_name)
  clear_has_service_name();
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoleAttributes::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.service_name)
}

// optional uint64 service_id = 14;
bool RoleAttributes::has_service_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RoleAttributes::set_has_service_id() {
  _has_bits_[0] |= 0x00001000u;
}
void RoleAttributes::clear_has_service_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void RoleAttributes::clear_service_id() {
  service_id_ = GOOGLE_ULONGLONG(0);
  clear_has_service_id();
}
::google::protobuf::uint64 RoleAttributes::service_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_id)
  return service_id_;
}
void RoleAttributes::set_service_id(::google::protobuf::uint64 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
