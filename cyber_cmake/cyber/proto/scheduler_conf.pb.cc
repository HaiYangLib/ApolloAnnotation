// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/scheduler_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cyber/proto/scheduler_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace cyber {
namespace proto {
class InnerThreadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InnerThread> {
} _InnerThread_default_instance_;
class SchedulerConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SchedulerConf> {
} _SchedulerConf_default_instance_;

namespace protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerThread, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerThread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerThread, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerThread, cpuset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerThread, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerThread, prio_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, routine_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, default_proc_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, process_level_cpuset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, classic_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerConf, choreography_conf_),
  0,
  4,
  5,
  1,
  ~0u,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(InnerThread)},
  { 13, 25, sizeof(SchedulerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InnerThread_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SchedulerConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cyber/proto/scheduler_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _InnerThread_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SchedulerConf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::apollo::cyber::proto::protobuf_cyber_2fproto_2fclassic_5fconf_2eproto::InitDefaults();
  ::apollo::cyber::proto::protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::InitDefaults();
  _InnerThread_default_instance_.DefaultConstruct();
  _SchedulerConf_default_instance_.DefaultConstruct();
  _SchedulerConf_default_instance_.get_mutable()->classic_conf_ = const_cast< ::apollo::cyber::proto::ClassicConf*>(
      ::apollo::cyber::proto::ClassicConf::internal_default_instance());
  _SchedulerConf_default_instance_.get_mutable()->choreography_conf_ = const_cast< ::apollo::cyber::proto::ChoreographyConf*>(
      ::apollo::cyber::proto::ChoreographyConf::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n cyber/proto/scheduler_conf.proto\022\022apol"
      "lo.cyber.proto\032\036cyber/proto/classic_conf"
      ".proto\032#cyber/proto/choreography_conf.pr"
      "oto\"L\n\013InnerThread\022\014\n\004name\030\001 \001(\t\022\016\n\006cpus"
      "et\030\002 \001(\t\022\016\n\006policy\030\003 \001(\t\022\017\n\004prio\030\004 \001(\r:\001"
      "1\"\226\002\n\rSchedulerConf\022\016\n\006policy\030\001 \001(\t\022\023\n\013r"
      "outine_num\030\002 \001(\r\022\030\n\020default_proc_num\030\003 \001"
      "(\r\022\034\n\024process_level_cpuset\030\004 \001(\t\0220\n\007thre"
      "ads\030\005 \003(\0132\037.apollo.cyber.proto.InnerThre"
      "ad\0225\n\014classic_conf\030\006 \001(\0132\037.apollo.cyber."
      "proto.ClassicConf\022\?\n\021choreography_conf\030\007"
      " \001(\0132$.apollo.cyber.proto.ChoreographyCo"
      "nf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cyber/proto/scheduler_conf.proto", &protobuf_RegisterTypes);
  ::apollo::cyber::proto::protobuf_cyber_2fproto_2fclassic_5fconf_2eproto::AddDescriptors();
  ::apollo::cyber::proto::protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerThread::kNameFieldNumber;
const int InnerThread::kCpusetFieldNumber;
const int InnerThread::kPolicyFieldNumber;
const int InnerThread::kPrioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerThread::InnerThread()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.InnerThread)
}
InnerThread::InnerThread(const InnerThread& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cpuset()) {
    cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpuset_);
  }
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy()) {
    policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  prio_ = from.prio_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.InnerThread)
}

void InnerThread::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prio_ = 1u;
}

InnerThread::~InnerThread() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.InnerThread)
  SharedDtor();
}

void InnerThread::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpuset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InnerThread::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerThread::descriptor() {
  protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerThread& InnerThread::default_instance() {
  protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

InnerThread* InnerThread::New(::google::protobuf::Arena* arena) const {
  InnerThread* n = new InnerThread;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerThread::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.InnerThread)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_cpuset()) {
      GOOGLE_DCHECK(!cpuset_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cpuset_.UnsafeRawStringPointer())->clear();
    }
    if (has_policy()) {
      GOOGLE_DCHECK(!policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_.UnsafeRawStringPointer())->clear();
    }
    prio_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerThread::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.InnerThread)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.InnerThread.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cpuset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cpuset().data(), this->cpuset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.InnerThread.cpuset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), this->policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.InnerThread.policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prio = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_prio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.InnerThread)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.InnerThread)
  return false;
#undef DO_
}

void InnerThread::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.InnerThread)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string cpuset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpuset().data(), this->cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.cpuset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cpuset(), output);
  }

  // optional string policy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->policy(), output);
  }

  // optional uint32 prio = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.InnerThread)
}

::google::protobuf::uint8* InnerThread::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.InnerThread)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string cpuset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpuset().data(), this->cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.cpuset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cpuset(), target);
  }

  // optional string policy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->policy(), target);
  }

  // optional uint32 prio = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.InnerThread)
  return target;
}

size_t InnerThread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.InnerThread)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cpuset = 2;
    if (has_cpuset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpuset());
    }

    // optional string policy = 3;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

    // optional uint32 prio = 4 [default = 1];
    if (has_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prio());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerThread::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.InnerThread)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerThread* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerThread>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.InnerThread)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.InnerThread)
    MergeFrom(*source);
  }
}

void InnerThread::MergeFrom(const InnerThread& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.InnerThread)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cpuset();
      cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpuset_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_policy();
      policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
    }
    if (cached_has_bits & 0x00000008u) {
      prio_ = from.prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerThread::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.InnerThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerThread::CopyFrom(const InnerThread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.InnerThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerThread::IsInitialized() const {
  return true;
}

void InnerThread::Swap(InnerThread* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerThread::InternalSwap(InnerThread* other) {
  name_.Swap(&other->name_);
  cpuset_.Swap(&other->cpuset_);
  policy_.Swap(&other->policy_);
  std::swap(prio_, other->prio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerThread::GetMetadata() const {
  protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerThread

// optional string name = 1;
bool InnerThread::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerThread::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerThread::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerThread::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& InnerThread::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.name)
  return name_.GetNoArena();
}
void InnerThread::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.name)
}
#if LANG_CXX11
void InnerThread::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.InnerThread.name)
}
#endif
void InnerThread::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.InnerThread.name)
}
void InnerThread::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.InnerThread.name)
}
::std::string* InnerThread::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.InnerThread.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InnerThread::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.InnerThread.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InnerThread::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.InnerThread.name)
}

// optional string cpuset = 2;
bool InnerThread::has_cpuset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerThread::set_has_cpuset() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerThread::clear_has_cpuset() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerThread::clear_cpuset() {
  cpuset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpuset();
}
const ::std::string& InnerThread::cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.cpuset)
  return cpuset_.GetNoArena();
}
void InnerThread::set_cpuset(const ::std::string& value) {
  set_has_cpuset();
  cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.cpuset)
}
#if LANG_CXX11
void InnerThread::set_cpuset(::std::string&& value) {
  set_has_cpuset();
  cpuset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.InnerThread.cpuset)
}
#endif
void InnerThread::set_cpuset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cpuset();
  cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.InnerThread.cpuset)
}
void InnerThread::set_cpuset(const char* value, size_t size) {
  set_has_cpuset();
  cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.InnerThread.cpuset)
}
::std::string* InnerThread::mutable_cpuset() {
  set_has_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.InnerThread.cpuset)
  return cpuset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InnerThread::release_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.InnerThread.cpuset)
  clear_has_cpuset();
  return cpuset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InnerThread::set_allocated_cpuset(::std::string* cpuset) {
  if (cpuset != NULL) {
    set_has_cpuset();
  } else {
    clear_has_cpuset();
  }
  cpuset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.InnerThread.cpuset)
}

// optional string policy = 3;
bool InnerThread::has_policy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerThread::set_has_policy() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerThread::clear_has_policy() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerThread::clear_policy() {
  policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy();
}
const ::std::string& InnerThread::policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.policy)
  return policy_.GetNoArena();
}
void InnerThread::set_policy(const ::std::string& value) {
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.policy)
}
#if LANG_CXX11
void InnerThread::set_policy(::std::string&& value) {
  set_has_policy();
  policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.InnerThread.policy)
}
#endif
void InnerThread::set_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.InnerThread.policy)
}
void InnerThread::set_policy(const char* value, size_t size) {
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.InnerThread.policy)
}
::std::string* InnerThread::mutable_policy() {
  set_has_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.InnerThread.policy)
  return policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InnerThread::release_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.InnerThread.policy)
  clear_has_policy();
  return policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InnerThread::set_allocated_policy(::std::string* policy) {
  if (policy != NULL) {
    set_has_policy();
  } else {
    clear_has_policy();
  }
  policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.InnerThread.policy)
}

// optional uint32 prio = 4 [default = 1];
bool InnerThread::has_prio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnerThread::set_has_prio() {
  _has_bits_[0] |= 0x00000008u;
}
void InnerThread::clear_has_prio() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnerThread::clear_prio() {
  prio_ = 1u;
  clear_has_prio();
}
::google::protobuf::uint32 InnerThread::prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.prio)
  return prio_;
}
void InnerThread::set_prio(::google::protobuf::uint32 value) {
  set_has_prio();
  prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.prio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchedulerConf::kPolicyFieldNumber;
const int SchedulerConf::kRoutineNumFieldNumber;
const int SchedulerConf::kDefaultProcNumFieldNumber;
const int SchedulerConf::kProcessLevelCpusetFieldNumber;
const int SchedulerConf::kThreadsFieldNumber;
const int SchedulerConf::kClassicConfFieldNumber;
const int SchedulerConf::kChoreographyConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchedulerConf::SchedulerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.SchedulerConf)
}
SchedulerConf::SchedulerConf(const SchedulerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      threads_(from.threads_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy()) {
    policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  process_level_cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_level_cpuset()) {
    process_level_cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_level_cpuset_);
  }
  if (from.has_classic_conf()) {
    classic_conf_ = new ::apollo::cyber::proto::ClassicConf(*from.classic_conf_);
  } else {
    classic_conf_ = NULL;
  }
  if (from.has_choreography_conf()) {
    choreography_conf_ = new ::apollo::cyber::proto::ChoreographyConf(*from.choreography_conf_);
  } else {
    choreography_conf_ = NULL;
  }
  ::memcpy(&routine_num_, &from.routine_num_,
    reinterpret_cast<char*>(&default_proc_num_) -
    reinterpret_cast<char*>(&routine_num_) + sizeof(default_proc_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SchedulerConf)
}

void SchedulerConf::SharedCtor() {
  _cached_size_ = 0;
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_level_cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&classic_conf_, 0, reinterpret_cast<char*>(&default_proc_num_) -
    reinterpret_cast<char*>(&classic_conf_) + sizeof(default_proc_num_));
}

SchedulerConf::~SchedulerConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SchedulerConf)
  SharedDtor();
}

void SchedulerConf::SharedDtor() {
  policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_level_cpuset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete classic_conf_;
  }
  if (this != internal_default_instance()) {
    delete choreography_conf_;
  }
}

void SchedulerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchedulerConf::descriptor() {
  protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SchedulerConf& SchedulerConf::default_instance() {
  protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchedulerConf* SchedulerConf::New(::google::protobuf::Arena* arena) const {
  SchedulerConf* n = new SchedulerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchedulerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SchedulerConf)
  threads_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_policy()) {
      GOOGLE_DCHECK(!policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_.UnsafeRawStringPointer())->clear();
    }
    if (has_process_level_cpuset()) {
      GOOGLE_DCHECK(!process_level_cpuset_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*process_level_cpuset_.UnsafeRawStringPointer())->clear();
    }
    if (has_classic_conf()) {
      GOOGLE_DCHECK(classic_conf_ != NULL);
      classic_conf_->::apollo::cyber::proto::ClassicConf::Clear();
    }
    if (has_choreography_conf()) {
      GOOGLE_DCHECK(choreography_conf_ != NULL);
      choreography_conf_->::apollo::cyber::proto::ChoreographyConf::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&routine_num_, 0, reinterpret_cast<char*>(&default_proc_num_) -
      reinterpret_cast<char*>(&routine_num_) + sizeof(default_proc_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SchedulerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.SchedulerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), this->policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.SchedulerConf.policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 routine_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_routine_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routine_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 default_proc_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_default_proc_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_proc_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_level_cpuset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_level_cpuset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_level_cpuset().data(), this->process_level_cpuset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.cyber.proto.InnerThread threads = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_threads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classic_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_choreography_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.SchedulerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.SchedulerConf)
  return false;
#undef DO_
}

void SchedulerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.SchedulerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy(), output);
  }

  // optional uint32 routine_num = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->routine_num(), output);
  }

  // optional uint32 default_proc_num = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->default_proc_num(), output);
  }

  // optional string process_level_cpuset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_level_cpuset().data(), this->process_level_cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->process_level_cpuset(), output);
  }

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  for (unsigned int i = 0, n = this->threads_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->threads(i), output);
  }

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->classic_conf_, output);
  }

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->choreography_conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.SchedulerConf)
}

::google::protobuf::uint8* SchedulerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SchedulerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->policy(), target);
  }

  // optional uint32 routine_num = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->routine_num(), target);
  }

  // optional uint32 default_proc_num = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->default_proc_num(), target);
  }

  // optional string process_level_cpuset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_level_cpuset().data(), this->process_level_cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->process_level_cpuset(), target);
  }

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  for (unsigned int i = 0, n = this->threads_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->threads(i), deterministic, target);
  }

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->classic_conf_, deterministic, target);
  }

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->choreography_conf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SchedulerConf)
  return target;
}

size_t SchedulerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SchedulerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  {
    unsigned int count = this->threads_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->threads(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string policy = 1;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

    // optional string process_level_cpuset = 4;
    if (has_process_level_cpuset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_level_cpuset());
    }

    // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
    if (has_classic_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classic_conf_);
    }

    // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
    if (has_choreography_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->choreography_conf_);
    }

    // optional uint32 routine_num = 2;
    if (has_routine_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routine_num());
    }

    // optional uint32 default_proc_num = 3;
    if (has_default_proc_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_proc_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchedulerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.SchedulerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const SchedulerConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchedulerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.SchedulerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.SchedulerConf)
    MergeFrom(*source);
  }
}

void SchedulerConf::MergeFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SchedulerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threads_.MergeFrom(from.threads_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_policy();
      policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_process_level_cpuset();
      process_level_cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_level_cpuset_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_classic_conf()->::apollo::cyber::proto::ClassicConf::MergeFrom(from.classic_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_choreography_conf()->::apollo::cyber::proto::ChoreographyConf::MergeFrom(from.choreography_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      routine_num_ = from.routine_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_proc_num_ = from.default_proc_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchedulerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.SchedulerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchedulerConf::CopyFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SchedulerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulerConf::IsInitialized() const {
  if (has_classic_conf()) {
    if (!this->classic_conf_->IsInitialized()) return false;
  }
  return true;
}

void SchedulerConf::Swap(SchedulerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchedulerConf::InternalSwap(SchedulerConf* other) {
  threads_.InternalSwap(&other->threads_);
  policy_.Swap(&other->policy_);
  process_level_cpuset_.Swap(&other->process_level_cpuset_);
  std::swap(classic_conf_, other->classic_conf_);
  std::swap(choreography_conf_, other->choreography_conf_);
  std::swap(routine_num_, other->routine_num_);
  std::swap(default_proc_num_, other->default_proc_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchedulerConf::GetMetadata() const {
  protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fscheduler_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchedulerConf

// optional string policy = 1;
bool SchedulerConf::has_policy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SchedulerConf::set_has_policy() {
  _has_bits_[0] |= 0x00000001u;
}
void SchedulerConf::clear_has_policy() {
  _has_bits_[0] &= ~0x00000001u;
}
void SchedulerConf::clear_policy() {
  policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy();
}
const ::std::string& SchedulerConf::policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.policy)
  return policy_.GetNoArena();
}
void SchedulerConf::set_policy(const ::std::string& value) {
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.policy)
}
#if LANG_CXX11
void SchedulerConf::set_policy(::std::string&& value) {
  set_has_policy();
  policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedulerConf.policy)
}
#endif
void SchedulerConf::set_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedulerConf.policy)
}
void SchedulerConf::set_policy(const char* value, size_t size) {
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedulerConf.policy)
}
::std::string* SchedulerConf::mutable_policy() {
  set_has_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.policy)
  return policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SchedulerConf::release_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.policy)
  clear_has_policy();
  return policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SchedulerConf::set_allocated_policy(::std::string* policy) {
  if (policy != NULL) {
    set_has_policy();
  } else {
    clear_has_policy();
  }
  policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.policy)
}

// optional uint32 routine_num = 2;
bool SchedulerConf::has_routine_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SchedulerConf::set_has_routine_num() {
  _has_bits_[0] |= 0x00000010u;
}
void SchedulerConf::clear_has_routine_num() {
  _has_bits_[0] &= ~0x00000010u;
}
void SchedulerConf::clear_routine_num() {
  routine_num_ = 0u;
  clear_has_routine_num();
}
::google::protobuf::uint32 SchedulerConf::routine_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.routine_num)
  return routine_num_;
}
void SchedulerConf::set_routine_num(::google::protobuf::uint32 value) {
  set_has_routine_num();
  routine_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.routine_num)
}

// optional uint32 default_proc_num = 3;
bool SchedulerConf::has_default_proc_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SchedulerConf::set_has_default_proc_num() {
  _has_bits_[0] |= 0x00000020u;
}
void SchedulerConf::clear_has_default_proc_num() {
  _has_bits_[0] &= ~0x00000020u;
}
void SchedulerConf::clear_default_proc_num() {
  default_proc_num_ = 0u;
  clear_has_default_proc_num();
}
::google::protobuf::uint32 SchedulerConf::default_proc_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.default_proc_num)
  return default_proc_num_;
}
void SchedulerConf::set_default_proc_num(::google::protobuf::uint32 value) {
  set_has_default_proc_num();
  default_proc_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.default_proc_num)
}

// optional string process_level_cpuset = 4;
bool SchedulerConf::has_process_level_cpuset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SchedulerConf::set_has_process_level_cpuset() {
  _has_bits_[0] |= 0x00000002u;
}
void SchedulerConf::clear_has_process_level_cpuset() {
  _has_bits_[0] &= ~0x00000002u;
}
void SchedulerConf::clear_process_level_cpuset() {
  process_level_cpuset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_level_cpuset();
}
const ::std::string& SchedulerConf::process_level_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
  return process_level_cpuset_.GetNoArena();
}
void SchedulerConf::set_process_level_cpuset(const ::std::string& value) {
  set_has_process_level_cpuset();
  process_level_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
#if LANG_CXX11
void SchedulerConf::set_process_level_cpuset(::std::string&& value) {
  set_has_process_level_cpuset();
  process_level_cpuset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
#endif
void SchedulerConf::set_process_level_cpuset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_process_level_cpuset();
  process_level_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
void SchedulerConf::set_process_level_cpuset(const char* value, size_t size) {
  set_has_process_level_cpuset();
  process_level_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
::std::string* SchedulerConf::mutable_process_level_cpuset() {
  set_has_process_level_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
  return process_level_cpuset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SchedulerConf::release_process_level_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
  clear_has_process_level_cpuset();
  return process_level_cpuset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SchedulerConf::set_allocated_process_level_cpuset(::std::string* process_level_cpuset) {
  if (process_level_cpuset != NULL) {
    set_has_process_level_cpuset();
  } else {
    clear_has_process_level_cpuset();
  }
  process_level_cpuset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_level_cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}

// repeated .apollo.cyber.proto.InnerThread threads = 5;
int SchedulerConf::threads_size() const {
  return threads_.size();
}
void SchedulerConf::clear_threads() {
  threads_.Clear();
}
const ::apollo::cyber::proto::InnerThread& SchedulerConf::threads(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.threads)
  return threads_.Get(index);
}
::apollo::cyber::proto::InnerThread* SchedulerConf::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.threads)
  return threads_.Mutable(index);
}
::apollo::cyber::proto::InnerThread* SchedulerConf::add_threads() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.SchedulerConf.threads)
  return threads_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::InnerThread >*
SchedulerConf::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.SchedulerConf.threads)
  return &threads_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::InnerThread >&
SchedulerConf::threads() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.SchedulerConf.threads)
  return threads_;
}

// optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
bool SchedulerConf::has_classic_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SchedulerConf::set_has_classic_conf() {
  _has_bits_[0] |= 0x00000004u;
}
void SchedulerConf::clear_has_classic_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
void SchedulerConf::clear_classic_conf() {
  if (classic_conf_ != NULL) classic_conf_->::apollo::cyber::proto::ClassicConf::Clear();
  clear_has_classic_conf();
}
const ::apollo::cyber::proto::ClassicConf& SchedulerConf::classic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.classic_conf)
  return classic_conf_ != NULL ? *classic_conf_
                         : *::apollo::cyber::proto::ClassicConf::internal_default_instance();
}
::apollo::cyber::proto::ClassicConf* SchedulerConf::mutable_classic_conf() {
  set_has_classic_conf();
  if (classic_conf_ == NULL) {
    classic_conf_ = new ::apollo::cyber::proto::ClassicConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.classic_conf)
  return classic_conf_;
}
::apollo::cyber::proto::ClassicConf* SchedulerConf::release_classic_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.classic_conf)
  clear_has_classic_conf();
  ::apollo::cyber::proto::ClassicConf* temp = classic_conf_;
  classic_conf_ = NULL;
  return temp;
}
void SchedulerConf::set_allocated_classic_conf(::apollo::cyber::proto::ClassicConf* classic_conf) {
  delete classic_conf_;
  classic_conf_ = classic_conf;
  if (classic_conf) {
    set_has_classic_conf();
  } else {
    clear_has_classic_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.classic_conf)
}

// optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
bool SchedulerConf::has_choreography_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SchedulerConf::set_has_choreography_conf() {
  _has_bits_[0] |= 0x00000008u;
}
void SchedulerConf::clear_has_choreography_conf() {
  _has_bits_[0] &= ~0x00000008u;
}
void SchedulerConf::clear_choreography_conf() {
  if (choreography_conf_ != NULL) choreography_conf_->::apollo::cyber::proto::ChoreographyConf::Clear();
  clear_has_choreography_conf();
}
const ::apollo::cyber::proto::ChoreographyConf& SchedulerConf::choreography_conf() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.choreography_conf)
  return choreography_conf_ != NULL ? *choreography_conf_
                         : *::apollo::cyber::proto::ChoreographyConf::internal_default_instance();
}
::apollo::cyber::proto::ChoreographyConf* SchedulerConf::mutable_choreography_conf() {
  set_has_choreography_conf();
  if (choreography_conf_ == NULL) {
    choreography_conf_ = new ::apollo::cyber::proto::ChoreographyConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.choreography_conf)
  return choreography_conf_;
}
::apollo::cyber::proto::ChoreographyConf* SchedulerConf::release_choreography_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.choreography_conf)
  clear_has_choreography_conf();
  ::apollo::cyber::proto::ChoreographyConf* temp = choreography_conf_;
  choreography_conf_ = NULL;
  return temp;
}
void SchedulerConf::set_allocated_choreography_conf(::apollo::cyber::proto::ChoreographyConf* choreography_conf) {
  delete choreography_conf_;
  choreography_conf_ = choreography_conf;
  if (choreography_conf) {
    set_has_choreography_conf();
  } else {
    clear_has_choreography_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.choreography_conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
