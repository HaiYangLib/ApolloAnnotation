// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/unit_test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cyber/proto/unit_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace cyber {
namespace proto {
class UnitTestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnitTest> {
} _UnitTest_default_instance_;
class ChatterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chatter> {
} _Chatter_default_instance_;
class ChatterBenchmarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatterBenchmark> {
} _ChatterBenchmark_default_instance_;

namespace protobuf_cyber_2fproto_2funit_5ftest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTest, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTest, case_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, lidar_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, content_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatterBenchmark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatterBenchmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatterBenchmark, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatterBenchmark, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatterBenchmark, content_),
  1,
  2,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(UnitTest)},
  { 9, 18, sizeof(Chatter)},
  { 22, 30, sizeof(ChatterBenchmark)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnitTest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Chatter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatterBenchmark_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cyber/proto/unit_test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _UnitTest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Chatter_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ChatterBenchmark_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UnitTest_default_instance_.DefaultConstruct();
  _Chatter_default_instance_.DefaultConstruct();
  _ChatterBenchmark_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033cyber/proto/unit_test.proto\022\022apollo.cy"
      "ber.proto\"1\n\010UnitTest\022\022\n\nclass_name\030\001 \001("
      "\t\022\021\n\tcase_name\030\002 \001(\t\"S\n\007Chatter\022\021\n\ttimes"
      "tamp\030\001 \001(\004\022\027\n\017lidar_timestamp\030\002 \001(\004\022\013\n\003s"
      "eq\030\003 \001(\004\022\017\n\007content\030\004 \001(\014\"\?\n\020ChatterBenc"
      "hmark\022\r\n\005stamp\030\001 \001(\004\022\013\n\003seq\030\002 \001(\004\022\017\n\007con"
      "tent\030\003 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cyber/proto/unit_test.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cyber_2fproto_2funit_5ftest_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitTest::kClassNameFieldNumber;
const int UnitTest::kCaseNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitTest::UnitTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2funit_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.UnitTest)
}
UnitTest::UnitTest(const UnitTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name()) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  case_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_case_name()) {
    case_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.case_name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.UnitTest)
}

void UnitTest::SharedCtor() {
  _cached_size_ = 0;
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnitTest::~UnitTest() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.UnitTest)
  SharedDtor();
}

void UnitTest::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnitTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitTest::descriptor() {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2funit_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnitTest& UnitTest::default_instance() {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnitTest* UnitTest::New(::google::protobuf::Arena* arena) const {
  UnitTest* n = new UnitTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnitTest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.UnitTest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_class_name()) {
      GOOGLE_DCHECK(!class_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*class_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_case_name()) {
      GOOGLE_DCHECK(!case_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*case_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnitTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.UnitTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string class_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.UnitTest.class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string case_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_case_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->case_name().data(), this->case_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.UnitTest.case_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.UnitTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.UnitTest)
  return false;
#undef DO_
}

void UnitTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.UnitTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string class_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.UnitTest.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_name(), output);
  }

  // optional string case_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->case_name().data(), this->case_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.UnitTest.case_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->case_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.UnitTest)
}

::google::protobuf::uint8* UnitTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.UnitTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string class_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.UnitTest.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // optional string case_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->case_name().data(), this->case_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.UnitTest.case_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->case_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.UnitTest)
  return target;
}

size_t UnitTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.UnitTest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string class_name = 1;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional string case_name = 2;
    if (has_case_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->case_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.UnitTest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.UnitTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.UnitTest)
    MergeFrom(*source);
  }
}

void UnitTest::MergeFrom(const UnitTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.UnitTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_case_name();
      case_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.case_name_);
    }
  }
}

void UnitTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.UnitTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitTest::CopyFrom(const UnitTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.UnitTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitTest::IsInitialized() const {
  return true;
}

void UnitTest::Swap(UnitTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitTest::InternalSwap(UnitTest* other) {
  class_name_.Swap(&other->class_name_);
  case_name_.Swap(&other->case_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnitTest::GetMetadata() const {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2funit_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnitTest

// optional string class_name = 1;
bool UnitTest::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnitTest::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
void UnitTest::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnitTest::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name();
}
const ::std::string& UnitTest::class_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.UnitTest.class_name)
  return class_name_.GetNoArena();
}
void UnitTest::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.UnitTest.class_name)
}
#if LANG_CXX11
void UnitTest::set_class_name(::std::string&& value) {
  set_has_class_name();
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.UnitTest.class_name)
}
#endif
void UnitTest::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.UnitTest.class_name)
}
void UnitTest::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.UnitTest.class_name)
}
::std::string* UnitTest::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.UnitTest.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnitTest::release_class_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.UnitTest.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnitTest::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.UnitTest.class_name)
}

// optional string case_name = 2;
bool UnitTest::has_case_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnitTest::set_has_case_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UnitTest::clear_has_case_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnitTest::clear_case_name() {
  case_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_case_name();
}
const ::std::string& UnitTest::case_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.UnitTest.case_name)
  return case_name_.GetNoArena();
}
void UnitTest::set_case_name(const ::std::string& value) {
  set_has_case_name();
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.UnitTest.case_name)
}
#if LANG_CXX11
void UnitTest::set_case_name(::std::string&& value) {
  set_has_case_name();
  case_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.UnitTest.case_name)
}
#endif
void UnitTest::set_case_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_case_name();
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.UnitTest.case_name)
}
void UnitTest::set_case_name(const char* value, size_t size) {
  set_has_case_name();
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.UnitTest.case_name)
}
::std::string* UnitTest::mutable_case_name() {
  set_has_case_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.UnitTest.case_name)
  return case_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnitTest::release_case_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.UnitTest.case_name)
  clear_has_case_name();
  return case_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnitTest::set_allocated_case_name(::std::string* case_name) {
  if (case_name != NULL) {
    set_has_case_name();
  } else {
    clear_has_case_name();
  }
  case_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), case_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.UnitTest.case_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chatter::kTimestampFieldNumber;
const int Chatter::kLidarTimestampFieldNumber;
const int Chatter::kSeqFieldNumber;
const int Chatter::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chatter::Chatter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2funit_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.Chatter)
}
Chatter::Chatter(const Chatter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.Chatter)
}

void Chatter::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seq_));
}

Chatter::~Chatter() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.Chatter)
  SharedDtor();
}

void Chatter::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chatter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chatter::descriptor() {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2funit_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chatter& Chatter::default_instance() {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chatter* Chatter::New(::google::protobuf::Arena* arena) const {
  Chatter* n = new Chatter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chatter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.Chatter)
  if (has_content()) {
    GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*content_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chatter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.Chatter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lidar_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lidar_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lidar_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 seq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.Chatter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.Chatter)
  return false;
#undef DO_
}

void Chatter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.Chatter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint64 lidar_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lidar_timestamp(), output);
  }

  // optional uint64 seq = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seq(), output);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.Chatter)
}

::google::protobuf::uint8* Chatter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.Chatter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint64 lidar_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lidar_timestamp(), target);
  }

  // optional uint64 seq = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seq(), target);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.Chatter)
  return target;
}

size_t Chatter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.Chatter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 lidar_timestamp = 2;
    if (has_lidar_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lidar_timestamp());
    }

    // optional uint64 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chatter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.Chatter)
  GOOGLE_DCHECK_NE(&from, this);
  const Chatter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chatter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.Chatter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.Chatter)
    MergeFrom(*source);
  }
}

void Chatter::MergeFrom(const Chatter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.Chatter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      lidar_timestamp_ = from.lidar_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chatter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.Chatter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chatter::CopyFrom(const Chatter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.Chatter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chatter::IsInitialized() const {
  return true;
}

void Chatter::Swap(Chatter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chatter::InternalSwap(Chatter* other) {
  content_.Swap(&other->content_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(lidar_timestamp_, other->lidar_timestamp_);
  std::swap(seq_, other->seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chatter::GetMetadata() const {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2funit_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chatter

// optional uint64 timestamp = 1;
bool Chatter::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chatter::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void Chatter::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chatter::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Chatter::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Chatter.timestamp)
  return timestamp_;
}
void Chatter::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Chatter.timestamp)
}

// optional uint64 lidar_timestamp = 2;
bool Chatter::has_lidar_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chatter::set_has_lidar_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void Chatter::clear_has_lidar_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chatter::clear_lidar_timestamp() {
  lidar_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_lidar_timestamp();
}
::google::protobuf::uint64 Chatter::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Chatter.lidar_timestamp)
  return lidar_timestamp_;
}
void Chatter::set_lidar_timestamp(::google::protobuf::uint64 value) {
  set_has_lidar_timestamp();
  lidar_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Chatter.lidar_timestamp)
}

// optional uint64 seq = 3;
bool Chatter::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Chatter::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void Chatter::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void Chatter::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
  clear_has_seq();
}
::google::protobuf::uint64 Chatter::seq() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Chatter.seq)
  return seq_;
}
void Chatter::set_seq(::google::protobuf::uint64 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Chatter.seq)
}

// optional bytes content = 4;
bool Chatter::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chatter::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void Chatter::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chatter::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& Chatter::content() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Chatter.content)
  return content_.GetNoArena();
}
void Chatter::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Chatter.content)
}
#if LANG_CXX11
void Chatter::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Chatter.content)
}
#endif
void Chatter::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Chatter.content)
}
void Chatter::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Chatter.content)
}
::std::string* Chatter::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Chatter.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chatter::release_content() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Chatter.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chatter::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Chatter.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatterBenchmark::kStampFieldNumber;
const int ChatterBenchmark::kSeqFieldNumber;
const int ChatterBenchmark::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatterBenchmark::ChatterBenchmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2funit_5ftest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChatterBenchmark)
}
ChatterBenchmark::ChatterBenchmark(const ChatterBenchmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&stamp_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChatterBenchmark)
}

void ChatterBenchmark::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stamp_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&stamp_) + sizeof(seq_));
}

ChatterBenchmark::~ChatterBenchmark() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChatterBenchmark)
  SharedDtor();
}

void ChatterBenchmark::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatterBenchmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatterBenchmark::descriptor() {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2funit_5ftest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatterBenchmark& ChatterBenchmark::default_instance() {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatterBenchmark* ChatterBenchmark::New(::google::protobuf::Arena* arena) const {
  ChatterBenchmark* n = new ChatterBenchmark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatterBenchmark::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChatterBenchmark)
  if (has_content()) {
    GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*content_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&stamp_, 0, reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&stamp_) + sizeof(seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatterBenchmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChatterBenchmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChatterBenchmark.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChatterBenchmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChatterBenchmark)
  return false;
#undef DO_
}

void ChatterBenchmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChatterBenchmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }

  // optional uint64 seq = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seq(), output);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChatterBenchmark.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChatterBenchmark)
}

::google::protobuf::uint8* ChatterBenchmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChatterBenchmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }

  // optional uint64 seq = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seq(), target);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChatterBenchmark.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChatterBenchmark)
  return target;
}

size_t ChatterBenchmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChatterBenchmark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }

    // optional uint64 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatterBenchmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChatterBenchmark)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatterBenchmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatterBenchmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChatterBenchmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChatterBenchmark)
    MergeFrom(*source);
  }
}

void ChatterBenchmark::MergeFrom(const ChatterBenchmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChatterBenchmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatterBenchmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChatterBenchmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatterBenchmark::CopyFrom(const ChatterBenchmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChatterBenchmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatterBenchmark::IsInitialized() const {
  return true;
}

void ChatterBenchmark::Swap(ChatterBenchmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatterBenchmark::InternalSwap(ChatterBenchmark* other) {
  content_.Swap(&other->content_);
  std::swap(stamp_, other->stamp_);
  std::swap(seq_, other->seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatterBenchmark::GetMetadata() const {
  protobuf_cyber_2fproto_2funit_5ftest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2funit_5ftest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatterBenchmark

// optional uint64 stamp = 1;
bool ChatterBenchmark::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatterBenchmark::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatterBenchmark::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatterBenchmark::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_stamp();
}
::google::protobuf::uint64 ChatterBenchmark::stamp() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChatterBenchmark.stamp)
  return stamp_;
}
void ChatterBenchmark::set_stamp(::google::protobuf::uint64 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChatterBenchmark.stamp)
}

// optional uint64 seq = 2;
bool ChatterBenchmark::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatterBenchmark::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatterBenchmark::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatterBenchmark::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
  clear_has_seq();
}
::google::protobuf::uint64 ChatterBenchmark::seq() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChatterBenchmark.seq)
  return seq_;
}
void ChatterBenchmark::set_seq(::google::protobuf::uint64 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChatterBenchmark.seq)
}

// optional string content = 3;
bool ChatterBenchmark::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatterBenchmark::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatterBenchmark::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatterBenchmark::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& ChatterBenchmark::content() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChatterBenchmark.content)
  return content_.GetNoArena();
}
void ChatterBenchmark::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChatterBenchmark.content)
}
#if LANG_CXX11
void ChatterBenchmark::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChatterBenchmark.content)
}
#endif
void ChatterBenchmark::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChatterBenchmark.content)
}
void ChatterBenchmark::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChatterBenchmark.content)
}
::std::string* ChatterBenchmark::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChatterBenchmark.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatterBenchmark::release_content() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChatterBenchmark.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatterBenchmark::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChatterBenchmark.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
