// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/role_attributes.proto

#ifndef PROTOBUF_cyber_2fproto_2frole_5fattributes_2eproto__INCLUDED
#define PROTOBUF_cyber_2fproto_2frole_5fattributes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cyber/proto/qos_profile.pb.h"
// @@protoc_insertion_point(includes)
namespace apollo {
namespace cyber {
namespace proto {
class QosProfile;
class QosProfileDefaultTypeInternal;
extern QosProfileDefaultTypeInternal _QosProfile_default_instance_;
class RoleAttributes;
class RoleAttributesDefaultTypeInternal;
extern RoleAttributesDefaultTypeInternal _RoleAttributes_default_instance_;
class SocketAddr;
class SocketAddrDefaultTypeInternal;
extern SocketAddrDefaultTypeInternal _SocketAddr_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo

namespace apollo {
namespace cyber {
namespace proto {

namespace protobuf_cyber_2fproto_2frole_5fattributes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cyber_2fproto_2frole_5fattributes_2eproto

// ===================================================================

class SocketAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SocketAddr) */ {
 public:
  SocketAddr();
  virtual ~SocketAddr();

  SocketAddr(const SocketAddr& from);

  inline SocketAddr& operator=(const SocketAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SocketAddr& default_instance();

  static inline const SocketAddr* internal_default_instance() {
    return reinterpret_cast<const SocketAddr*>(
               &_SocketAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SocketAddr* other);

  // implements Message ----------------------------------------------

  inline SocketAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  SocketAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocketAddr& from);
  void MergeFrom(const SocketAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocketAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SocketAddr)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  friend struct protobuf_cyber_2fproto_2frole_5fattributes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoleAttributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.RoleAttributes) */ {
 public:
  RoleAttributes();
  virtual ~RoleAttributes();

  RoleAttributes(const RoleAttributes& from);

  inline RoleAttributes& operator=(const RoleAttributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleAttributes& default_instance();

  static inline const RoleAttributes* internal_default_instance() {
    return reinterpret_cast<const RoleAttributes*>(
               &_RoleAttributes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RoleAttributes* other);

  // implements Message ----------------------------------------------

  inline RoleAttributes* New() const PROTOBUF_FINAL { return New(NULL); }

  RoleAttributes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoleAttributes& from);
  void MergeFrom(const RoleAttributes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoleAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host_name = 1;
  bool has_host_name() const;
  void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // optional string host_ip = 2;
  bool has_host_ip() const;
  void clear_host_ip();
  static const int kHostIpFieldNumber = 2;
  const ::std::string& host_ip() const;
  void set_host_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_host_ip(::std::string&& value);
  #endif
  void set_host_ip(const char* value);
  void set_host_ip(const char* value, size_t size);
  ::std::string* mutable_host_ip();
  ::std::string* release_host_ip();
  void set_allocated_host_ip(::std::string* host_ip);

  // optional string node_name = 4;
  bool has_node_name() const;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 4;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // optional string channel_name = 6;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 6;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional string message_type = 8;
  bool has_message_type() const;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 8;
  const ::std::string& message_type() const;
  void set_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_message_type(::std::string&& value);
  #endif
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  ::std::string* mutable_message_type();
  ::std::string* release_message_type();
  void set_allocated_message_type(::std::string* message_type);

  // optional bytes proto_desc = 9;
  bool has_proto_desc() const;
  void clear_proto_desc();
  static const int kProtoDescFieldNumber = 9;
  const ::std::string& proto_desc() const;
  void set_proto_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_desc(::std::string&& value);
  #endif
  void set_proto_desc(const char* value);
  void set_proto_desc(const void* value, size_t size);
  ::std::string* mutable_proto_desc();
  ::std::string* release_proto_desc();
  void set_allocated_proto_desc(::std::string* proto_desc);

  // optional string service_name = 13;
  bool has_service_name() const;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 13;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
  bool has_qos_profile() const;
  void clear_qos_profile();
  static const int kQosProfileFieldNumber = 11;
  const ::apollo::cyber::proto::QosProfile& qos_profile() const;
  ::apollo::cyber::proto::QosProfile* mutable_qos_profile();
  ::apollo::cyber::proto::QosProfile* release_qos_profile();
  void set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile);

  // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
  bool has_socket_addr() const;
  void clear_socket_addr();
  static const int kSocketAddrFieldNumber = 12;
  const ::apollo::cyber::proto::SocketAddr& socket_addr() const;
  ::apollo::cyber::proto::SocketAddr* mutable_socket_addr();
  ::apollo::cyber::proto::SocketAddr* release_socket_addr();
  void set_allocated_socket_addr(::apollo::cyber::proto::SocketAddr* socket_addr);

  // optional uint64 node_id = 5;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 5;
  ::google::protobuf::uint64 node_id() const;
  void set_node_id(::google::protobuf::uint64 value);

  // optional uint64 channel_id = 7;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 7;
  ::google::protobuf::uint64 channel_id() const;
  void set_channel_id(::google::protobuf::uint64 value);

  // optional uint64 id = 10;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 10;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint64 service_id = 14;
  bool has_service_id() const;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 14;
  ::google::protobuf::uint64 service_id() const;
  void set_service_id(::google::protobuf::uint64 value);

  // optional int32 process_id = 3;
  bool has_process_id() const;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 3;
  ::google::protobuf::int32 process_id() const;
  void set_process_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.RoleAttributes)
 private:
  void set_has_host_name();
  void clear_has_host_name();
  void set_has_host_ip();
  void clear_has_host_ip();
  void set_has_process_id();
  void clear_has_process_id();
  void set_has_node_name();
  void clear_has_node_name();
  void set_has_node_id();
  void clear_has_node_id();
  void set_has_channel_name();
  void clear_has_channel_name();
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_message_type();
  void clear_has_message_type();
  void set_has_proto_desc();
  void clear_has_proto_desc();
  void set_has_id();
  void clear_has_id();
  void set_has_qos_profile();
  void clear_has_qos_profile();
  void set_has_socket_addr();
  void clear_has_socket_addr();
  void set_has_service_name();
  void clear_has_service_name();
  void set_has_service_id();
  void clear_has_service_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::google::protobuf::internal::ArenaStringPtr host_ip_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::internal::ArenaStringPtr message_type_;
  ::google::protobuf::internal::ArenaStringPtr proto_desc_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::apollo::cyber::proto::QosProfile* qos_profile_;
  ::apollo::cyber::proto::SocketAddr* socket_addr_;
  ::google::protobuf::uint64 node_id_;
  ::google::protobuf::uint64 channel_id_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 service_id_;
  ::google::protobuf::int32 process_id_;
  friend struct protobuf_cyber_2fproto_2frole_5fattributes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SocketAddr

// optional string ip = 1;
inline bool SocketAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocketAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SocketAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SocketAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& SocketAddr::ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.ip)
  return ip_.GetNoArena();
}
inline void SocketAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.ip)
}
#if LANG_CXX11
inline void SocketAddr::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SocketAddr.ip)
}
#endif
inline void SocketAddr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SocketAddr.ip)
}
inline void SocketAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SocketAddr.ip)
}
inline ::std::string* SocketAddr::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SocketAddr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SocketAddr::release_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SocketAddr.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SocketAddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SocketAddr.ip)
}

// optional uint32 port = 2;
inline bool SocketAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocketAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SocketAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SocketAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 SocketAddr::port() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.port)
  return port_;
}
inline void SocketAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.port)
}

// -------------------------------------------------------------------

// RoleAttributes

// optional string host_name = 1;
inline bool RoleAttributes::has_host_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleAttributes::set_has_host_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleAttributes::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleAttributes::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_name();
}
inline const ::std::string& RoleAttributes::host_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_name)
  return host_name_.GetNoArena();
}
inline void RoleAttributes::set_host_name(const ::std::string& value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_name)
}
#if LANG_CXX11
inline void RoleAttributes::set_host_name(::std::string&& value) {
  set_has_host_name();
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.host_name)
}
#endif
inline void RoleAttributes::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.host_name)
}
inline void RoleAttributes::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.host_name)
}
inline ::std::string* RoleAttributes::mutable_host_name() {
  set_has_host_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleAttributes::release_host_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_name)
  clear_has_host_name();
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    set_has_host_name();
  } else {
    clear_has_host_name();
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_name)
}

// optional string host_ip = 2;
inline bool RoleAttributes::has_host_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleAttributes::set_has_host_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleAttributes::clear_has_host_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleAttributes::clear_host_ip() {
  host_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_ip();
}
inline const ::std::string& RoleAttributes::host_ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_ip)
  return host_ip_.GetNoArena();
}
inline void RoleAttributes::set_host_ip(const ::std::string& value) {
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_ip)
}
#if LANG_CXX11
inline void RoleAttributes::set_host_ip(::std::string&& value) {
  set_has_host_ip();
  host_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.host_ip)
}
#endif
inline void RoleAttributes::set_host_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.host_ip)
}
inline void RoleAttributes::set_host_ip(const char* value, size_t size) {
  set_has_host_ip();
  host_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.host_ip)
}
inline ::std::string* RoleAttributes::mutable_host_ip() {
  set_has_host_ip();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_ip)
  return host_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleAttributes::release_host_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_ip)
  clear_has_host_ip();
  return host_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_host_ip(::std::string* host_ip) {
  if (host_ip != NULL) {
    set_has_host_ip();
  } else {
    clear_has_host_ip();
  }
  host_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_ip)
}

// optional int32 process_id = 3;
inline bool RoleAttributes::has_process_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleAttributes::set_has_process_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleAttributes::clear_has_process_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleAttributes::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
inline ::google::protobuf::int32 RoleAttributes::process_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.process_id)
  return process_id_;
}
inline void RoleAttributes::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.process_id)
}

// optional string node_name = 4;
inline bool RoleAttributes::has_node_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleAttributes::set_has_node_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleAttributes::clear_has_node_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleAttributes::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_name();
}
inline const ::std::string& RoleAttributes::node_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_name)
  return node_name_.GetNoArena();
}
inline void RoleAttributes::set_node_name(const ::std::string& value) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_name)
}
#if LANG_CXX11
inline void RoleAttributes::set_node_name(::std::string&& value) {
  set_has_node_name();
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.node_name)
}
#endif
inline void RoleAttributes::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.node_name)
}
inline void RoleAttributes::set_node_name(const char* value, size_t size) {
  set_has_node_name();
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.node_name)
}
inline ::std::string* RoleAttributes::mutable_node_name() {
  set_has_node_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleAttributes::release_node_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.node_name)
  clear_has_node_name();
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    set_has_node_name();
  } else {
    clear_has_node_name();
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.node_name)
}

// optional uint64 node_id = 5;
inline bool RoleAttributes::has_node_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleAttributes::set_has_node_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleAttributes::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleAttributes::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_node_id();
}
inline ::google::protobuf::uint64 RoleAttributes::node_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_id)
  return node_id_;
}
inline void RoleAttributes::set_node_id(::google::protobuf::uint64 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_id)
}

// optional string channel_name = 6;
inline bool RoleAttributes::has_channel_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleAttributes::set_has_channel_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleAttributes::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleAttributes::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
inline const ::std::string& RoleAttributes::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_name)
  return channel_name_.GetNoArena();
}
inline void RoleAttributes::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_name)
}
#if LANG_CXX11
inline void RoleAttributes::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.channel_name)
}
#endif
inline void RoleAttributes::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.channel_name)
}
inline void RoleAttributes::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.channel_name)
}
inline ::std::string* RoleAttributes::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleAttributes::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.channel_name)
}

// optional uint64 channel_id = 7;
inline bool RoleAttributes::has_channel_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleAttributes::set_has_channel_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleAttributes::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleAttributes::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
inline ::google::protobuf::uint64 RoleAttributes::channel_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_id)
  return channel_id_;
}
inline void RoleAttributes::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_id)
}

// optional string message_type = 8;
inline bool RoleAttributes::has_message_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleAttributes::set_has_message_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleAttributes::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleAttributes::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
inline const ::std::string& RoleAttributes::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.message_type)
  return message_type_.GetNoArena();
}
inline void RoleAttributes::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.message_type)
}
#if LANG_CXX11
inline void RoleAttributes::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.message_type)
}
#endif
inline void RoleAttributes::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.message_type)
}
inline void RoleAttributes::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.message_type)
}
inline ::std::string* RoleAttributes::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleAttributes::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.message_type)
}

// optional bytes proto_desc = 9;
inline bool RoleAttributes::has_proto_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleAttributes::set_has_proto_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleAttributes::clear_has_proto_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleAttributes::clear_proto_desc() {
  proto_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_desc();
}
inline const ::std::string& RoleAttributes::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.proto_desc)
  return proto_desc_.GetNoArena();
}
inline void RoleAttributes::set_proto_desc(const ::std::string& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.proto_desc)
}
#if LANG_CXX11
inline void RoleAttributes::set_proto_desc(::std::string&& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.proto_desc)
}
#endif
inline void RoleAttributes::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.proto_desc)
}
inline void RoleAttributes::set_proto_desc(const void* value, size_t size) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.proto_desc)
}
inline ::std::string* RoleAttributes::mutable_proto_desc() {
  set_has_proto_desc();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.proto_desc)
  return proto_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleAttributes::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.proto_desc)
  clear_has_proto_desc();
  return proto_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_proto_desc(::std::string* proto_desc) {
  if (proto_desc != NULL) {
    set_has_proto_desc();
  } else {
    clear_has_proto_desc();
  }
  proto_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.proto_desc)
}

// optional uint64 id = 10;
inline bool RoleAttributes::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleAttributes::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleAttributes::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleAttributes::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RoleAttributes::id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.id)
  return id_;
}
inline void RoleAttributes::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.id)
}

// optional .apollo.cyber.proto.QosProfile qos_profile = 11;
inline bool RoleAttributes::has_qos_profile() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleAttributes::set_has_qos_profile() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleAttributes::clear_has_qos_profile() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleAttributes::clear_qos_profile() {
  if (qos_profile_ != NULL) qos_profile_->::apollo::cyber::proto::QosProfile::Clear();
  clear_has_qos_profile();
}
inline const ::apollo::cyber::proto::QosProfile& RoleAttributes::qos_profile() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.qos_profile)
  return qos_profile_ != NULL ? *qos_profile_
                         : *::apollo::cyber::proto::QosProfile::internal_default_instance();
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::mutable_qos_profile() {
  set_has_qos_profile();
  if (qos_profile_ == NULL) {
    qos_profile_ = new ::apollo::cyber::proto::QosProfile;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.qos_profile)
  return qos_profile_;
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::release_qos_profile() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.qos_profile)
  clear_has_qos_profile();
  ::apollo::cyber::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = NULL;
  return temp;
}
inline void RoleAttributes::set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile) {
  delete qos_profile_;
  qos_profile_ = qos_profile;
  if (qos_profile) {
    set_has_qos_profile();
  } else {
    clear_has_qos_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.qos_profile)
}

// optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
inline bool RoleAttributes::has_socket_addr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleAttributes::set_has_socket_addr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleAttributes::clear_has_socket_addr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleAttributes::clear_socket_addr() {
  if (socket_addr_ != NULL) socket_addr_->::apollo::cyber::proto::SocketAddr::Clear();
  clear_has_socket_addr();
}
inline const ::apollo::cyber::proto::SocketAddr& RoleAttributes::socket_addr() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.socket_addr)
  return socket_addr_ != NULL ? *socket_addr_
                         : *::apollo::cyber::proto::SocketAddr::internal_default_instance();
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::mutable_socket_addr() {
  set_has_socket_addr();
  if (socket_addr_ == NULL) {
    socket_addr_ = new ::apollo::cyber::proto::SocketAddr;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.socket_addr)
  return socket_addr_;
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::release_socket_addr() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.socket_addr)
  clear_has_socket_addr();
  ::apollo::cyber::proto::SocketAddr* temp = socket_addr_;
  socket_addr_ = NULL;
  return temp;
}
inline void RoleAttributes::set_allocated_socket_addr(::apollo::cyber::proto::SocketAddr* socket_addr) {
  delete socket_addr_;
  socket_addr_ = socket_addr;
  if (socket_addr) {
    set_has_socket_addr();
  } else {
    clear_has_socket_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.socket_addr)
}

// optional string service_name = 13;
inline bool RoleAttributes::has_service_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleAttributes::set_has_service_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleAttributes::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleAttributes::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
inline const ::std::string& RoleAttributes::service_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_name)
  return service_name_.GetNoArena();
}
inline void RoleAttributes::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_name)
}
#if LANG_CXX11
inline void RoleAttributes::set_service_name(::std::string&& value) {
  set_has_service_name();
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.service_name)
}
#endif
inline void RoleAttributes::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.service_name)
}
inline void RoleAttributes::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.service_name)
}
inline ::std::string* RoleAttributes::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleAttributes::release_service_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.service_name)
  clear_has_service_name();
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.service_name)
}

// optional uint64 service_id = 14;
inline bool RoleAttributes::has_service_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleAttributes::set_has_service_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleAttributes::clear_has_service_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleAttributes::clear_service_id() {
  service_id_ = GOOGLE_ULONGLONG(0);
  clear_has_service_id();
}
inline ::google::protobuf::uint64 RoleAttributes::service_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_id)
  return service_id_;
}
inline void RoleAttributes::set_service_id(::google::protobuf::uint64 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cyber_2fproto_2frole_5fattributes_2eproto__INCLUDED
