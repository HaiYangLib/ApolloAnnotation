// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/record.proto

#ifndef PROTOBUF_cyber_2fproto_2frecord_2eproto__INCLUDED
#define PROTOBUF_cyber_2fproto_2frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace apollo {
namespace cyber {
namespace proto {
class Channel;
class ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelCache;
class ChannelCacheDefaultTypeInternal;
extern ChannelCacheDefaultTypeInternal _ChannelCache_default_instance_;
class ChunkBody;
class ChunkBodyDefaultTypeInternal;
extern ChunkBodyDefaultTypeInternal _ChunkBody_default_instance_;
class ChunkBodyCache;
class ChunkBodyCacheDefaultTypeInternal;
extern ChunkBodyCacheDefaultTypeInternal _ChunkBodyCache_default_instance_;
class ChunkHeader;
class ChunkHeaderDefaultTypeInternal;
extern ChunkHeaderDefaultTypeInternal _ChunkHeader_default_instance_;
class ChunkHeaderCache;
class ChunkHeaderCacheDefaultTypeInternal;
extern ChunkHeaderCacheDefaultTypeInternal _ChunkHeaderCache_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class SingleIndex;
class SingleIndexDefaultTypeInternal;
extern SingleIndexDefaultTypeInternal _SingleIndex_default_instance_;
class SingleMessage;
class SingleMessageDefaultTypeInternal;
extern SingleMessageDefaultTypeInternal _SingleMessage_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo

namespace apollo {
namespace cyber {
namespace proto {

namespace protobuf_cyber_2fproto_2frecord_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cyber_2fproto_2frecord_2eproto

enum SectionType {
  SECTION_HEADER = 0,
  SECTION_CHUNK_HEADER = 1,
  SECTION_CHUNK_BODY = 2,
  SECTION_INDEX = 3,
  SECTION_CHANNEL = 4
};
bool SectionType_IsValid(int value);
const SectionType SectionType_MIN = SECTION_HEADER;
const SectionType SectionType_MAX = SECTION_CHANNEL;
const int SectionType_ARRAYSIZE = SectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SectionType_descriptor();
inline const ::std::string& SectionType_Name(SectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SectionType_descriptor(), value);
}
inline bool SectionType_Parse(
    const ::std::string& name, SectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SectionType>(
    SectionType_descriptor(), name, value);
}
enum CompressType {
  COMPRESS_NONE = 0,
  COMPRESS_BZ2 = 1,
  COMPRESS_LZ4 = 2
};
bool CompressType_IsValid(int value);
const CompressType CompressType_MIN = COMPRESS_NONE;
const CompressType CompressType_MAX = COMPRESS_LZ4;
const int CompressType_ARRAYSIZE = CompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressType_descriptor();
inline const ::std::string& CompressType_Name(CompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressType_descriptor(), value);
}
inline bool CompressType_Parse(
    const ::std::string& name, CompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressType>(
    CompressType_descriptor(), name, value);
}
// ===================================================================

class SingleIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SingleIndex) */ {
 public:
  SingleIndex();
  virtual ~SingleIndex();

  SingleIndex(const SingleIndex& from);

  inline SingleIndex& operator=(const SingleIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleIndex& default_instance();

  enum CacheCase {
    kChannelCache = 101,
    kChunkHeaderCache = 102,
    kChunkBodyCache = 103,
    CACHE_NOT_SET = 0,
  };

  static inline const SingleIndex* internal_default_instance() {
    return reinterpret_cast<const SingleIndex*>(
               &_SingleIndex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SingleIndex* other);

  // implements Message ----------------------------------------------

  inline SingleIndex* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleIndex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleIndex& from);
  void MergeFrom(const SingleIndex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint64 position() const;
  void set_position(::google::protobuf::uint64 value);

  // optional .apollo.cyber.proto.SectionType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::cyber::proto::SectionType type() const;
  void set_type(::apollo::cyber::proto::SectionType value);

  // optional .apollo.cyber.proto.ChannelCache channel_cache = 101;
  bool has_channel_cache() const;
  void clear_channel_cache();
  static const int kChannelCacheFieldNumber = 101;
  const ::apollo::cyber::proto::ChannelCache& channel_cache() const;
  ::apollo::cyber::proto::ChannelCache* mutable_channel_cache();
  ::apollo::cyber::proto::ChannelCache* release_channel_cache();
  void set_allocated_channel_cache(::apollo::cyber::proto::ChannelCache* channel_cache);

  // optional .apollo.cyber.proto.ChunkHeaderCache chunk_header_cache = 102;
  bool has_chunk_header_cache() const;
  void clear_chunk_header_cache();
  static const int kChunkHeaderCacheFieldNumber = 102;
  const ::apollo::cyber::proto::ChunkHeaderCache& chunk_header_cache() const;
  ::apollo::cyber::proto::ChunkHeaderCache* mutable_chunk_header_cache();
  ::apollo::cyber::proto::ChunkHeaderCache* release_chunk_header_cache();
  void set_allocated_chunk_header_cache(::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache);

  // optional .apollo.cyber.proto.ChunkBodyCache chunk_body_cache = 103;
  bool has_chunk_body_cache() const;
  void clear_chunk_body_cache();
  static const int kChunkBodyCacheFieldNumber = 103;
  const ::apollo::cyber::proto::ChunkBodyCache& chunk_body_cache() const;
  ::apollo::cyber::proto::ChunkBodyCache* mutable_chunk_body_cache();
  ::apollo::cyber::proto::ChunkBodyCache* release_chunk_body_cache();
  void set_allocated_chunk_body_cache(::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache);

  CacheCase cache_case() const;
  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SingleIndex)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_position();
  void clear_has_position();
  void set_has_channel_cache();
  void set_has_chunk_header_cache();
  void set_has_chunk_body_cache();

  inline bool has_cache() const;
  void clear_cache();
  inline void clear_has_cache();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 position_;
  int type_;
  union CacheUnion {
    CacheUnion() {}
    ::apollo::cyber::proto::ChannelCache* channel_cache_;
    ::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache_;
    ::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache_;
  } cache_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkHeaderCache : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkHeaderCache) */ {
 public:
  ChunkHeaderCache();
  virtual ~ChunkHeaderCache();

  ChunkHeaderCache(const ChunkHeaderCache& from);

  inline ChunkHeaderCache& operator=(const ChunkHeaderCache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkHeaderCache& default_instance();

  static inline const ChunkHeaderCache* internal_default_instance() {
    return reinterpret_cast<const ChunkHeaderCache*>(
               &_ChunkHeaderCache_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChunkHeaderCache* other);

  // implements Message ----------------------------------------------

  inline ChunkHeaderCache* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkHeaderCache* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkHeaderCache& from);
  void MergeFrom(const ChunkHeaderCache& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkHeaderCache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 message_number = 1;
  bool has_message_number() const;
  void clear_message_number();
  static const int kMessageNumberFieldNumber = 1;
  ::google::protobuf::uint64 message_number() const;
  void set_message_number(::google::protobuf::uint64 value);

  // optional uint64 begin_time = 2;
  bool has_begin_time() const;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  ::google::protobuf::uint64 begin_time() const;
  void set_begin_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 3;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // optional uint64 raw_size = 4;
  bool has_raw_size() const;
  void clear_raw_size();
  static const int kRawSizeFieldNumber = 4;
  ::google::protobuf::uint64 raw_size() const;
  void set_raw_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkHeaderCache)
 private:
  void set_has_message_number();
  void clear_has_message_number();
  void set_has_begin_time();
  void clear_has_begin_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_raw_size();
  void clear_has_raw_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 message_number_;
  ::google::protobuf::uint64 begin_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint64 raw_size_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkBodyCache : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkBodyCache) */ {
 public:
  ChunkBodyCache();
  virtual ~ChunkBodyCache();

  ChunkBodyCache(const ChunkBodyCache& from);

  inline ChunkBodyCache& operator=(const ChunkBodyCache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkBodyCache& default_instance();

  static inline const ChunkBodyCache* internal_default_instance() {
    return reinterpret_cast<const ChunkBodyCache*>(
               &_ChunkBodyCache_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ChunkBodyCache* other);

  // implements Message ----------------------------------------------

  inline ChunkBodyCache* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkBodyCache* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkBodyCache& from);
  void MergeFrom(const ChunkBodyCache& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkBodyCache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 message_number = 1;
  bool has_message_number() const;
  void clear_message_number();
  static const int kMessageNumberFieldNumber = 1;
  ::google::protobuf::uint64 message_number() const;
  void set_message_number(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkBodyCache)
 private:
  void set_has_message_number();
  void clear_has_message_number();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 message_number_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelCache : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChannelCache) */ {
 public:
  ChannelCache();
  virtual ~ChannelCache();

  ChannelCache(const ChannelCache& from);

  inline ChannelCache& operator=(const ChannelCache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelCache& default_instance();

  static inline const ChannelCache* internal_default_instance() {
    return reinterpret_cast<const ChannelCache*>(
               &_ChannelCache_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ChannelCache* other);

  // implements Message ----------------------------------------------

  inline ChannelCache* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelCache* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelCache& from);
  void MergeFrom(const ChannelCache& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelCache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string message_type = 3;
  bool has_message_type() const;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 3;
  const ::std::string& message_type() const;
  void set_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_message_type(::std::string&& value);
  #endif
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  ::std::string* mutable_message_type();
  ::std::string* release_message_type();
  void set_allocated_message_type(::std::string* message_type);

  // optional bytes proto_desc = 4;
  bool has_proto_desc() const;
  void clear_proto_desc();
  static const int kProtoDescFieldNumber = 4;
  const ::std::string& proto_desc() const;
  void set_proto_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_desc(::std::string&& value);
  #endif
  void set_proto_desc(const char* value);
  void set_proto_desc(const void* value, size_t size);
  ::std::string* mutable_proto_desc();
  ::std::string* release_proto_desc();
  void set_allocated_proto_desc(::std::string* proto_desc);

  // optional uint64 message_number = 1;
  bool has_message_number() const;
  void clear_message_number();
  static const int kMessageNumberFieldNumber = 1;
  ::google::protobuf::uint64 message_number() const;
  void set_message_number(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChannelCache)
 private:
  void set_has_message_number();
  void clear_has_message_number();
  void set_has_name();
  void clear_has_name();
  void set_has_message_type();
  void clear_has_message_type();
  void set_has_proto_desc();
  void clear_has_proto_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr message_type_;
  ::google::protobuf::internal::ArenaStringPtr proto_desc_;
  ::google::protobuf::uint64 message_number_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SingleMessage) */ {
 public:
  SingleMessage();
  virtual ~SingleMessage();

  SingleMessage(const SingleMessage& from);

  inline SingleMessage& operator=(const SingleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleMessage& default_instance();

  static inline const SingleMessage* internal_default_instance() {
    return reinterpret_cast<const SingleMessage*>(
               &_SingleMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SingleMessage* other);

  // implements Message ----------------------------------------------

  inline SingleMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleMessage& from);
  void MergeFrom(const SingleMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel_name = 1;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional bytes content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional uint64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SingleMessage)
 private:
  void set_has_channel_name();
  void clear_has_channel_name();
  void set_has_time();
  void clear_has_time();
  void set_has_content();
  void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 time_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 major_version = 1;
  bool has_major_version() const;
  void clear_major_version();
  static const int kMajorVersionFieldNumber = 1;
  ::google::protobuf::uint32 major_version() const;
  void set_major_version(::google::protobuf::uint32 value);

  // optional uint32 minor_version = 2;
  bool has_minor_version() const;
  void clear_minor_version();
  static const int kMinorVersionFieldNumber = 2;
  ::google::protobuf::uint32 minor_version() const;
  void set_minor_version(::google::protobuf::uint32 value);

  // optional uint64 chunk_interval = 4;
  bool has_chunk_interval() const;
  void clear_chunk_interval();
  static const int kChunkIntervalFieldNumber = 4;
  ::google::protobuf::uint64 chunk_interval() const;
  void set_chunk_interval(::google::protobuf::uint64 value);

  // optional uint64 segment_interval = 5;
  bool has_segment_interval() const;
  void clear_segment_interval();
  static const int kSegmentIntervalFieldNumber = 5;
  ::google::protobuf::uint64 segment_interval() const;
  void set_segment_interval(::google::protobuf::uint64 value);

  // optional uint64 index_position = 6 [default = 0];
  bool has_index_position() const;
  void clear_index_position();
  static const int kIndexPositionFieldNumber = 6;
  ::google::protobuf::uint64 index_position() const;
  void set_index_position(::google::protobuf::uint64 value);

  // optional uint64 chunk_number = 7 [default = 0];
  bool has_chunk_number() const;
  void clear_chunk_number();
  static const int kChunkNumberFieldNumber = 7;
  ::google::protobuf::uint64 chunk_number() const;
  void set_chunk_number(::google::protobuf::uint64 value);

  // optional uint64 channel_number = 8 [default = 0];
  bool has_channel_number() const;
  void clear_channel_number();
  static const int kChannelNumberFieldNumber = 8;
  ::google::protobuf::uint64 channel_number() const;
  void set_channel_number(::google::protobuf::uint64 value);

  // optional .apollo.cyber.proto.CompressType compress = 3;
  bool has_compress() const;
  void clear_compress();
  static const int kCompressFieldNumber = 3;
  ::apollo::cyber::proto::CompressType compress() const;
  void set_compress(::apollo::cyber::proto::CompressType value);

  // optional bool is_complete = 13 [default = false];
  bool has_is_complete() const;
  void clear_is_complete();
  static const int kIsCompleteFieldNumber = 13;
  bool is_complete() const;
  void set_is_complete(bool value);

  // optional uint64 begin_time = 9 [default = 0];
  bool has_begin_time() const;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 9;
  ::google::protobuf::uint64 begin_time() const;
  void set_begin_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 10 [default = 0];
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 10;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // optional uint64 message_number = 11 [default = 0];
  bool has_message_number() const;
  void clear_message_number();
  static const int kMessageNumberFieldNumber = 11;
  ::google::protobuf::uint64 message_number() const;
  void set_message_number(::google::protobuf::uint64 value);

  // optional uint64 size = 12 [default = 0];
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 12;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // optional uint64 chunk_raw_size = 14;
  bool has_chunk_raw_size() const;
  void clear_chunk_raw_size();
  static const int kChunkRawSizeFieldNumber = 14;
  ::google::protobuf::uint64 chunk_raw_size() const;
  void set_chunk_raw_size(::google::protobuf::uint64 value);

  // optional uint64 segment_raw_size = 15;
  bool has_segment_raw_size() const;
  void clear_segment_raw_size();
  static const int kSegmentRawSizeFieldNumber = 15;
  ::google::protobuf::uint64 segment_raw_size() const;
  void set_segment_raw_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.Header)
 private:
  void set_has_major_version();
  void clear_has_major_version();
  void set_has_minor_version();
  void clear_has_minor_version();
  void set_has_compress();
  void clear_has_compress();
  void set_has_chunk_interval();
  void clear_has_chunk_interval();
  void set_has_segment_interval();
  void clear_has_segment_interval();
  void set_has_index_position();
  void clear_has_index_position();
  void set_has_chunk_number();
  void clear_has_chunk_number();
  void set_has_channel_number();
  void clear_has_channel_number();
  void set_has_begin_time();
  void clear_has_begin_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_message_number();
  void clear_has_message_number();
  void set_has_size();
  void clear_has_size();
  void set_has_is_complete();
  void clear_has_is_complete();
  void set_has_chunk_raw_size();
  void clear_has_chunk_raw_size();
  void set_has_segment_raw_size();
  void clear_has_segment_raw_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 major_version_;
  ::google::protobuf::uint32 minor_version_;
  ::google::protobuf::uint64 chunk_interval_;
  ::google::protobuf::uint64 segment_interval_;
  ::google::protobuf::uint64 index_position_;
  ::google::protobuf::uint64 chunk_number_;
  ::google::protobuf::uint64 channel_number_;
  int compress_;
  bool is_complete_;
  ::google::protobuf::uint64 begin_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint64 message_number_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 chunk_raw_size_;
  ::google::protobuf::uint64 segment_raw_size_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.Channel) */ {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();

  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Channel* other);

  // implements Message ----------------------------------------------

  inline Channel* New() const PROTOBUF_FINAL { return New(NULL); }

  Channel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Channel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string message_type = 2;
  bool has_message_type() const;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  const ::std::string& message_type() const;
  void set_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_message_type(::std::string&& value);
  #endif
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  ::std::string* mutable_message_type();
  ::std::string* release_message_type();
  void set_allocated_message_type(::std::string* message_type);

  // optional bytes proto_desc = 3;
  bool has_proto_desc() const;
  void clear_proto_desc();
  static const int kProtoDescFieldNumber = 3;
  const ::std::string& proto_desc() const;
  void set_proto_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_desc(::std::string&& value);
  #endif
  void set_proto_desc(const char* value);
  void set_proto_desc(const void* value, size_t size);
  ::std::string* mutable_proto_desc();
  ::std::string* release_proto_desc();
  void set_allocated_proto_desc(::std::string* proto_desc);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.Channel)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_message_type();
  void clear_has_message_type();
  void set_has_proto_desc();
  void clear_has_proto_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr message_type_;
  ::google::protobuf::internal::ArenaStringPtr proto_desc_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkHeader) */ {
 public:
  ChunkHeader();
  virtual ~ChunkHeader();

  ChunkHeader(const ChunkHeader& from);

  inline ChunkHeader& operator=(const ChunkHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkHeader& default_instance();

  static inline const ChunkHeader* internal_default_instance() {
    return reinterpret_cast<const ChunkHeader*>(
               &_ChunkHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ChunkHeader* other);

  // implements Message ----------------------------------------------

  inline ChunkHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkHeader& from);
  void MergeFrom(const ChunkHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 begin_time = 1;
  bool has_begin_time() const;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 1;
  ::google::protobuf::uint64 begin_time() const;
  void set_begin_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // optional uint64 message_number = 3;
  bool has_message_number() const;
  void clear_message_number();
  static const int kMessageNumberFieldNumber = 3;
  ::google::protobuf::uint64 message_number() const;
  void set_message_number(::google::protobuf::uint64 value);

  // optional uint64 raw_size = 4;
  bool has_raw_size() const;
  void clear_raw_size();
  static const int kRawSizeFieldNumber = 4;
  ::google::protobuf::uint64 raw_size() const;
  void set_raw_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkHeader)
 private:
  void set_has_begin_time();
  void clear_has_begin_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_message_number();
  void clear_has_message_number();
  void set_has_raw_size();
  void clear_has_raw_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 begin_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint64 message_number_;
  ::google::protobuf::uint64 raw_size_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkBody) */ {
 public:
  ChunkBody();
  virtual ~ChunkBody();

  ChunkBody(const ChunkBody& from);

  inline ChunkBody& operator=(const ChunkBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkBody& default_instance();

  static inline const ChunkBody* internal_default_instance() {
    return reinterpret_cast<const ChunkBody*>(
               &_ChunkBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ChunkBody* other);

  // implements Message ----------------------------------------------

  inline ChunkBody* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkBody& from);
  void MergeFrom(const ChunkBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.cyber.proto.SingleMessage messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::apollo::cyber::proto::SingleMessage& messages(int index) const;
  ::apollo::cyber::proto::SingleMessage* mutable_messages(int index);
  ::apollo::cyber::proto::SingleMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage > messages_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Index* other);

  // implements Message ----------------------------------------------

  inline Index* New() const PROTOBUF_FINAL { return New(NULL); }

  Index* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.cyber.proto.SingleIndex indexes = 1;
  int indexes_size() const;
  void clear_indexes();
  static const int kIndexesFieldNumber = 1;
  const ::apollo::cyber::proto::SingleIndex& indexes(int index) const;
  ::apollo::cyber::proto::SingleIndex* mutable_indexes(int index);
  ::apollo::cyber::proto::SingleIndex* add_indexes();
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >*
      mutable_indexes();
  const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >&
      indexes() const;

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex > indexes_;
  friend struct protobuf_cyber_2fproto_2frecord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleIndex

// optional .apollo.cyber.proto.SectionType type = 1;
inline bool SingleIndex::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleIndex::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleIndex::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleIndex::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::cyber::proto::SectionType SingleIndex::type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.type)
  return static_cast< ::apollo::cyber::proto::SectionType >(type_);
}
inline void SingleIndex::set_type(::apollo::cyber::proto::SectionType value) {
  assert(::apollo::cyber::proto::SectionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleIndex.type)
}

// optional uint64 position = 2;
inline bool SingleIndex::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleIndex::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleIndex::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleIndex::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::uint64 SingleIndex::position() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.position)
  return position_;
}
inline void SingleIndex::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleIndex.position)
}

// optional .apollo.cyber.proto.ChannelCache channel_cache = 101;
inline bool SingleIndex::has_channel_cache() const {
  return cache_case() == kChannelCache;
}
inline void SingleIndex::set_has_channel_cache() {
  _oneof_case_[0] = kChannelCache;
}
inline void SingleIndex::clear_channel_cache() {
  if (has_channel_cache()) {
    delete cache_.channel_cache_;
    clear_has_cache();
  }
}
inline  const ::apollo::cyber::proto::ChannelCache& SingleIndex::channel_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.channel_cache)
  return has_channel_cache()
      ? *cache_.channel_cache_
      : ::apollo::cyber::proto::ChannelCache::default_instance();
}
inline ::apollo::cyber::proto::ChannelCache* SingleIndex::mutable_channel_cache() {
  if (!has_channel_cache()) {
    clear_cache();
    set_has_channel_cache();
    cache_.channel_cache_ = new ::apollo::cyber::proto::ChannelCache;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.channel_cache)
  return cache_.channel_cache_;
}
inline ::apollo::cyber::proto::ChannelCache* SingleIndex::release_channel_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.channel_cache)
  if (has_channel_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChannelCache* temp = cache_.channel_cache_;
    cache_.channel_cache_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SingleIndex::set_allocated_channel_cache(::apollo::cyber::proto::ChannelCache* channel_cache) {
  clear_cache();
  if (channel_cache) {
    set_has_channel_cache();
    cache_.channel_cache_ = channel_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleIndex.channel_cache)
}

// optional .apollo.cyber.proto.ChunkHeaderCache chunk_header_cache = 102;
inline bool SingleIndex::has_chunk_header_cache() const {
  return cache_case() == kChunkHeaderCache;
}
inline void SingleIndex::set_has_chunk_header_cache() {
  _oneof_case_[0] = kChunkHeaderCache;
}
inline void SingleIndex::clear_chunk_header_cache() {
  if (has_chunk_header_cache()) {
    delete cache_.chunk_header_cache_;
    clear_has_cache();
  }
}
inline  const ::apollo::cyber::proto::ChunkHeaderCache& SingleIndex::chunk_header_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  return has_chunk_header_cache()
      ? *cache_.chunk_header_cache_
      : ::apollo::cyber::proto::ChunkHeaderCache::default_instance();
}
inline ::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::mutable_chunk_header_cache() {
  if (!has_chunk_header_cache()) {
    clear_cache();
    set_has_chunk_header_cache();
    cache_.chunk_header_cache_ = new ::apollo::cyber::proto::ChunkHeaderCache;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  return cache_.chunk_header_cache_;
}
inline ::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::release_chunk_header_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  if (has_chunk_header_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChunkHeaderCache* temp = cache_.chunk_header_cache_;
    cache_.chunk_header_cache_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SingleIndex::set_allocated_chunk_header_cache(::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache) {
  clear_cache();
  if (chunk_header_cache) {
    set_has_chunk_header_cache();
    cache_.chunk_header_cache_ = chunk_header_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleIndex.chunk_header_cache)
}

// optional .apollo.cyber.proto.ChunkBodyCache chunk_body_cache = 103;
inline bool SingleIndex::has_chunk_body_cache() const {
  return cache_case() == kChunkBodyCache;
}
inline void SingleIndex::set_has_chunk_body_cache() {
  _oneof_case_[0] = kChunkBodyCache;
}
inline void SingleIndex::clear_chunk_body_cache() {
  if (has_chunk_body_cache()) {
    delete cache_.chunk_body_cache_;
    clear_has_cache();
  }
}
inline  const ::apollo::cyber::proto::ChunkBodyCache& SingleIndex::chunk_body_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  return has_chunk_body_cache()
      ? *cache_.chunk_body_cache_
      : ::apollo::cyber::proto::ChunkBodyCache::default_instance();
}
inline ::apollo::cyber::proto::ChunkBodyCache* SingleIndex::mutable_chunk_body_cache() {
  if (!has_chunk_body_cache()) {
    clear_cache();
    set_has_chunk_body_cache();
    cache_.chunk_body_cache_ = new ::apollo::cyber::proto::ChunkBodyCache;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  return cache_.chunk_body_cache_;
}
inline ::apollo::cyber::proto::ChunkBodyCache* SingleIndex::release_chunk_body_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  if (has_chunk_body_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChunkBodyCache* temp = cache_.chunk_body_cache_;
    cache_.chunk_body_cache_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SingleIndex::set_allocated_chunk_body_cache(::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache) {
  clear_cache();
  if (chunk_body_cache) {
    set_has_chunk_body_cache();
    cache_.chunk_body_cache_ = chunk_body_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleIndex.chunk_body_cache)
}

inline bool SingleIndex::has_cache() const {
  return cache_case() != CACHE_NOT_SET;
}
inline void SingleIndex::clear_has_cache() {
  _oneof_case_[0] = CACHE_NOT_SET;
}
inline SingleIndex::CacheCase SingleIndex::cache_case() const {
  return SingleIndex::CacheCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChunkHeaderCache

// optional uint64 message_number = 1;
inline bool ChunkHeaderCache::has_message_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkHeaderCache::set_has_message_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkHeaderCache::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkHeaderCache::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
inline ::google::protobuf::uint64 ChunkHeaderCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.message_number)
  return message_number_;
}
inline void ChunkHeaderCache::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.message_number)
}

// optional uint64 begin_time = 2;
inline bool ChunkHeaderCache::has_begin_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkHeaderCache::set_has_begin_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkHeaderCache::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkHeaderCache::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::uint64 ChunkHeaderCache::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.begin_time)
  return begin_time_;
}
inline void ChunkHeaderCache::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.begin_time)
}

// optional uint64 end_time = 3;
inline bool ChunkHeaderCache::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkHeaderCache::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkHeaderCache::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkHeaderCache::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 ChunkHeaderCache::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.end_time)
  return end_time_;
}
inline void ChunkHeaderCache::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.end_time)
}

// optional uint64 raw_size = 4;
inline bool ChunkHeaderCache::has_raw_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkHeaderCache::set_has_raw_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkHeaderCache::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkHeaderCache::clear_raw_size() {
  raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_raw_size();
}
inline ::google::protobuf::uint64 ChunkHeaderCache::raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.raw_size)
  return raw_size_;
}
inline void ChunkHeaderCache::set_raw_size(::google::protobuf::uint64 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.raw_size)
}

// -------------------------------------------------------------------

// ChunkBodyCache

// optional uint64 message_number = 1;
inline bool ChunkBodyCache::has_message_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkBodyCache::set_has_message_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkBodyCache::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkBodyCache::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
inline ::google::protobuf::uint64 ChunkBodyCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkBodyCache.message_number)
  return message_number_;
}
inline void ChunkBodyCache::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkBodyCache.message_number)
}

// -------------------------------------------------------------------

// ChannelCache

// optional uint64 message_number = 1;
inline bool ChannelCache::has_message_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelCache::set_has_message_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelCache::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChannelCache::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
inline ::google::protobuf::uint64 ChannelCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.message_number)
  return message_number_;
}
inline void ChannelCache::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.message_number)
}

// optional string name = 2;
inline bool ChannelCache::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelCache::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelCache::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelCache::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChannelCache::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.name)
  return name_.GetNoArena();
}
inline void ChannelCache::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.name)
}
#if LANG_CXX11
inline void ChannelCache::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.name)
}
#endif
inline void ChannelCache::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.name)
}
inline void ChannelCache::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.name)
}
inline ::std::string* ChannelCache::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelCache::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCache::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.name)
}

// optional string message_type = 3;
inline bool ChannelCache::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelCache::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelCache::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelCache::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
inline const ::std::string& ChannelCache::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.message_type)
  return message_type_.GetNoArena();
}
inline void ChannelCache::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.message_type)
}
#if LANG_CXX11
inline void ChannelCache::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.message_type)
}
#endif
inline void ChannelCache::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.message_type)
}
inline void ChannelCache::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.message_type)
}
inline ::std::string* ChannelCache::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelCache::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCache::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.message_type)
}

// optional bytes proto_desc = 4;
inline bool ChannelCache::has_proto_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelCache::set_has_proto_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelCache::clear_has_proto_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelCache::clear_proto_desc() {
  proto_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_desc();
}
inline const ::std::string& ChannelCache::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.proto_desc)
  return proto_desc_.GetNoArena();
}
inline void ChannelCache::set_proto_desc(const ::std::string& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.proto_desc)
}
#if LANG_CXX11
inline void ChannelCache::set_proto_desc(::std::string&& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.proto_desc)
}
#endif
inline void ChannelCache::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.proto_desc)
}
inline void ChannelCache::set_proto_desc(const void* value, size_t size) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.proto_desc)
}
inline ::std::string* ChannelCache::mutable_proto_desc() {
  set_has_proto_desc();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.proto_desc)
  return proto_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelCache::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.proto_desc)
  clear_has_proto_desc();
  return proto_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCache::set_allocated_proto_desc(::std::string* proto_desc) {
  if (proto_desc != NULL) {
    set_has_proto_desc();
  } else {
    clear_has_proto_desc();
  }
  proto_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.proto_desc)
}

// -------------------------------------------------------------------

// SingleMessage

// optional string channel_name = 1;
inline bool SingleMessage::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleMessage::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleMessage::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleMessage::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
inline const ::std::string& SingleMessage::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.channel_name)
  return channel_name_.GetNoArena();
}
inline void SingleMessage::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.channel_name)
}
#if LANG_CXX11
inline void SingleMessage::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SingleMessage.channel_name)
}
#endif
inline void SingleMessage::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SingleMessage.channel_name)
}
inline void SingleMessage::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SingleMessage.channel_name)
}
inline ::std::string* SingleMessage::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleMessage.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleMessage::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleMessage.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleMessage::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleMessage.channel_name)
}

// optional uint64 time = 2;
inline bool SingleMessage::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleMessage::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SingleMessage::time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.time)
  return time_;
}
inline void SingleMessage::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.time)
}

// optional bytes content = 3;
inline bool SingleMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& SingleMessage::content() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.content)
  return content_.GetNoArena();
}
inline void SingleMessage::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.content)
}
#if LANG_CXX11
inline void SingleMessage::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SingleMessage.content)
}
#endif
inline void SingleMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SingleMessage.content)
}
inline void SingleMessage::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SingleMessage.content)
}
inline ::std::string* SingleMessage::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleMessage::release_content() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleMessage.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleMessage.content)
}

// -------------------------------------------------------------------

// Header

// optional uint32 major_version = 1;
inline bool Header::has_major_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_major_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_major_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_major_version() {
  major_version_ = 0u;
  clear_has_major_version();
}
inline ::google::protobuf::uint32 Header::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.major_version)
  return major_version_;
}
inline void Header::set_major_version(::google::protobuf::uint32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.major_version)
}

// optional uint32 minor_version = 2;
inline bool Header::has_minor_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_minor_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_minor_version() {
  minor_version_ = 0u;
  clear_has_minor_version();
}
inline ::google::protobuf::uint32 Header::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.minor_version)
  return minor_version_;
}
inline void Header::set_minor_version(::google::protobuf::uint32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.minor_version)
}

// optional .apollo.cyber.proto.CompressType compress = 3;
inline bool Header::has_compress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Header::set_has_compress() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Header::clear_has_compress() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Header::clear_compress() {
  compress_ = 0;
  clear_has_compress();
}
inline ::apollo::cyber::proto::CompressType Header::compress() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.compress)
  return static_cast< ::apollo::cyber::proto::CompressType >(compress_);
}
inline void Header::set_compress(::apollo::cyber::proto::CompressType value) {
  assert(::apollo::cyber::proto::CompressType_IsValid(value));
  set_has_compress();
  compress_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.compress)
}

// optional uint64 chunk_interval = 4;
inline bool Header::has_chunk_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_chunk_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_chunk_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_chunk_interval() {
  chunk_interval_ = GOOGLE_ULONGLONG(0);
  clear_has_chunk_interval();
}
inline ::google::protobuf::uint64 Header::chunk_interval() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_interval)
  return chunk_interval_;
}
inline void Header::set_chunk_interval(::google::protobuf::uint64 value) {
  set_has_chunk_interval();
  chunk_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_interval)
}

// optional uint64 segment_interval = 5;
inline bool Header::has_segment_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_segment_interval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_segment_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_segment_interval() {
  segment_interval_ = GOOGLE_ULONGLONG(0);
  clear_has_segment_interval();
}
inline ::google::protobuf::uint64 Header::segment_interval() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.segment_interval)
  return segment_interval_;
}
inline void Header::set_segment_interval(::google::protobuf::uint64 value) {
  set_has_segment_interval();
  segment_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.segment_interval)
}

// optional uint64 index_position = 6 [default = 0];
inline bool Header::has_index_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_index_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_index_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_index_position() {
  index_position_ = GOOGLE_ULONGLONG(0);
  clear_has_index_position();
}
inline ::google::protobuf::uint64 Header::index_position() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.index_position)
  return index_position_;
}
inline void Header::set_index_position(::google::protobuf::uint64 value) {
  set_has_index_position();
  index_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.index_position)
}

// optional uint64 chunk_number = 7 [default = 0];
inline bool Header::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Header::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Header::clear_chunk_number() {
  chunk_number_ = GOOGLE_ULONGLONG(0);
  clear_has_chunk_number();
}
inline ::google::protobuf::uint64 Header::chunk_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_number)
  return chunk_number_;
}
inline void Header::set_chunk_number(::google::protobuf::uint64 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_number)
}

// optional uint64 channel_number = 8 [default = 0];
inline bool Header::has_channel_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Header::set_has_channel_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Header::clear_has_channel_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Header::clear_channel_number() {
  channel_number_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_number();
}
inline ::google::protobuf::uint64 Header::channel_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.channel_number)
  return channel_number_;
}
inline void Header::set_channel_number(::google::protobuf::uint64 value) {
  set_has_channel_number();
  channel_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.channel_number)
}

// optional uint64 begin_time = 9 [default = 0];
inline bool Header::has_begin_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Header::set_has_begin_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Header::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Header::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::uint64 Header::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.begin_time)
  return begin_time_;
}
inline void Header::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.begin_time)
}

// optional uint64 end_time = 10 [default = 0];
inline bool Header::has_end_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Header::set_has_end_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Header::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Header::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 Header::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.end_time)
  return end_time_;
}
inline void Header::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.end_time)
}

// optional uint64 message_number = 11 [default = 0];
inline bool Header::has_message_number() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Header::set_has_message_number() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Header::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Header::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
inline ::google::protobuf::uint64 Header::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.message_number)
  return message_number_;
}
inline void Header::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.message_number)
}

// optional uint64 size = 12 [default = 0];
inline bool Header::has_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Header::set_has_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Header::clear_has_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Header::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 Header::size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.size)
  return size_;
}
inline void Header::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.size)
}

// optional bool is_complete = 13 [default = false];
inline bool Header::has_is_complete() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Header::set_has_is_complete() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Header::clear_has_is_complete() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Header::clear_is_complete() {
  is_complete_ = false;
  clear_has_is_complete();
}
inline bool Header::is_complete() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.is_complete)
  return is_complete_;
}
inline void Header::set_is_complete(bool value) {
  set_has_is_complete();
  is_complete_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.is_complete)
}

// optional uint64 chunk_raw_size = 14;
inline bool Header::has_chunk_raw_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Header::set_has_chunk_raw_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Header::clear_has_chunk_raw_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Header::clear_chunk_raw_size() {
  chunk_raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_chunk_raw_size();
}
inline ::google::protobuf::uint64 Header::chunk_raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_raw_size)
  return chunk_raw_size_;
}
inline void Header::set_chunk_raw_size(::google::protobuf::uint64 value) {
  set_has_chunk_raw_size();
  chunk_raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_raw_size)
}

// optional uint64 segment_raw_size = 15;
inline bool Header::has_segment_raw_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Header::set_has_segment_raw_size() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Header::clear_has_segment_raw_size() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Header::clear_segment_raw_size() {
  segment_raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_segment_raw_size();
}
inline ::google::protobuf::uint64 Header::segment_raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.segment_raw_size)
  return segment_raw_size_;
}
inline void Header::set_segment_raw_size(::google::protobuf::uint64 value) {
  set_has_segment_raw_size();
  segment_raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.segment_raw_size)
}

// -------------------------------------------------------------------

// Channel

// optional string name = 1;
inline bool Channel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Channel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Channel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.name)
  return name_.GetNoArena();
}
inline void Channel::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.name)
}
#if LANG_CXX11
inline void Channel::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.name)
}
#endif
inline void Channel::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.name)
}
inline void Channel::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.name)
}
inline ::std::string* Channel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.name)
}

// optional string message_type = 2;
inline bool Channel::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Channel::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Channel::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Channel::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
inline const ::std::string& Channel::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.message_type)
  return message_type_.GetNoArena();
}
inline void Channel::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.message_type)
}
#if LANG_CXX11
inline void Channel::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.message_type)
}
#endif
inline void Channel::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.message_type)
}
inline void Channel::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.message_type)
}
inline ::std::string* Channel::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Channel::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.message_type)
}

// optional bytes proto_desc = 3;
inline bool Channel::has_proto_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Channel::set_has_proto_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Channel::clear_has_proto_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Channel::clear_proto_desc() {
  proto_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_desc();
}
inline const ::std::string& Channel::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.proto_desc)
  return proto_desc_.GetNoArena();
}
inline void Channel::set_proto_desc(const ::std::string& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.proto_desc)
}
#if LANG_CXX11
inline void Channel::set_proto_desc(::std::string&& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.proto_desc)
}
#endif
inline void Channel::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.proto_desc)
}
inline void Channel::set_proto_desc(const void* value, size_t size) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.proto_desc)
}
inline ::std::string* Channel::mutable_proto_desc() {
  set_has_proto_desc();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.proto_desc)
  return proto_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Channel::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.proto_desc)
  clear_has_proto_desc();
  return proto_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_proto_desc(::std::string* proto_desc) {
  if (proto_desc != NULL) {
    set_has_proto_desc();
  } else {
    clear_has_proto_desc();
  }
  proto_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.proto_desc)
}

// -------------------------------------------------------------------

// ChunkHeader

// optional uint64 begin_time = 1;
inline bool ChunkHeader::has_begin_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkHeader::set_has_begin_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkHeader::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkHeader::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::uint64 ChunkHeader::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.begin_time)
  return begin_time_;
}
inline void ChunkHeader::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.begin_time)
}

// optional uint64 end_time = 2;
inline bool ChunkHeader::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkHeader::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkHeader::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkHeader::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 ChunkHeader::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.end_time)
  return end_time_;
}
inline void ChunkHeader::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.end_time)
}

// optional uint64 message_number = 3;
inline bool ChunkHeader::has_message_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkHeader::set_has_message_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkHeader::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkHeader::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
inline ::google::protobuf::uint64 ChunkHeader::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.message_number)
  return message_number_;
}
inline void ChunkHeader::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.message_number)
}

// optional uint64 raw_size = 4;
inline bool ChunkHeader::has_raw_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkHeader::set_has_raw_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkHeader::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkHeader::clear_raw_size() {
  raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_raw_size();
}
inline ::google::protobuf::uint64 ChunkHeader::raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.raw_size)
  return raw_size_;
}
inline void ChunkHeader::set_raw_size(::google::protobuf::uint64 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.raw_size)
}

// -------------------------------------------------------------------

// ChunkBody

// repeated .apollo.cyber.proto.SingleMessage messages = 1;
inline int ChunkBody::messages_size() const {
  return messages_.size();
}
inline void ChunkBody::clear_messages() {
  messages_.Clear();
}
inline const ::apollo::cyber::proto::SingleMessage& ChunkBody::messages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkBody.messages)
  return messages_.Get(index);
}
inline ::apollo::cyber::proto::SingleMessage* ChunkBody::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChunkBody.messages)
  return messages_.Mutable(index);
}
inline ::apollo::cyber::proto::SingleMessage* ChunkBody::add_messages() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ChunkBody.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >*
ChunkBody::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ChunkBody.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >&
ChunkBody::messages() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ChunkBody.messages)
  return messages_;
}

// -------------------------------------------------------------------

// Index

// repeated .apollo.cyber.proto.SingleIndex indexes = 1;
inline int Index::indexes_size() const {
  return indexes_.size();
}
inline void Index::clear_indexes() {
  indexes_.Clear();
}
inline const ::apollo::cyber::proto::SingleIndex& Index::indexes(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Index.indexes)
  return indexes_.Get(index);
}
inline ::apollo::cyber::proto::SingleIndex* Index::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Index.indexes)
  return indexes_.Mutable(index);
}
inline ::apollo::cyber::proto::SingleIndex* Index::add_indexes() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.Index.indexes)
  return indexes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >*
Index::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.Index.indexes)
  return &indexes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >&
Index::indexes() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.Index.indexes)
  return indexes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace cyber
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::cyber::proto::SectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::cyber::proto::SectionType>() {
  return ::apollo::cyber::proto::SectionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::cyber::proto::CompressType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::cyber::proto::CompressType>() {
  return ::apollo::cyber::proto::CompressType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cyber_2fproto_2frecord_2eproto__INCLUDED
