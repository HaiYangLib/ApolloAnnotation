// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/choreography_conf.proto

#ifndef PROTOBUF_cyber_2fproto_2fchoreography_5fconf_2eproto__INCLUDED
#define PROTOBUF_cyber_2fproto_2fchoreography_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace apollo {
namespace cyber {
namespace proto {
class ChoreographyConf;
class ChoreographyConfDefaultTypeInternal;
extern ChoreographyConfDefaultTypeInternal _ChoreographyConf_default_instance_;
class ChoreographyTask;
class ChoreographyTaskDefaultTypeInternal;
extern ChoreographyTaskDefaultTypeInternal _ChoreographyTask_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo

namespace apollo {
namespace cyber {
namespace proto {

namespace protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto

// ===================================================================

class ChoreographyTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChoreographyTask) */ {
 public:
  ChoreographyTask();
  virtual ~ChoreographyTask();

  ChoreographyTask(const ChoreographyTask& from);

  inline ChoreographyTask& operator=(const ChoreographyTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChoreographyTask& default_instance();

  static inline const ChoreographyTask* internal_default_instance() {
    return reinterpret_cast<const ChoreographyTask*>(
               &_ChoreographyTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChoreographyTask* other);

  // implements Message ----------------------------------------------

  inline ChoreographyTask* New() const PROTOBUF_FINAL { return New(NULL); }

  ChoreographyTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChoreographyTask& from);
  void MergeFrom(const ChoreographyTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChoreographyTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 processor = 2;
  bool has_processor() const;
  void clear_processor();
  static const int kProcessorFieldNumber = 2;
  ::google::protobuf::int32 processor() const;
  void set_processor(::google::protobuf::int32 value);

  // optional uint32 prio = 3 [default = 1];
  bool has_prio() const;
  void clear_prio();
  static const int kPrioFieldNumber = 3;
  ::google::protobuf::uint32 prio() const;
  void set_prio(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChoreographyTask)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_processor();
  void clear_has_processor();
  void set_has_prio();
  void clear_has_prio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 processor_;
  ::google::protobuf::uint32 prio_;
  friend struct protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChoreographyConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChoreographyConf) */ {
 public:
  ChoreographyConf();
  virtual ~ChoreographyConf();

  ChoreographyConf(const ChoreographyConf& from);

  inline ChoreographyConf& operator=(const ChoreographyConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChoreographyConf& default_instance();

  static inline const ChoreographyConf* internal_default_instance() {
    return reinterpret_cast<const ChoreographyConf*>(
               &_ChoreographyConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChoreographyConf* other);

  // implements Message ----------------------------------------------

  inline ChoreographyConf* New() const PROTOBUF_FINAL { return New(NULL); }

  ChoreographyConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChoreographyConf& from);
  void MergeFrom(const ChoreographyConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChoreographyConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 11;
  const ::apollo::cyber::proto::ChoreographyTask& tasks(int index) const;
  ::apollo::cyber::proto::ChoreographyTask* mutable_tasks(int index);
  ::apollo::cyber::proto::ChoreographyTask* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >&
      tasks() const;

  // optional string choreography_affinity = 2;
  bool has_choreography_affinity() const;
  void clear_choreography_affinity();
  static const int kChoreographyAffinityFieldNumber = 2;
  const ::std::string& choreography_affinity() const;
  void set_choreography_affinity(const ::std::string& value);
  #if LANG_CXX11
  void set_choreography_affinity(::std::string&& value);
  #endif
  void set_choreography_affinity(const char* value);
  void set_choreography_affinity(const char* value, size_t size);
  ::std::string* mutable_choreography_affinity();
  ::std::string* release_choreography_affinity();
  void set_allocated_choreography_affinity(::std::string* choreography_affinity);

  // optional string choreography_processor_policy = 3;
  bool has_choreography_processor_policy() const;
  void clear_choreography_processor_policy();
  static const int kChoreographyProcessorPolicyFieldNumber = 3;
  const ::std::string& choreography_processor_policy() const;
  void set_choreography_processor_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_choreography_processor_policy(::std::string&& value);
  #endif
  void set_choreography_processor_policy(const char* value);
  void set_choreography_processor_policy(const char* value, size_t size);
  ::std::string* mutable_choreography_processor_policy();
  ::std::string* release_choreography_processor_policy();
  void set_allocated_choreography_processor_policy(::std::string* choreography_processor_policy);

  // optional string choreography_cpuset = 5;
  bool has_choreography_cpuset() const;
  void clear_choreography_cpuset();
  static const int kChoreographyCpusetFieldNumber = 5;
  const ::std::string& choreography_cpuset() const;
  void set_choreography_cpuset(const ::std::string& value);
  #if LANG_CXX11
  void set_choreography_cpuset(::std::string&& value);
  #endif
  void set_choreography_cpuset(const char* value);
  void set_choreography_cpuset(const char* value, size_t size);
  ::std::string* mutable_choreography_cpuset();
  ::std::string* release_choreography_cpuset();
  void set_allocated_choreography_cpuset(::std::string* choreography_cpuset);

  // optional string pool_affinity = 7;
  bool has_pool_affinity() const;
  void clear_pool_affinity();
  static const int kPoolAffinityFieldNumber = 7;
  const ::std::string& pool_affinity() const;
  void set_pool_affinity(const ::std::string& value);
  #if LANG_CXX11
  void set_pool_affinity(::std::string&& value);
  #endif
  void set_pool_affinity(const char* value);
  void set_pool_affinity(const char* value, size_t size);
  ::std::string* mutable_pool_affinity();
  ::std::string* release_pool_affinity();
  void set_allocated_pool_affinity(::std::string* pool_affinity);

  // optional string pool_processor_policy = 8;
  bool has_pool_processor_policy() const;
  void clear_pool_processor_policy();
  static const int kPoolProcessorPolicyFieldNumber = 8;
  const ::std::string& pool_processor_policy() const;
  void set_pool_processor_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_pool_processor_policy(::std::string&& value);
  #endif
  void set_pool_processor_policy(const char* value);
  void set_pool_processor_policy(const char* value, size_t size);
  ::std::string* mutable_pool_processor_policy();
  ::std::string* release_pool_processor_policy();
  void set_allocated_pool_processor_policy(::std::string* pool_processor_policy);

  // optional string pool_cpuset = 10;
  bool has_pool_cpuset() const;
  void clear_pool_cpuset();
  static const int kPoolCpusetFieldNumber = 10;
  const ::std::string& pool_cpuset() const;
  void set_pool_cpuset(const ::std::string& value);
  #if LANG_CXX11
  void set_pool_cpuset(::std::string&& value);
  #endif
  void set_pool_cpuset(const char* value);
  void set_pool_cpuset(const char* value, size_t size);
  ::std::string* mutable_pool_cpuset();
  ::std::string* release_pool_cpuset();
  void set_allocated_pool_cpuset(::std::string* pool_cpuset);

  // optional uint32 choreography_processor_num = 1;
  bool has_choreography_processor_num() const;
  void clear_choreography_processor_num();
  static const int kChoreographyProcessorNumFieldNumber = 1;
  ::google::protobuf::uint32 choreography_processor_num() const;
  void set_choreography_processor_num(::google::protobuf::uint32 value);

  // optional int32 choreography_processor_prio = 4;
  bool has_choreography_processor_prio() const;
  void clear_choreography_processor_prio();
  static const int kChoreographyProcessorPrioFieldNumber = 4;
  ::google::protobuf::int32 choreography_processor_prio() const;
  void set_choreography_processor_prio(::google::protobuf::int32 value);

  // optional uint32 pool_processor_num = 6;
  bool has_pool_processor_num() const;
  void clear_pool_processor_num();
  static const int kPoolProcessorNumFieldNumber = 6;
  ::google::protobuf::uint32 pool_processor_num() const;
  void set_pool_processor_num(::google::protobuf::uint32 value);

  // optional int32 pool_processor_prio = 9;
  bool has_pool_processor_prio() const;
  void clear_pool_processor_prio();
  static const int kPoolProcessorPrioFieldNumber = 9;
  ::google::protobuf::int32 pool_processor_prio() const;
  void set_pool_processor_prio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChoreographyConf)
 private:
  void set_has_choreography_processor_num();
  void clear_has_choreography_processor_num();
  void set_has_choreography_affinity();
  void clear_has_choreography_affinity();
  void set_has_choreography_processor_policy();
  void clear_has_choreography_processor_policy();
  void set_has_choreography_processor_prio();
  void clear_has_choreography_processor_prio();
  void set_has_choreography_cpuset();
  void clear_has_choreography_cpuset();
  void set_has_pool_processor_num();
  void clear_has_pool_processor_num();
  void set_has_pool_affinity();
  void clear_has_pool_affinity();
  void set_has_pool_processor_policy();
  void clear_has_pool_processor_policy();
  void set_has_pool_processor_prio();
  void clear_has_pool_processor_prio();
  void set_has_pool_cpuset();
  void clear_has_pool_cpuset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask > tasks_;
  ::google::protobuf::internal::ArenaStringPtr choreography_affinity_;
  ::google::protobuf::internal::ArenaStringPtr choreography_processor_policy_;
  ::google::protobuf::internal::ArenaStringPtr choreography_cpuset_;
  ::google::protobuf::internal::ArenaStringPtr pool_affinity_;
  ::google::protobuf::internal::ArenaStringPtr pool_processor_policy_;
  ::google::protobuf::internal::ArenaStringPtr pool_cpuset_;
  ::google::protobuf::uint32 choreography_processor_num_;
  ::google::protobuf::int32 choreography_processor_prio_;
  ::google::protobuf::uint32 pool_processor_num_;
  ::google::protobuf::int32 pool_processor_prio_;
  friend struct protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChoreographyTask

// optional string name = 1;
inline bool ChoreographyTask::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChoreographyTask::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChoreographyTask::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChoreographyTask::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChoreographyTask::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.name)
  return name_.GetNoArena();
}
inline void ChoreographyTask::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.name)
}
#if LANG_CXX11
inline void ChoreographyTask::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyTask.name)
}
#endif
inline void ChoreographyTask::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyTask.name)
}
inline void ChoreographyTask::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyTask.name)
}
inline ::std::string* ChoreographyTask::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyTask.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChoreographyTask::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyTask.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChoreographyTask::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyTask.name)
}

// optional int32 processor = 2;
inline bool ChoreographyTask::has_processor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChoreographyTask::set_has_processor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChoreographyTask::clear_has_processor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChoreographyTask::clear_processor() {
  processor_ = 0;
  clear_has_processor();
}
inline ::google::protobuf::int32 ChoreographyTask::processor() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.processor)
  return processor_;
}
inline void ChoreographyTask::set_processor(::google::protobuf::int32 value) {
  set_has_processor();
  processor_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.processor)
}

// optional uint32 prio = 3 [default = 1];
inline bool ChoreographyTask::has_prio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChoreographyTask::set_has_prio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChoreographyTask::clear_has_prio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChoreographyTask::clear_prio() {
  prio_ = 1u;
  clear_has_prio();
}
inline ::google::protobuf::uint32 ChoreographyTask::prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.prio)
  return prio_;
}
inline void ChoreographyTask::set_prio(::google::protobuf::uint32 value) {
  set_has_prio();
  prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.prio)
}

// -------------------------------------------------------------------

// ChoreographyConf

// optional uint32 choreography_processor_num = 1;
inline bool ChoreographyConf::has_choreography_processor_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChoreographyConf::set_has_choreography_processor_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChoreographyConf::clear_has_choreography_processor_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChoreographyConf::clear_choreography_processor_num() {
  choreography_processor_num_ = 0u;
  clear_has_choreography_processor_num();
}
inline ::google::protobuf::uint32 ChoreographyConf::choreography_processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_num)
  return choreography_processor_num_;
}
inline void ChoreographyConf::set_choreography_processor_num(::google::protobuf::uint32 value) {
  set_has_choreography_processor_num();
  choreography_processor_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_num)
}

// optional string choreography_affinity = 2;
inline bool ChoreographyConf::has_choreography_affinity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChoreographyConf::set_has_choreography_affinity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChoreographyConf::clear_has_choreography_affinity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChoreographyConf::clear_choreography_affinity() {
  choreography_affinity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_choreography_affinity();
}
inline const ::std::string& ChoreographyConf::choreography_affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  return choreography_affinity_.GetNoArena();
}
inline void ChoreographyConf::set_choreography_affinity(const ::std::string& value) {
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
#if LANG_CXX11
inline void ChoreographyConf::set_choreography_affinity(::std::string&& value) {
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
#endif
inline void ChoreographyConf::set_choreography_affinity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
inline void ChoreographyConf::set_choreography_affinity(const char* value, size_t size) {
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
inline ::std::string* ChoreographyConf::mutable_choreography_affinity() {
  set_has_choreography_affinity();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  return choreography_affinity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChoreographyConf::release_choreography_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  clear_has_choreography_affinity();
  return choreography_affinity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChoreographyConf::set_allocated_choreography_affinity(::std::string* choreography_affinity) {
  if (choreography_affinity != NULL) {
    set_has_choreography_affinity();
  } else {
    clear_has_choreography_affinity();
  }
  choreography_affinity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choreography_affinity);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}

// optional string choreography_processor_policy = 3;
inline bool ChoreographyConf::has_choreography_processor_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChoreographyConf::set_has_choreography_processor_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChoreographyConf::clear_has_choreography_processor_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChoreographyConf::clear_choreography_processor_policy() {
  choreography_processor_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_choreography_processor_policy();
}
inline const ::std::string& ChoreographyConf::choreography_processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  return choreography_processor_policy_.GetNoArena();
}
inline void ChoreographyConf::set_choreography_processor_policy(const ::std::string& value) {
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
#if LANG_CXX11
inline void ChoreographyConf::set_choreography_processor_policy(::std::string&& value) {
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
#endif
inline void ChoreographyConf::set_choreography_processor_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
inline void ChoreographyConf::set_choreography_processor_policy(const char* value, size_t size) {
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
inline ::std::string* ChoreographyConf::mutable_choreography_processor_policy() {
  set_has_choreography_processor_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  return choreography_processor_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChoreographyConf::release_choreography_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  clear_has_choreography_processor_policy();
  return choreography_processor_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChoreographyConf::set_allocated_choreography_processor_policy(::std::string* choreography_processor_policy) {
  if (choreography_processor_policy != NULL) {
    set_has_choreography_processor_policy();
  } else {
    clear_has_choreography_processor_policy();
  }
  choreography_processor_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choreography_processor_policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}

// optional int32 choreography_processor_prio = 4;
inline bool ChoreographyConf::has_choreography_processor_prio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChoreographyConf::set_has_choreography_processor_prio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChoreographyConf::clear_has_choreography_processor_prio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChoreographyConf::clear_choreography_processor_prio() {
  choreography_processor_prio_ = 0;
  clear_has_choreography_processor_prio();
}
inline ::google::protobuf::int32 ChoreographyConf::choreography_processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_prio)
  return choreography_processor_prio_;
}
inline void ChoreographyConf::set_choreography_processor_prio(::google::protobuf::int32 value) {
  set_has_choreography_processor_prio();
  choreography_processor_prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_prio)
}

// optional string choreography_cpuset = 5;
inline bool ChoreographyConf::has_choreography_cpuset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChoreographyConf::set_has_choreography_cpuset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChoreographyConf::clear_has_choreography_cpuset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChoreographyConf::clear_choreography_cpuset() {
  choreography_cpuset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_choreography_cpuset();
}
inline const ::std::string& ChoreographyConf::choreography_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  return choreography_cpuset_.GetNoArena();
}
inline void ChoreographyConf::set_choreography_cpuset(const ::std::string& value) {
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
#if LANG_CXX11
inline void ChoreographyConf::set_choreography_cpuset(::std::string&& value) {
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
#endif
inline void ChoreographyConf::set_choreography_cpuset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
inline void ChoreographyConf::set_choreography_cpuset(const char* value, size_t size) {
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
inline ::std::string* ChoreographyConf::mutable_choreography_cpuset() {
  set_has_choreography_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  return choreography_cpuset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChoreographyConf::release_choreography_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  clear_has_choreography_cpuset();
  return choreography_cpuset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChoreographyConf::set_allocated_choreography_cpuset(::std::string* choreography_cpuset) {
  if (choreography_cpuset != NULL) {
    set_has_choreography_cpuset();
  } else {
    clear_has_choreography_cpuset();
  }
  choreography_cpuset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choreography_cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}

// optional uint32 pool_processor_num = 6;
inline bool ChoreographyConf::has_pool_processor_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChoreographyConf::set_has_pool_processor_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChoreographyConf::clear_has_pool_processor_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChoreographyConf::clear_pool_processor_num() {
  pool_processor_num_ = 0u;
  clear_has_pool_processor_num();
}
inline ::google::protobuf::uint32 ChoreographyConf::pool_processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_num)
  return pool_processor_num_;
}
inline void ChoreographyConf::set_pool_processor_num(::google::protobuf::uint32 value) {
  set_has_pool_processor_num();
  pool_processor_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_num)
}

// optional string pool_affinity = 7;
inline bool ChoreographyConf::has_pool_affinity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChoreographyConf::set_has_pool_affinity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChoreographyConf::clear_has_pool_affinity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChoreographyConf::clear_pool_affinity() {
  pool_affinity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool_affinity();
}
inline const ::std::string& ChoreographyConf::pool_affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  return pool_affinity_.GetNoArena();
}
inline void ChoreographyConf::set_pool_affinity(const ::std::string& value) {
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
#if LANG_CXX11
inline void ChoreographyConf::set_pool_affinity(::std::string&& value) {
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
#endif
inline void ChoreographyConf::set_pool_affinity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
inline void ChoreographyConf::set_pool_affinity(const char* value, size_t size) {
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
inline ::std::string* ChoreographyConf::mutable_pool_affinity() {
  set_has_pool_affinity();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  return pool_affinity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChoreographyConf::release_pool_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  clear_has_pool_affinity();
  return pool_affinity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChoreographyConf::set_allocated_pool_affinity(::std::string* pool_affinity) {
  if (pool_affinity != NULL) {
    set_has_pool_affinity();
  } else {
    clear_has_pool_affinity();
  }
  pool_affinity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_affinity);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}

// optional string pool_processor_policy = 8;
inline bool ChoreographyConf::has_pool_processor_policy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChoreographyConf::set_has_pool_processor_policy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChoreographyConf::clear_has_pool_processor_policy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChoreographyConf::clear_pool_processor_policy() {
  pool_processor_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool_processor_policy();
}
inline const ::std::string& ChoreographyConf::pool_processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  return pool_processor_policy_.GetNoArena();
}
inline void ChoreographyConf::set_pool_processor_policy(const ::std::string& value) {
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
#if LANG_CXX11
inline void ChoreographyConf::set_pool_processor_policy(::std::string&& value) {
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
#endif
inline void ChoreographyConf::set_pool_processor_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
inline void ChoreographyConf::set_pool_processor_policy(const char* value, size_t size) {
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
inline ::std::string* ChoreographyConf::mutable_pool_processor_policy() {
  set_has_pool_processor_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  return pool_processor_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChoreographyConf::release_pool_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  clear_has_pool_processor_policy();
  return pool_processor_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChoreographyConf::set_allocated_pool_processor_policy(::std::string* pool_processor_policy) {
  if (pool_processor_policy != NULL) {
    set_has_pool_processor_policy();
  } else {
    clear_has_pool_processor_policy();
  }
  pool_processor_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_processor_policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}

// optional int32 pool_processor_prio = 9;
inline bool ChoreographyConf::has_pool_processor_prio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChoreographyConf::set_has_pool_processor_prio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChoreographyConf::clear_has_pool_processor_prio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChoreographyConf::clear_pool_processor_prio() {
  pool_processor_prio_ = 0;
  clear_has_pool_processor_prio();
}
inline ::google::protobuf::int32 ChoreographyConf::pool_processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_prio)
  return pool_processor_prio_;
}
inline void ChoreographyConf::set_pool_processor_prio(::google::protobuf::int32 value) {
  set_has_pool_processor_prio();
  pool_processor_prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_prio)
}

// optional string pool_cpuset = 10;
inline bool ChoreographyConf::has_pool_cpuset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChoreographyConf::set_has_pool_cpuset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChoreographyConf::clear_has_pool_cpuset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChoreographyConf::clear_pool_cpuset() {
  pool_cpuset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool_cpuset();
}
inline const ::std::string& ChoreographyConf::pool_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  return pool_cpuset_.GetNoArena();
}
inline void ChoreographyConf::set_pool_cpuset(const ::std::string& value) {
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
#if LANG_CXX11
inline void ChoreographyConf::set_pool_cpuset(::std::string&& value) {
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
#endif
inline void ChoreographyConf::set_pool_cpuset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
inline void ChoreographyConf::set_pool_cpuset(const char* value, size_t size) {
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
inline ::std::string* ChoreographyConf::mutable_pool_cpuset() {
  set_has_pool_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  return pool_cpuset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChoreographyConf::release_pool_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  clear_has_pool_cpuset();
  return pool_cpuset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChoreographyConf::set_allocated_pool_cpuset(::std::string* pool_cpuset) {
  if (pool_cpuset != NULL) {
    set_has_pool_cpuset();
  } else {
    clear_has_pool_cpuset();
  }
  pool_cpuset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}

// repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
inline int ChoreographyConf::tasks_size() const {
  return tasks_.size();
}
inline void ChoreographyConf::clear_tasks() {
  tasks_.Clear();
}
inline const ::apollo::cyber::proto::ChoreographyTask& ChoreographyConf::tasks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_.Get(index);
}
inline ::apollo::cyber::proto::ChoreographyTask* ChoreographyConf::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_.Mutable(index);
}
inline ::apollo::cyber::proto::ChoreographyTask* ChoreographyConf::add_tasks() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >*
ChoreographyConf::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ChoreographyConf.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >&
ChoreographyConf::tasks() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cyber_2fproto_2fchoreography_5fconf_2eproto__INCLUDED
