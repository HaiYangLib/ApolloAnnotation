// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/transport_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cyber/proto/transport_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace cyber {
namespace proto {
class ShmMulticastLocatorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShmMulticastLocator> {
} _ShmMulticastLocator_default_instance_;
class ShmConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShmConf> {
} _ShmConf_default_instance_;
class RtpsParticipantAttrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RtpsParticipantAttr> {
} _RtpsParticipantAttr_default_instance_;
class CommunicationModeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommunicationMode> {
} _CommunicationMode_default_instance_;
class ResourceLimitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResourceLimit> {
} _ResourceLimit_default_instance_;
class TransportConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransportConf> {
} _TransportConf_default_instance_;

namespace protobuf_cyber_2fproto_2ftransport_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmMulticastLocator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmMulticastLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmMulticastLocator, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmMulticastLocator, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmConf, notifier_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShmConf, shm_locator_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpsParticipantAttr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpsParticipantAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpsParticipantAttr, lease_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpsParticipantAttr, announcement_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpsParticipantAttr, domain_id_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtpsParticipantAttr, port_base_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationMode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationMode, same_proc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationMode, diff_proc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunicationMode, diff_host_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceLimit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceLimit, max_history_depth_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportConf, shm_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportConf, participant_attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportConf, communication_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportConf, resource_limit_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(ShmMulticastLocator)},
  { 9, 16, sizeof(ShmConf)},
  { 18, 27, sizeof(RtpsParticipantAttr)},
  { 31, 39, sizeof(CommunicationMode)},
  { 42, 48, sizeof(ResourceLimit)},
  { 49, 58, sizeof(TransportConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShmMulticastLocator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShmConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RtpsParticipantAttr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommunicationMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResourceLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cyber/proto/transport_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _ShmMulticastLocator_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ShmConf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RtpsParticipantAttr_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CommunicationMode_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ResourceLimit_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TransportConf_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ShmMulticastLocator_default_instance_.DefaultConstruct();
  _ShmConf_default_instance_.DefaultConstruct();
  _RtpsParticipantAttr_default_instance_.DefaultConstruct();
  _CommunicationMode_default_instance_.DefaultConstruct();
  _ResourceLimit_default_instance_.DefaultConstruct();
  _TransportConf_default_instance_.DefaultConstruct();
  _ShmConf_default_instance_.get_mutable()->shm_locator_ = const_cast< ::apollo::cyber::proto::ShmMulticastLocator*>(
      ::apollo::cyber::proto::ShmMulticastLocator::internal_default_instance());
  _TransportConf_default_instance_.get_mutable()->shm_conf_ = const_cast< ::apollo::cyber::proto::ShmConf*>(
      ::apollo::cyber::proto::ShmConf::internal_default_instance());
  _TransportConf_default_instance_.get_mutable()->participant_attr_ = const_cast< ::apollo::cyber::proto::RtpsParticipantAttr*>(
      ::apollo::cyber::proto::RtpsParticipantAttr::internal_default_instance());
  _TransportConf_default_instance_.get_mutable()->communication_mode_ = const_cast< ::apollo::cyber::proto::CommunicationMode*>(
      ::apollo::cyber::proto::CommunicationMode::internal_default_instance());
  _TransportConf_default_instance_.get_mutable()->resource_limit_ = const_cast< ::apollo::cyber::proto::ResourceLimit*>(
      ::apollo::cyber::proto::ResourceLimit::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n cyber/proto/transport_conf.proto\022\022apol"
      "lo.cyber.proto\"/\n\023ShmMulticastLocator\022\n\n"
      "\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"^\n\007ShmConf\022\025\n\rno"
      "tifier_type\030\001 \001(\t\022<\n\013shm_locator\030\002 \001(\0132\'"
      ".apollo.cyber.proto.ShmMulticastLocator\""
      "\210\001\n\023RtpsParticipantAttr\022\032\n\016lease_duratio"
      "n\030\001 \001(\005:\00212\022\036\n\023announcement_period\030\002 \001(\005"
      ":\0013\022\033\n\016domain_id_gain\030\003 \001(\r:\003200\022\030\n\tport"
      "_base\030\004 \001(\r:\00510000\"\304\001\n\021CommunicationMode"
      "\022:\n\tsame_proc\030\001 \001(\0162 .apollo.cyber.proto"
      ".OptionalMode:\005INTRA\0228\n\tdiff_proc\030\002 \001(\0162"
      " .apollo.cyber.proto.OptionalMode:\003SHM\0229"
      "\n\tdiff_host\030\003 \001(\0162 .apollo.cyber.proto.O"
      "ptionalMode:\004RTPS\"0\n\rResourceLimit\022\037\n\021ma"
      "x_history_depth\030\001 \001(\r:\0041000\"\377\001\n\rTranspor"
      "tConf\022-\n\010shm_conf\030\001 \001(\0132\033.apollo.cyber.p"
      "roto.ShmConf\022A\n\020participant_attr\030\002 \001(\0132\'"
      ".apollo.cyber.proto.RtpsParticipantAttr\022"
      "A\n\022communication_mode\030\003 \001(\0132%.apollo.cyb"
      "er.proto.CommunicationMode\0229\n\016resource_l"
      "imit\030\004 \001(\0132!.apollo.cyber.proto.Resource"
      "Limit*8\n\014OptionalMode\022\n\n\006HYBRID\020\000\022\t\n\005INT"
      "RA\020\001\022\007\n\003SHM\020\002\022\010\n\004RTPS\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 903);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cyber/proto/transport_conf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cyber_2fproto_2ftransport_5fconf_2eproto

const ::google::protobuf::EnumDescriptor* OptionalMode_descriptor() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_enum_descriptors[0];
}
bool OptionalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmMulticastLocator::kIpFieldNumber;
const int ShmMulticastLocator::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmMulticastLocator::ShmMulticastLocator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ShmMulticastLocator)
}
ShmMulticastLocator::ShmMulticastLocator(const ShmMulticastLocator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmMulticastLocator)
}

void ShmMulticastLocator::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

ShmMulticastLocator::~ShmMulticastLocator() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmMulticastLocator)
  SharedDtor();
}

void ShmMulticastLocator::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShmMulticastLocator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShmMulticastLocator::descriptor() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShmMulticastLocator& ShmMulticastLocator::default_instance() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShmMulticastLocator* ShmMulticastLocator::New(::google::protobuf::Arena* arena) const {
  ShmMulticastLocator* n = new ShmMulticastLocator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShmMulticastLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmMulticastLocator)
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShmMulticastLocator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ShmMulticastLocator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ShmMulticastLocator.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ShmMulticastLocator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ShmMulticastLocator)
  return false;
#undef DO_
}

void ShmMulticastLocator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ShmMulticastLocator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmMulticastLocator.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ShmMulticastLocator)
}

::google::protobuf::uint8* ShmMulticastLocator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmMulticastLocator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmMulticastLocator.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmMulticastLocator)
  return target;
}

size_t ShmMulticastLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmMulticastLocator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShmMulticastLocator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ShmMulticastLocator)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmMulticastLocator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShmMulticastLocator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ShmMulticastLocator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ShmMulticastLocator)
    MergeFrom(*source);
  }
}

void ShmMulticastLocator::MergeFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmMulticastLocator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmMulticastLocator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ShmMulticastLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmMulticastLocator::CopyFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmMulticastLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmMulticastLocator::IsInitialized() const {
  return true;
}

void ShmMulticastLocator::Swap(ShmMulticastLocator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmMulticastLocator::InternalSwap(ShmMulticastLocator* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShmMulticastLocator::GetMetadata() const {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShmMulticastLocator

// optional string ip = 1;
bool ShmMulticastLocator::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShmMulticastLocator::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ShmMulticastLocator::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShmMulticastLocator::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& ShmMulticastLocator::ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmMulticastLocator.ip)
  return ip_.GetNoArena();
}
void ShmMulticastLocator::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ShmMulticastLocator.ip)
}
#if LANG_CXX11
void ShmMulticastLocator::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ShmMulticastLocator.ip)
}
#endif
void ShmMulticastLocator::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ShmMulticastLocator.ip)
}
void ShmMulticastLocator::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ShmMulticastLocator.ip)
}
::std::string* ShmMulticastLocator::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ShmMulticastLocator.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmMulticastLocator::release_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ShmMulticastLocator.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmMulticastLocator::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ShmMulticastLocator.ip)
}

// optional uint32 port = 2;
bool ShmMulticastLocator::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShmMulticastLocator::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void ShmMulticastLocator::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShmMulticastLocator::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 ShmMulticastLocator::port() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmMulticastLocator.port)
  return port_;
}
void ShmMulticastLocator::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ShmMulticastLocator.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmConf::kNotifierTypeFieldNumber;
const int ShmConf::kShmLocatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmConf::ShmConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ShmConf)
}
ShmConf::ShmConf(const ShmConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notifier_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notifier_type()) {
    notifier_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notifier_type_);
  }
  if (from.has_shm_locator()) {
    shm_locator_ = new ::apollo::cyber::proto::ShmMulticastLocator(*from.shm_locator_);
  } else {
    shm_locator_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmConf)
}

void ShmConf::SharedCtor() {
  _cached_size_ = 0;
  notifier_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shm_locator_ = NULL;
}

ShmConf::~ShmConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmConf)
  SharedDtor();
}

void ShmConf::SharedDtor() {
  notifier_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete shm_locator_;
  }
}

void ShmConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShmConf::descriptor() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShmConf& ShmConf::default_instance() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShmConf* ShmConf::New(::google::protobuf::Arena* arena) const {
  ShmConf* n = new ShmConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShmConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmConf)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_notifier_type()) {
      GOOGLE_DCHECK(!notifier_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*notifier_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_shm_locator()) {
      GOOGLE_DCHECK(shm_locator_ != NULL);
      shm_locator_->::apollo::cyber::proto::ShmMulticastLocator::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShmConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ShmConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notifier_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notifier_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notifier_type().data(), this->notifier_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ShmConf.notifier_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shm_locator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ShmConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ShmConf)
  return false;
#undef DO_
}

void ShmConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ShmConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notifier_type().data(), this->notifier_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.notifier_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notifier_type(), output);
  }

  // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shm_locator_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ShmConf)
}

::google::protobuf::uint8* ShmConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notifier_type().data(), this->notifier_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.notifier_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notifier_type(), target);
  }

  // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shm_locator_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmConf)
  return target;
}

size_t ShmConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string notifier_type = 1;
    if (has_notifier_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notifier_type());
    }

    // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 2;
    if (has_shm_locator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shm_locator_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShmConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ShmConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShmConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ShmConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ShmConf)
    MergeFrom(*source);
  }
}

void ShmConf::MergeFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_notifier_type();
      notifier_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notifier_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shm_locator()->::apollo::cyber::proto::ShmMulticastLocator::MergeFrom(from.shm_locator());
    }
  }
}

void ShmConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ShmConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmConf::CopyFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmConf::IsInitialized() const {
  return true;
}

void ShmConf::Swap(ShmConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmConf::InternalSwap(ShmConf* other) {
  notifier_type_.Swap(&other->notifier_type_);
  std::swap(shm_locator_, other->shm_locator_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShmConf::GetMetadata() const {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShmConf

// optional string notifier_type = 1;
bool ShmConf::has_notifier_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShmConf::set_has_notifier_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ShmConf::clear_has_notifier_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShmConf::clear_notifier_type() {
  notifier_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notifier_type();
}
const ::std::string& ShmConf::notifier_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmConf.notifier_type)
  return notifier_type_.GetNoArena();
}
void ShmConf::set_notifier_type(const ::std::string& value) {
  set_has_notifier_type();
  notifier_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ShmConf.notifier_type)
}
#if LANG_CXX11
void ShmConf::set_notifier_type(::std::string&& value) {
  set_has_notifier_type();
  notifier_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ShmConf.notifier_type)
}
#endif
void ShmConf::set_notifier_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_notifier_type();
  notifier_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ShmConf.notifier_type)
}
void ShmConf::set_notifier_type(const char* value, size_t size) {
  set_has_notifier_type();
  notifier_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ShmConf.notifier_type)
}
::std::string* ShmConf::mutable_notifier_type() {
  set_has_notifier_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ShmConf.notifier_type)
  return notifier_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShmConf::release_notifier_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ShmConf.notifier_type)
  clear_has_notifier_type();
  return notifier_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShmConf::set_allocated_notifier_type(::std::string* notifier_type) {
  if (notifier_type != NULL) {
    set_has_notifier_type();
  } else {
    clear_has_notifier_type();
  }
  notifier_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notifier_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ShmConf.notifier_type)
}

// optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 2;
bool ShmConf::has_shm_locator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShmConf::set_has_shm_locator() {
  _has_bits_[0] |= 0x00000002u;
}
void ShmConf::clear_has_shm_locator() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShmConf::clear_shm_locator() {
  if (shm_locator_ != NULL) shm_locator_->::apollo::cyber::proto::ShmMulticastLocator::Clear();
  clear_has_shm_locator();
}
const ::apollo::cyber::proto::ShmMulticastLocator& ShmConf::shm_locator() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmConf.shm_locator)
  return shm_locator_ != NULL ? *shm_locator_
                         : *::apollo::cyber::proto::ShmMulticastLocator::internal_default_instance();
}
::apollo::cyber::proto::ShmMulticastLocator* ShmConf::mutable_shm_locator() {
  set_has_shm_locator();
  if (shm_locator_ == NULL) {
    shm_locator_ = new ::apollo::cyber::proto::ShmMulticastLocator;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ShmConf.shm_locator)
  return shm_locator_;
}
::apollo::cyber::proto::ShmMulticastLocator* ShmConf::release_shm_locator() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ShmConf.shm_locator)
  clear_has_shm_locator();
  ::apollo::cyber::proto::ShmMulticastLocator* temp = shm_locator_;
  shm_locator_ = NULL;
  return temp;
}
void ShmConf::set_allocated_shm_locator(::apollo::cyber::proto::ShmMulticastLocator* shm_locator) {
  delete shm_locator_;
  shm_locator_ = shm_locator;
  if (shm_locator) {
    set_has_shm_locator();
  } else {
    clear_has_shm_locator();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ShmConf.shm_locator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpsParticipantAttr::kLeaseDurationFieldNumber;
const int RtpsParticipantAttr::kAnnouncementPeriodFieldNumber;
const int RtpsParticipantAttr::kDomainIdGainFieldNumber;
const int RtpsParticipantAttr::kPortBaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtpsParticipantAttr::RtpsParticipantAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.RtpsParticipantAttr)
}
RtpsParticipantAttr::RtpsParticipantAttr(const RtpsParticipantAttr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lease_duration_, &from.lease_duration_,
    reinterpret_cast<char*>(&port_base_) -
    reinterpret_cast<char*>(&lease_duration_) + sizeof(port_base_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.RtpsParticipantAttr)
}

void RtpsParticipantAttr::SharedCtor() {
  _cached_size_ = 0;
  lease_duration_ = 12;
  announcement_period_ = 3;
  domain_id_gain_ = 200u;
  port_base_ = 10000u;
}

RtpsParticipantAttr::~RtpsParticipantAttr() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.RtpsParticipantAttr)
  SharedDtor();
}

void RtpsParticipantAttr::SharedDtor() {
}

void RtpsParticipantAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtpsParticipantAttr::descriptor() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RtpsParticipantAttr& RtpsParticipantAttr::default_instance() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

RtpsParticipantAttr* RtpsParticipantAttr::New(::google::protobuf::Arena* arena) const {
  RtpsParticipantAttr* n = new RtpsParticipantAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RtpsParticipantAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (_has_bits_[0 / 32] & 15u) {
    lease_duration_ = 12;
    announcement_period_ = 3;
    domain_id_gain_ = 200u;
    port_base_ = 10000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RtpsParticipantAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.RtpsParticipantAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lease_duration = 1 [default = 12];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lease_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lease_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 announcement_period = 2 [default = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_announcement_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &announcement_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 domain_id_gain = 3 [default = 200];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_domain_id_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_id_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port_base = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_port_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.RtpsParticipantAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.RtpsParticipantAttr)
  return false;
#undef DO_
}

void RtpsParticipantAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.RtpsParticipantAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lease_duration = 1 [default = 12];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lease_duration(), output);
  }

  // optional int32 announcement_period = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->announcement_period(), output);
  }

  // optional uint32 domain_id_gain = 3 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->domain_id_gain(), output);
  }

  // optional uint32 port_base = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port_base(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.RtpsParticipantAttr)
}

::google::protobuf::uint8* RtpsParticipantAttr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.RtpsParticipantAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lease_duration = 1 [default = 12];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lease_duration(), target);
  }

  // optional int32 announcement_period = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->announcement_period(), target);
  }

  // optional uint32 domain_id_gain = 3 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->domain_id_gain(), target);
  }

  // optional uint32 port_base = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port_base(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.RtpsParticipantAttr)
  return target;
}

size_t RtpsParticipantAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.RtpsParticipantAttr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 lease_duration = 1 [default = 12];
    if (has_lease_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lease_duration());
    }

    // optional int32 announcement_period = 2 [default = 3];
    if (has_announcement_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->announcement_period());
    }

    // optional uint32 domain_id_gain = 3 [default = 200];
    if (has_domain_id_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->domain_id_gain());
    }

    // optional uint32 port_base = 4 [default = 10000];
    if (has_port_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_base());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtpsParticipantAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const RtpsParticipantAttr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RtpsParticipantAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.RtpsParticipantAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.RtpsParticipantAttr)
    MergeFrom(*source);
  }
}

void RtpsParticipantAttr::MergeFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      lease_duration_ = from.lease_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_period_ = from.announcement_period_;
    }
    if (cached_has_bits & 0x00000004u) {
      domain_id_gain_ = from.domain_id_gain_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_base_ = from.port_base_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtpsParticipantAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtpsParticipantAttr::CopyFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpsParticipantAttr::IsInitialized() const {
  return true;
}

void RtpsParticipantAttr::Swap(RtpsParticipantAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtpsParticipantAttr::InternalSwap(RtpsParticipantAttr* other) {
  std::swap(lease_duration_, other->lease_duration_);
  std::swap(announcement_period_, other->announcement_period_);
  std::swap(domain_id_gain_, other->domain_id_gain_);
  std::swap(port_base_, other->port_base_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RtpsParticipantAttr::GetMetadata() const {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RtpsParticipantAttr

// optional int32 lease_duration = 1 [default = 12];
bool RtpsParticipantAttr::has_lease_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RtpsParticipantAttr::set_has_lease_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void RtpsParticipantAttr::clear_has_lease_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void RtpsParticipantAttr::clear_lease_duration() {
  lease_duration_ = 12;
  clear_has_lease_duration();
}
::google::protobuf::int32 RtpsParticipantAttr::lease_duration() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.lease_duration)
  return lease_duration_;
}
void RtpsParticipantAttr::set_lease_duration(::google::protobuf::int32 value) {
  set_has_lease_duration();
  lease_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.lease_duration)
}

// optional int32 announcement_period = 2 [default = 3];
bool RtpsParticipantAttr::has_announcement_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RtpsParticipantAttr::set_has_announcement_period() {
  _has_bits_[0] |= 0x00000002u;
}
void RtpsParticipantAttr::clear_has_announcement_period() {
  _has_bits_[0] &= ~0x00000002u;
}
void RtpsParticipantAttr::clear_announcement_period() {
  announcement_period_ = 3;
  clear_has_announcement_period();
}
::google::protobuf::int32 RtpsParticipantAttr::announcement_period() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.announcement_period)
  return announcement_period_;
}
void RtpsParticipantAttr::set_announcement_period(::google::protobuf::int32 value) {
  set_has_announcement_period();
  announcement_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.announcement_period)
}

// optional uint32 domain_id_gain = 3 [default = 200];
bool RtpsParticipantAttr::has_domain_id_gain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RtpsParticipantAttr::set_has_domain_id_gain() {
  _has_bits_[0] |= 0x00000004u;
}
void RtpsParticipantAttr::clear_has_domain_id_gain() {
  _has_bits_[0] &= ~0x00000004u;
}
void RtpsParticipantAttr::clear_domain_id_gain() {
  domain_id_gain_ = 200u;
  clear_has_domain_id_gain();
}
::google::protobuf::uint32 RtpsParticipantAttr::domain_id_gain() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.domain_id_gain)
  return domain_id_gain_;
}
void RtpsParticipantAttr::set_domain_id_gain(::google::protobuf::uint32 value) {
  set_has_domain_id_gain();
  domain_id_gain_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.domain_id_gain)
}

// optional uint32 port_base = 4 [default = 10000];
bool RtpsParticipantAttr::has_port_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RtpsParticipantAttr::set_has_port_base() {
  _has_bits_[0] |= 0x00000008u;
}
void RtpsParticipantAttr::clear_has_port_base() {
  _has_bits_[0] &= ~0x00000008u;
}
void RtpsParticipantAttr::clear_port_base() {
  port_base_ = 10000u;
  clear_has_port_base();
}
::google::protobuf::uint32 RtpsParticipantAttr::port_base() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.port_base)
  return port_base_;
}
void RtpsParticipantAttr::set_port_base(::google::protobuf::uint32 value) {
  set_has_port_base();
  port_base_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.port_base)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommunicationMode::kSameProcFieldNumber;
const int CommunicationMode::kDiffProcFieldNumber;
const int CommunicationMode::kDiffHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommunicationMode::CommunicationMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.CommunicationMode)
}
CommunicationMode::CommunicationMode(const CommunicationMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&diff_host_, &from.diff_host_,
    reinterpret_cast<char*>(&diff_proc_) -
    reinterpret_cast<char*>(&diff_host_) + sizeof(diff_proc_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.CommunicationMode)
}

void CommunicationMode::SharedCtor() {
  _cached_size_ = 0;
  diff_host_ = 3;
  same_proc_ = 1;
  diff_proc_ = 2;
}

CommunicationMode::~CommunicationMode() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.CommunicationMode)
  SharedDtor();
}

void CommunicationMode::SharedDtor() {
}

void CommunicationMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommunicationMode::descriptor() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommunicationMode& CommunicationMode::default_instance() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommunicationMode* CommunicationMode::New(::google::protobuf::Arena* arena) const {
  CommunicationMode* n = new CommunicationMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommunicationMode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.CommunicationMode)
  if (_has_bits_[0 / 32] & 7u) {
    diff_host_ = 3;
    same_proc_ = 1;
    diff_proc_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommunicationMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.CommunicationMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::OptionalMode_IsValid(value)) {
            set_same_proc(static_cast< ::apollo::cyber::proto::OptionalMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::OptionalMode_IsValid(value)) {
            set_diff_proc(static_cast< ::apollo::cyber::proto::OptionalMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::OptionalMode_IsValid(value)) {
            set_diff_host(static_cast< ::apollo::cyber::proto::OptionalMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.CommunicationMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.CommunicationMode)
  return false;
#undef DO_
}

void CommunicationMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.CommunicationMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->same_proc(), output);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->diff_proc(), output);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->diff_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.CommunicationMode)
}

::google::protobuf::uint8* CommunicationMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.CommunicationMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->same_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->diff_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->diff_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.CommunicationMode)
  return target;
}

size_t CommunicationMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.CommunicationMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
    if (has_diff_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->diff_host());
    }

    // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
    if (has_same_proc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->same_proc());
    }

    // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
    if (has_diff_proc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->diff_proc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommunicationMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.CommunicationMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationMode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommunicationMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.CommunicationMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.CommunicationMode)
    MergeFrom(*source);
  }
}

void CommunicationMode::MergeFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.CommunicationMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      diff_host_ = from.diff_host_;
    }
    if (cached_has_bits & 0x00000002u) {
      same_proc_ = from.same_proc_;
    }
    if (cached_has_bits & 0x00000004u) {
      diff_proc_ = from.diff_proc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommunicationMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.CommunicationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationMode::CopyFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.CommunicationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationMode::IsInitialized() const {
  return true;
}

void CommunicationMode::Swap(CommunicationMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommunicationMode::InternalSwap(CommunicationMode* other) {
  std::swap(diff_host_, other->diff_host_);
  std::swap(same_proc_, other->same_proc_);
  std::swap(diff_proc_, other->diff_proc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommunicationMode::GetMetadata() const {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommunicationMode

// optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
bool CommunicationMode::has_same_proc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommunicationMode::set_has_same_proc() {
  _has_bits_[0] |= 0x00000002u;
}
void CommunicationMode::clear_has_same_proc() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommunicationMode::clear_same_proc() {
  same_proc_ = 1;
  clear_has_same_proc();
}
::apollo::cyber::proto::OptionalMode CommunicationMode::same_proc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CommunicationMode.same_proc)
  return static_cast< ::apollo::cyber::proto::OptionalMode >(same_proc_);
}
void CommunicationMode::set_same_proc(::apollo::cyber::proto::OptionalMode value) {
  assert(::apollo::cyber::proto::OptionalMode_IsValid(value));
  set_has_same_proc();
  same_proc_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.CommunicationMode.same_proc)
}

// optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
bool CommunicationMode::has_diff_proc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CommunicationMode::set_has_diff_proc() {
  _has_bits_[0] |= 0x00000004u;
}
void CommunicationMode::clear_has_diff_proc() {
  _has_bits_[0] &= ~0x00000004u;
}
void CommunicationMode::clear_diff_proc() {
  diff_proc_ = 2;
  clear_has_diff_proc();
}
::apollo::cyber::proto::OptionalMode CommunicationMode::diff_proc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CommunicationMode.diff_proc)
  return static_cast< ::apollo::cyber::proto::OptionalMode >(diff_proc_);
}
void CommunicationMode::set_diff_proc(::apollo::cyber::proto::OptionalMode value) {
  assert(::apollo::cyber::proto::OptionalMode_IsValid(value));
  set_has_diff_proc();
  diff_proc_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.CommunicationMode.diff_proc)
}

// optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
bool CommunicationMode::has_diff_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommunicationMode::set_has_diff_host() {
  _has_bits_[0] |= 0x00000001u;
}
void CommunicationMode::clear_has_diff_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommunicationMode::clear_diff_host() {
  diff_host_ = 3;
  clear_has_diff_host();
}
::apollo::cyber::proto::OptionalMode CommunicationMode::diff_host() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CommunicationMode.diff_host)
  return static_cast< ::apollo::cyber::proto::OptionalMode >(diff_host_);
}
void CommunicationMode::set_diff_host(::apollo::cyber::proto::OptionalMode value) {
  assert(::apollo::cyber::proto::OptionalMode_IsValid(value));
  set_has_diff_host();
  diff_host_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.CommunicationMode.diff_host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceLimit::kMaxHistoryDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceLimit::ResourceLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ResourceLimit)
}
ResourceLimit::ResourceLimit(const ResourceLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_history_depth_ = from.max_history_depth_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ResourceLimit)
}

void ResourceLimit::SharedCtor() {
  _cached_size_ = 0;
  max_history_depth_ = 1000u;
}

ResourceLimit::~ResourceLimit() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ResourceLimit)
  SharedDtor();
}

void ResourceLimit::SharedDtor() {
}

void ResourceLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceLimit::descriptor() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResourceLimit& ResourceLimit::default_instance() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResourceLimit* ResourceLimit::New(::google::protobuf::Arena* arena) const {
  ResourceLimit* n = new ResourceLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ResourceLimit)
  max_history_depth_ = 1000u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResourceLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ResourceLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_history_depth = 1 [default = 1000];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_max_history_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_history_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ResourceLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ResourceLimit)
  return false;
#undef DO_
}

void ResourceLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ResourceLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_history_depth = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_history_depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ResourceLimit)
}

::google::protobuf::uint8* ResourceLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ResourceLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_history_depth = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_history_depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ResourceLimit)
  return target;
}

size_t ResourceLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ResourceLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 max_history_depth = 1 [default = 1000];
  if (has_max_history_depth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_history_depth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ResourceLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ResourceLimit)
    MergeFrom(*source);
  }
}

void ResourceLimit::MergeFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_history_depth()) {
    set_max_history_depth(from.max_history_depth());
  }
}

void ResourceLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceLimit::CopyFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLimit::IsInitialized() const {
  return true;
}

void ResourceLimit::Swap(ResourceLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceLimit::InternalSwap(ResourceLimit* other) {
  std::swap(max_history_depth_, other->max_history_depth_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceLimit::GetMetadata() const {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceLimit

// optional uint32 max_history_depth = 1 [default = 1000];
bool ResourceLimit::has_max_history_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResourceLimit::set_has_max_history_depth() {
  _has_bits_[0] |= 0x00000001u;
}
void ResourceLimit::clear_has_max_history_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResourceLimit::clear_max_history_depth() {
  max_history_depth_ = 1000u;
  clear_has_max_history_depth();
}
::google::protobuf::uint32 ResourceLimit::max_history_depth() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ResourceLimit.max_history_depth)
  return max_history_depth_;
}
void ResourceLimit::set_max_history_depth(::google::protobuf::uint32 value) {
  set_has_max_history_depth();
  max_history_depth_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ResourceLimit.max_history_depth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportConf::kShmConfFieldNumber;
const int TransportConf::kParticipantAttrFieldNumber;
const int TransportConf::kCommunicationModeFieldNumber;
const int TransportConf::kResourceLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportConf::TransportConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.TransportConf)
}
TransportConf::TransportConf(const TransportConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shm_conf()) {
    shm_conf_ = new ::apollo::cyber::proto::ShmConf(*from.shm_conf_);
  } else {
    shm_conf_ = NULL;
  }
  if (from.has_participant_attr()) {
    participant_attr_ = new ::apollo::cyber::proto::RtpsParticipantAttr(*from.participant_attr_);
  } else {
    participant_attr_ = NULL;
  }
  if (from.has_communication_mode()) {
    communication_mode_ = new ::apollo::cyber::proto::CommunicationMode(*from.communication_mode_);
  } else {
    communication_mode_ = NULL;
  }
  if (from.has_resource_limit()) {
    resource_limit_ = new ::apollo::cyber::proto::ResourceLimit(*from.resource_limit_);
  } else {
    resource_limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.TransportConf)
}

void TransportConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shm_conf_, 0, reinterpret_cast<char*>(&resource_limit_) -
    reinterpret_cast<char*>(&shm_conf_) + sizeof(resource_limit_));
}

TransportConf::~TransportConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.TransportConf)
  SharedDtor();
}

void TransportConf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete shm_conf_;
  }
  if (this != internal_default_instance()) {
    delete participant_attr_;
  }
  if (this != internal_default_instance()) {
    delete communication_mode_;
  }
  if (this != internal_default_instance()) {
    delete resource_limit_;
  }
}

void TransportConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportConf::descriptor() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportConf& TransportConf::default_instance() {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportConf* TransportConf::New(::google::protobuf::Arena* arena) const {
  TransportConf* n = new TransportConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.TransportConf)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_shm_conf()) {
      GOOGLE_DCHECK(shm_conf_ != NULL);
      shm_conf_->::apollo::cyber::proto::ShmConf::Clear();
    }
    if (has_participant_attr()) {
      GOOGLE_DCHECK(participant_attr_ != NULL);
      participant_attr_->::apollo::cyber::proto::RtpsParticipantAttr::Clear();
    }
    if (has_communication_mode()) {
      GOOGLE_DCHECK(communication_mode_ != NULL);
      communication_mode_->::apollo::cyber::proto::CommunicationMode::Clear();
    }
    if (has_resource_limit()) {
      GOOGLE_DCHECK(resource_limit_ != NULL);
      resource_limit_->::apollo::cyber::proto::ResourceLimit::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.TransportConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shm_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_participant_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_communication_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.TransportConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.TransportConf)
  return false;
#undef DO_
}

void TransportConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.TransportConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shm_conf_, output);
  }

  // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->participant_attr_, output);
  }

  // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->communication_mode_, output);
  }

  // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->resource_limit_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.TransportConf)
}

::google::protobuf::uint8* TransportConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.TransportConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shm_conf_, deterministic, target);
  }

  // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->participant_attr_, deterministic, target);
  }

  // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->communication_mode_, deterministic, target);
  }

  // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->resource_limit_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.TransportConf)
  return target;
}

size_t TransportConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.TransportConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
    if (has_shm_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shm_conf_);
    }

    // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
    if (has_participant_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->participant_attr_);
    }

    // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
    if (has_communication_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->communication_mode_);
    }

    // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
    if (has_resource_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resource_limit_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.TransportConf)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.TransportConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.TransportConf)
    MergeFrom(*source);
  }
}

void TransportConf::MergeFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.TransportConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shm_conf()->::apollo::cyber::proto::ShmConf::MergeFrom(from.shm_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_participant_attr()->::apollo::cyber::proto::RtpsParticipantAttr::MergeFrom(from.participant_attr());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_communication_mode()->::apollo::cyber::proto::CommunicationMode::MergeFrom(from.communication_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_resource_limit()->::apollo::cyber::proto::ResourceLimit::MergeFrom(from.resource_limit());
    }
  }
}

void TransportConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.TransportConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportConf::CopyFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.TransportConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportConf::IsInitialized() const {
  return true;
}

void TransportConf::Swap(TransportConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportConf::InternalSwap(TransportConf* other) {
  std::swap(shm_conf_, other->shm_conf_);
  std::swap(participant_attr_, other->participant_attr_);
  std::swap(communication_mode_, other->communication_mode_);
  std::swap(resource_limit_, other->resource_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportConf::GetMetadata() const {
  protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2ftransport_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportConf

// optional .apollo.cyber.proto.ShmConf shm_conf = 1;
bool TransportConf::has_shm_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportConf::set_has_shm_conf() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportConf::clear_has_shm_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportConf::clear_shm_conf() {
  if (shm_conf_ != NULL) shm_conf_->::apollo::cyber::proto::ShmConf::Clear();
  clear_has_shm_conf();
}
const ::apollo::cyber::proto::ShmConf& TransportConf::shm_conf() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.shm_conf)
  return shm_conf_ != NULL ? *shm_conf_
                         : *::apollo::cyber::proto::ShmConf::internal_default_instance();
}
::apollo::cyber::proto::ShmConf* TransportConf::mutable_shm_conf() {
  set_has_shm_conf();
  if (shm_conf_ == NULL) {
    shm_conf_ = new ::apollo::cyber::proto::ShmConf;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.shm_conf)
  return shm_conf_;
}
::apollo::cyber::proto::ShmConf* TransportConf::release_shm_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.shm_conf)
  clear_has_shm_conf();
  ::apollo::cyber::proto::ShmConf* temp = shm_conf_;
  shm_conf_ = NULL;
  return temp;
}
void TransportConf::set_allocated_shm_conf(::apollo::cyber::proto::ShmConf* shm_conf) {
  delete shm_conf_;
  shm_conf_ = shm_conf;
  if (shm_conf) {
    set_has_shm_conf();
  } else {
    clear_has_shm_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.shm_conf)
}

// optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
bool TransportConf::has_participant_attr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransportConf::set_has_participant_attr() {
  _has_bits_[0] |= 0x00000002u;
}
void TransportConf::clear_has_participant_attr() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransportConf::clear_participant_attr() {
  if (participant_attr_ != NULL) participant_attr_->::apollo::cyber::proto::RtpsParticipantAttr::Clear();
  clear_has_participant_attr();
}
const ::apollo::cyber::proto::RtpsParticipantAttr& TransportConf::participant_attr() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.participant_attr)
  return participant_attr_ != NULL ? *participant_attr_
                         : *::apollo::cyber::proto::RtpsParticipantAttr::internal_default_instance();
}
::apollo::cyber::proto::RtpsParticipantAttr* TransportConf::mutable_participant_attr() {
  set_has_participant_attr();
  if (participant_attr_ == NULL) {
    participant_attr_ = new ::apollo::cyber::proto::RtpsParticipantAttr;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.participant_attr)
  return participant_attr_;
}
::apollo::cyber::proto::RtpsParticipantAttr* TransportConf::release_participant_attr() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.participant_attr)
  clear_has_participant_attr();
  ::apollo::cyber::proto::RtpsParticipantAttr* temp = participant_attr_;
  participant_attr_ = NULL;
  return temp;
}
void TransportConf::set_allocated_participant_attr(::apollo::cyber::proto::RtpsParticipantAttr* participant_attr) {
  delete participant_attr_;
  participant_attr_ = participant_attr;
  if (participant_attr) {
    set_has_participant_attr();
  } else {
    clear_has_participant_attr();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.participant_attr)
}

// optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
bool TransportConf::has_communication_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransportConf::set_has_communication_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void TransportConf::clear_has_communication_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransportConf::clear_communication_mode() {
  if (communication_mode_ != NULL) communication_mode_->::apollo::cyber::proto::CommunicationMode::Clear();
  clear_has_communication_mode();
}
const ::apollo::cyber::proto::CommunicationMode& TransportConf::communication_mode() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.communication_mode)
  return communication_mode_ != NULL ? *communication_mode_
                         : *::apollo::cyber::proto::CommunicationMode::internal_default_instance();
}
::apollo::cyber::proto::CommunicationMode* TransportConf::mutable_communication_mode() {
  set_has_communication_mode();
  if (communication_mode_ == NULL) {
    communication_mode_ = new ::apollo::cyber::proto::CommunicationMode;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.communication_mode)
  return communication_mode_;
}
::apollo::cyber::proto::CommunicationMode* TransportConf::release_communication_mode() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.communication_mode)
  clear_has_communication_mode();
  ::apollo::cyber::proto::CommunicationMode* temp = communication_mode_;
  communication_mode_ = NULL;
  return temp;
}
void TransportConf::set_allocated_communication_mode(::apollo::cyber::proto::CommunicationMode* communication_mode) {
  delete communication_mode_;
  communication_mode_ = communication_mode;
  if (communication_mode) {
    set_has_communication_mode();
  } else {
    clear_has_communication_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.communication_mode)
}

// optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
bool TransportConf::has_resource_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransportConf::set_has_resource_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void TransportConf::clear_has_resource_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransportConf::clear_resource_limit() {
  if (resource_limit_ != NULL) resource_limit_->::apollo::cyber::proto::ResourceLimit::Clear();
  clear_has_resource_limit();
}
const ::apollo::cyber::proto::ResourceLimit& TransportConf::resource_limit() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.resource_limit)
  return resource_limit_ != NULL ? *resource_limit_
                         : *::apollo::cyber::proto::ResourceLimit::internal_default_instance();
}
::apollo::cyber::proto::ResourceLimit* TransportConf::mutable_resource_limit() {
  set_has_resource_limit();
  if (resource_limit_ == NULL) {
    resource_limit_ = new ::apollo::cyber::proto::ResourceLimit;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.resource_limit)
  return resource_limit_;
}
::apollo::cyber::proto::ResourceLimit* TransportConf::release_resource_limit() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.resource_limit)
  clear_has_resource_limit();
  ::apollo::cyber::proto::ResourceLimit* temp = resource_limit_;
  resource_limit_ = NULL;
  return temp;
}
void TransportConf::set_allocated_resource_limit(::apollo::cyber::proto::ResourceLimit* resource_limit) {
  delete resource_limit_;
  resource_limit_ = resource_limit;
  if (resource_limit) {
    set_has_resource_limit();
  } else {
    clear_has_resource_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.resource_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
