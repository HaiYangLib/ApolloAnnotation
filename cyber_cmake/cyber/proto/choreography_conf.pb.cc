// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/choreography_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cyber/proto/choreography_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace cyber {
namespace proto {
class ChoreographyTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChoreographyTask> {
} _ChoreographyTask_default_instance_;
class ChoreographyConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChoreographyConf> {
} _ChoreographyConf_default_instance_;

namespace protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyTask, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyTask, processor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyTask, prio_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, choreography_processor_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, choreography_affinity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, choreography_processor_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, choreography_processor_prio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, choreography_cpuset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, pool_processor_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, pool_affinity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, pool_processor_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, pool_processor_prio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, pool_cpuset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChoreographyConf, tasks_),
  6,
  0,
  1,
  7,
  2,
  8,
  3,
  4,
  9,
  5,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(ChoreographyTask)},
  { 11, 27, sizeof(ChoreographyConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChoreographyTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChoreographyConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cyber/proto/choreography_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ChoreographyTask_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ChoreographyConf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChoreographyTask_default_instance_.DefaultConstruct();
  _ChoreographyConf_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n#cyber/proto/choreography_conf.proto\022\022a"
      "pollo.cyber.proto\"D\n\020ChoreographyTask\022\014\n"
      "\004name\030\001 \001(\t\022\021\n\tprocessor\030\002 \001(\005\022\017\n\004prio\030\003"
      " \001(\r:\0011\"\367\002\n\020ChoreographyConf\022\"\n\032choreogr"
      "aphy_processor_num\030\001 \001(\r\022\035\n\025choreography"
      "_affinity\030\002 \001(\t\022%\n\035choreography_processo"
      "r_policy\030\003 \001(\t\022#\n\033choreography_processor"
      "_prio\030\004 \001(\005\022\033\n\023choreography_cpuset\030\005 \001(\t"
      "\022\032\n\022pool_processor_num\030\006 \001(\r\022\025\n\rpool_aff"
      "inity\030\007 \001(\t\022\035\n\025pool_processor_policy\030\010 \001"
      "(\t\022\033\n\023pool_processor_prio\030\t \001(\005\022\023\n\013pool_"
      "cpuset\030\n \001(\t\0223\n\005tasks\030\013 \003(\0132$.apollo.cyb"
      "er.proto.ChoreographyTask"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cyber/proto/choreography_conf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChoreographyTask::kNameFieldNumber;
const int ChoreographyTask::kProcessorFieldNumber;
const int ChoreographyTask::kPrioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChoreographyTask::ChoreographyTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChoreographyTask)
}
ChoreographyTask::ChoreographyTask(const ChoreographyTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&processor_, &from.processor_,
    reinterpret_cast<char*>(&prio_) -
    reinterpret_cast<char*>(&processor_) + sizeof(prio_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChoreographyTask)
}

void ChoreographyTask::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processor_ = 0;
  prio_ = 1u;
}

ChoreographyTask::~ChoreographyTask() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChoreographyTask)
  SharedDtor();
}

void ChoreographyTask::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChoreographyTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChoreographyTask::descriptor() {
  protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChoreographyTask& ChoreographyTask::default_instance() {
  protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChoreographyTask* ChoreographyTask::New(::google::protobuf::Arena* arena) const {
  ChoreographyTask* n = new ChoreographyTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChoreographyTask::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChoreographyTask)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    processor_ = 0;
    prio_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChoreographyTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChoreographyTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChoreographyTask.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 processor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_processor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prio = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_prio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChoreographyTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChoreographyTask)
  return false;
#undef DO_
}

void ChoreographyTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChoreographyTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyTask.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 processor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->processor(), output);
  }

  // optional uint32 prio = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChoreographyTask)
}

::google::protobuf::uint8* ChoreographyTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChoreographyTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyTask.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 processor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->processor(), target);
  }

  // optional uint32 prio = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChoreographyTask)
  return target;
}

size_t ChoreographyTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChoreographyTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 processor = 2;
    if (has_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processor());
    }

    // optional uint32 prio = 3 [default = 1];
    if (has_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prio());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChoreographyTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChoreographyTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ChoreographyTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChoreographyTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChoreographyTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChoreographyTask)
    MergeFrom(*source);
  }
}

void ChoreographyTask::MergeFrom(const ChoreographyTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChoreographyTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      processor_ = from.processor_;
    }
    if (cached_has_bits & 0x00000004u) {
      prio_ = from.prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChoreographyTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChoreographyTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChoreographyTask::CopyFrom(const ChoreographyTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChoreographyTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChoreographyTask::IsInitialized() const {
  return true;
}

void ChoreographyTask::Swap(ChoreographyTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChoreographyTask::InternalSwap(ChoreographyTask* other) {
  name_.Swap(&other->name_);
  std::swap(processor_, other->processor_);
  std::swap(prio_, other->prio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChoreographyTask::GetMetadata() const {
  protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChoreographyTask

// optional string name = 1;
bool ChoreographyTask::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChoreographyTask::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ChoreographyTask::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChoreographyTask::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ChoreographyTask::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.name)
  return name_.GetNoArena();
}
void ChoreographyTask::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.name)
}
#if LANG_CXX11
void ChoreographyTask::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyTask.name)
}
#endif
void ChoreographyTask::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyTask.name)
}
void ChoreographyTask::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyTask.name)
}
::std::string* ChoreographyTask::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyTask.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChoreographyTask::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyTask.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChoreographyTask::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyTask.name)
}

// optional int32 processor = 2;
bool ChoreographyTask::has_processor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChoreographyTask::set_has_processor() {
  _has_bits_[0] |= 0x00000002u;
}
void ChoreographyTask::clear_has_processor() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChoreographyTask::clear_processor() {
  processor_ = 0;
  clear_has_processor();
}
::google::protobuf::int32 ChoreographyTask::processor() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.processor)
  return processor_;
}
void ChoreographyTask::set_processor(::google::protobuf::int32 value) {
  set_has_processor();
  processor_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.processor)
}

// optional uint32 prio = 3 [default = 1];
bool ChoreographyTask::has_prio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChoreographyTask::set_has_prio() {
  _has_bits_[0] |= 0x00000004u;
}
void ChoreographyTask::clear_has_prio() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChoreographyTask::clear_prio() {
  prio_ = 1u;
  clear_has_prio();
}
::google::protobuf::uint32 ChoreographyTask::prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyTask.prio)
  return prio_;
}
void ChoreographyTask::set_prio(::google::protobuf::uint32 value) {
  set_has_prio();
  prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyTask.prio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChoreographyConf::kChoreographyProcessorNumFieldNumber;
const int ChoreographyConf::kChoreographyAffinityFieldNumber;
const int ChoreographyConf::kChoreographyProcessorPolicyFieldNumber;
const int ChoreographyConf::kChoreographyProcessorPrioFieldNumber;
const int ChoreographyConf::kChoreographyCpusetFieldNumber;
const int ChoreographyConf::kPoolProcessorNumFieldNumber;
const int ChoreographyConf::kPoolAffinityFieldNumber;
const int ChoreographyConf::kPoolProcessorPolicyFieldNumber;
const int ChoreographyConf::kPoolProcessorPrioFieldNumber;
const int ChoreographyConf::kPoolCpusetFieldNumber;
const int ChoreographyConf::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChoreographyConf::ChoreographyConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChoreographyConf)
}
ChoreographyConf::ChoreographyConf(const ChoreographyConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  choreography_affinity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_choreography_affinity()) {
    choreography_affinity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choreography_affinity_);
  }
  choreography_processor_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_choreography_processor_policy()) {
    choreography_processor_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choreography_processor_policy_);
  }
  choreography_cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_choreography_cpuset()) {
    choreography_cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choreography_cpuset_);
  }
  pool_affinity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pool_affinity()) {
    pool_affinity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_affinity_);
  }
  pool_processor_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pool_processor_policy()) {
    pool_processor_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_processor_policy_);
  }
  pool_cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pool_cpuset()) {
    pool_cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_cpuset_);
  }
  ::memcpy(&choreography_processor_num_, &from.choreography_processor_num_,
    reinterpret_cast<char*>(&pool_processor_prio_) -
    reinterpret_cast<char*>(&choreography_processor_num_) + sizeof(pool_processor_prio_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChoreographyConf)
}

void ChoreographyConf::SharedCtor() {
  _cached_size_ = 0;
  choreography_affinity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choreography_processor_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choreography_cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pool_affinity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pool_processor_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pool_cpuset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&choreography_processor_num_, 0, reinterpret_cast<char*>(&pool_processor_prio_) -
    reinterpret_cast<char*>(&choreography_processor_num_) + sizeof(pool_processor_prio_));
}

ChoreographyConf::~ChoreographyConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChoreographyConf)
  SharedDtor();
}

void ChoreographyConf::SharedDtor() {
  choreography_affinity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choreography_processor_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  choreography_cpuset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pool_affinity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pool_processor_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pool_cpuset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChoreographyConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChoreographyConf::descriptor() {
  protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChoreographyConf& ChoreographyConf::default_instance() {
  protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChoreographyConf* ChoreographyConf::New(::google::protobuf::Arena* arena) const {
  ChoreographyConf* n = new ChoreographyConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChoreographyConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChoreographyConf)
  tasks_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_choreography_affinity()) {
      GOOGLE_DCHECK(!choreography_affinity_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*choreography_affinity_.UnsafeRawStringPointer())->clear();
    }
    if (has_choreography_processor_policy()) {
      GOOGLE_DCHECK(!choreography_processor_policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*choreography_processor_policy_.UnsafeRawStringPointer())->clear();
    }
    if (has_choreography_cpuset()) {
      GOOGLE_DCHECK(!choreography_cpuset_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*choreography_cpuset_.UnsafeRawStringPointer())->clear();
    }
    if (has_pool_affinity()) {
      GOOGLE_DCHECK(!pool_affinity_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pool_affinity_.UnsafeRawStringPointer())->clear();
    }
    if (has_pool_processor_policy()) {
      GOOGLE_DCHECK(!pool_processor_policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pool_processor_policy_.UnsafeRawStringPointer())->clear();
    }
    if (has_pool_cpuset()) {
      GOOGLE_DCHECK(!pool_cpuset_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pool_cpuset_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&choreography_processor_num_, 0, reinterpret_cast<char*>(&choreography_processor_prio_) -
      reinterpret_cast<char*>(&choreography_processor_num_) + sizeof(choreography_processor_prio_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&pool_processor_num_, 0, reinterpret_cast<char*>(&pool_processor_prio_) -
      reinterpret_cast<char*>(&pool_processor_num_) + sizeof(pool_processor_prio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChoreographyConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChoreographyConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 choreography_processor_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_choreography_processor_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choreography_processor_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string choreography_affinity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_choreography_affinity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->choreography_affinity().data(), this->choreography_affinity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChoreographyConf.choreography_affinity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string choreography_processor_policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_choreography_processor_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->choreography_processor_policy().data(), this->choreography_processor_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChoreographyConf.choreography_processor_policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 choreography_processor_prio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_choreography_processor_prio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choreography_processor_prio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string choreography_cpuset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_choreography_cpuset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->choreography_cpuset().data(), this->choreography_cpuset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChoreographyConf.choreography_cpuset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pool_processor_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_pool_processor_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pool_processor_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pool_affinity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool_affinity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pool_affinity().data(), this->pool_affinity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChoreographyConf.pool_affinity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pool_processor_policy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool_processor_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pool_processor_policy().data(), this->pool_processor_policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChoreographyConf.pool_processor_policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pool_processor_prio = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pool_processor_prio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pool_processor_prio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pool_cpuset = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool_cpuset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pool_cpuset().data(), this->pool_cpuset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChoreographyConf.pool_cpuset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChoreographyConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChoreographyConf)
  return false;
#undef DO_
}

void ChoreographyConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChoreographyConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 choreography_processor_num = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->choreography_processor_num(), output);
  }

  // optional string choreography_affinity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choreography_affinity().data(), this->choreography_affinity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_affinity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->choreography_affinity(), output);
  }

  // optional string choreography_processor_policy = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choreography_processor_policy().data(), this->choreography_processor_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_processor_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->choreography_processor_policy(), output);
  }

  // optional int32 choreography_processor_prio = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->choreography_processor_prio(), output);
  }

  // optional string choreography_cpuset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choreography_cpuset().data(), this->choreography_cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_cpuset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->choreography_cpuset(), output);
  }

  // optional uint32 pool_processor_num = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pool_processor_num(), output);
  }

  // optional string pool_affinity = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool_affinity().data(), this->pool_affinity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_affinity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pool_affinity(), output);
  }

  // optional string pool_processor_policy = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool_processor_policy().data(), this->pool_processor_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_processor_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->pool_processor_policy(), output);
  }

  // optional int32 pool_processor_prio = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pool_processor_prio(), output);
  }

  // optional string pool_cpuset = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool_cpuset().data(), this->pool_cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_cpuset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pool_cpuset(), output);
  }

  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tasks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChoreographyConf)
}

::google::protobuf::uint8* ChoreographyConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChoreographyConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 choreography_processor_num = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->choreography_processor_num(), target);
  }

  // optional string choreography_affinity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choreography_affinity().data(), this->choreography_affinity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_affinity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->choreography_affinity(), target);
  }

  // optional string choreography_processor_policy = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choreography_processor_policy().data(), this->choreography_processor_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_processor_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->choreography_processor_policy(), target);
  }

  // optional int32 choreography_processor_prio = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->choreography_processor_prio(), target);
  }

  // optional string choreography_cpuset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choreography_cpuset().data(), this->choreography_cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_cpuset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->choreography_cpuset(), target);
  }

  // optional uint32 pool_processor_num = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pool_processor_num(), target);
  }

  // optional string pool_affinity = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool_affinity().data(), this->pool_affinity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_affinity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pool_affinity(), target);
  }

  // optional string pool_processor_policy = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool_processor_policy().data(), this->pool_processor_policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_processor_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pool_processor_policy(), target);
  }

  // optional int32 pool_processor_prio = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pool_processor_prio(), target);
  }

  // optional string pool_cpuset = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pool_cpuset().data(), this->pool_cpuset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_cpuset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pool_cpuset(), target);
  }

  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->tasks(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChoreographyConf)
  return target;
}

size_t ChoreographyConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChoreographyConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  {
    unsigned int count = this->tasks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string choreography_affinity = 2;
    if (has_choreography_affinity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->choreography_affinity());
    }

    // optional string choreography_processor_policy = 3;
    if (has_choreography_processor_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->choreography_processor_policy());
    }

    // optional string choreography_cpuset = 5;
    if (has_choreography_cpuset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->choreography_cpuset());
    }

    // optional string pool_affinity = 7;
    if (has_pool_affinity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool_affinity());
    }

    // optional string pool_processor_policy = 8;
    if (has_pool_processor_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool_processor_policy());
    }

    // optional string pool_cpuset = 10;
    if (has_pool_cpuset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool_cpuset());
    }

    // optional uint32 choreography_processor_num = 1;
    if (has_choreography_processor_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->choreography_processor_num());
    }

    // optional int32 choreography_processor_prio = 4;
    if (has_choreography_processor_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choreography_processor_prio());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 pool_processor_num = 6;
    if (has_pool_processor_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pool_processor_num());
    }

    // optional int32 pool_processor_prio = 9;
    if (has_pool_processor_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pool_processor_prio());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChoreographyConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChoreographyConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ChoreographyConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChoreographyConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChoreographyConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChoreographyConf)
    MergeFrom(*source);
  }
}

void ChoreographyConf::MergeFrom(const ChoreographyConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChoreographyConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_choreography_affinity();
      choreography_affinity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choreography_affinity_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_choreography_processor_policy();
      choreography_processor_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choreography_processor_policy_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_choreography_cpuset();
      choreography_cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.choreography_cpuset_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_pool_affinity();
      pool_affinity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_affinity_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_pool_processor_policy();
      pool_processor_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_processor_policy_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_pool_cpuset();
      pool_cpuset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_cpuset_);
    }
    if (cached_has_bits & 0x00000040u) {
      choreography_processor_num_ = from.choreography_processor_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      choreography_processor_prio_ = from.choreography_processor_prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      pool_processor_num_ = from.pool_processor_num_;
    }
    if (cached_has_bits & 0x00000200u) {
      pool_processor_prio_ = from.pool_processor_prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChoreographyConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChoreographyConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChoreographyConf::CopyFrom(const ChoreographyConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChoreographyConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChoreographyConf::IsInitialized() const {
  return true;
}

void ChoreographyConf::Swap(ChoreographyConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChoreographyConf::InternalSwap(ChoreographyConf* other) {
  tasks_.InternalSwap(&other->tasks_);
  choreography_affinity_.Swap(&other->choreography_affinity_);
  choreography_processor_policy_.Swap(&other->choreography_processor_policy_);
  choreography_cpuset_.Swap(&other->choreography_cpuset_);
  pool_affinity_.Swap(&other->pool_affinity_);
  pool_processor_policy_.Swap(&other->pool_processor_policy_);
  pool_cpuset_.Swap(&other->pool_cpuset_);
  std::swap(choreography_processor_num_, other->choreography_processor_num_);
  std::swap(choreography_processor_prio_, other->choreography_processor_prio_);
  std::swap(pool_processor_num_, other->pool_processor_num_);
  std::swap(pool_processor_prio_, other->pool_processor_prio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChoreographyConf::GetMetadata() const {
  protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2fchoreography_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChoreographyConf

// optional uint32 choreography_processor_num = 1;
bool ChoreographyConf::has_choreography_processor_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChoreographyConf::set_has_choreography_processor_num() {
  _has_bits_[0] |= 0x00000040u;
}
void ChoreographyConf::clear_has_choreography_processor_num() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChoreographyConf::clear_choreography_processor_num() {
  choreography_processor_num_ = 0u;
  clear_has_choreography_processor_num();
}
::google::protobuf::uint32 ChoreographyConf::choreography_processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_num)
  return choreography_processor_num_;
}
void ChoreographyConf::set_choreography_processor_num(::google::protobuf::uint32 value) {
  set_has_choreography_processor_num();
  choreography_processor_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_num)
}

// optional string choreography_affinity = 2;
bool ChoreographyConf::has_choreography_affinity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChoreographyConf::set_has_choreography_affinity() {
  _has_bits_[0] |= 0x00000001u;
}
void ChoreographyConf::clear_has_choreography_affinity() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChoreographyConf::clear_choreography_affinity() {
  choreography_affinity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_choreography_affinity();
}
const ::std::string& ChoreographyConf::choreography_affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  return choreography_affinity_.GetNoArena();
}
void ChoreographyConf::set_choreography_affinity(const ::std::string& value) {
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
#if LANG_CXX11
void ChoreographyConf::set_choreography_affinity(::std::string&& value) {
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
#endif
void ChoreographyConf::set_choreography_affinity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
void ChoreographyConf::set_choreography_affinity(const char* value, size_t size) {
  set_has_choreography_affinity();
  choreography_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}
::std::string* ChoreographyConf::mutable_choreography_affinity() {
  set_has_choreography_affinity();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  return choreography_affinity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChoreographyConf::release_choreography_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
  clear_has_choreography_affinity();
  return choreography_affinity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChoreographyConf::set_allocated_choreography_affinity(::std::string* choreography_affinity) {
  if (choreography_affinity != NULL) {
    set_has_choreography_affinity();
  } else {
    clear_has_choreography_affinity();
  }
  choreography_affinity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choreography_affinity);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_affinity)
}

// optional string choreography_processor_policy = 3;
bool ChoreographyConf::has_choreography_processor_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChoreographyConf::set_has_choreography_processor_policy() {
  _has_bits_[0] |= 0x00000002u;
}
void ChoreographyConf::clear_has_choreography_processor_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChoreographyConf::clear_choreography_processor_policy() {
  choreography_processor_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_choreography_processor_policy();
}
const ::std::string& ChoreographyConf::choreography_processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  return choreography_processor_policy_.GetNoArena();
}
void ChoreographyConf::set_choreography_processor_policy(const ::std::string& value) {
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
#if LANG_CXX11
void ChoreographyConf::set_choreography_processor_policy(::std::string&& value) {
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
#endif
void ChoreographyConf::set_choreography_processor_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
void ChoreographyConf::set_choreography_processor_policy(const char* value, size_t size) {
  set_has_choreography_processor_policy();
  choreography_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}
::std::string* ChoreographyConf::mutable_choreography_processor_policy() {
  set_has_choreography_processor_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  return choreography_processor_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChoreographyConf::release_choreography_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
  clear_has_choreography_processor_policy();
  return choreography_processor_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChoreographyConf::set_allocated_choreography_processor_policy(::std::string* choreography_processor_policy) {
  if (choreography_processor_policy != NULL) {
    set_has_choreography_processor_policy();
  } else {
    clear_has_choreography_processor_policy();
  }
  choreography_processor_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choreography_processor_policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_processor_policy)
}

// optional int32 choreography_processor_prio = 4;
bool ChoreographyConf::has_choreography_processor_prio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChoreographyConf::set_has_choreography_processor_prio() {
  _has_bits_[0] |= 0x00000080u;
}
void ChoreographyConf::clear_has_choreography_processor_prio() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChoreographyConf::clear_choreography_processor_prio() {
  choreography_processor_prio_ = 0;
  clear_has_choreography_processor_prio();
}
::google::protobuf::int32 ChoreographyConf::choreography_processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_processor_prio)
  return choreography_processor_prio_;
}
void ChoreographyConf::set_choreography_processor_prio(::google::protobuf::int32 value) {
  set_has_choreography_processor_prio();
  choreography_processor_prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_processor_prio)
}

// optional string choreography_cpuset = 5;
bool ChoreographyConf::has_choreography_cpuset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChoreographyConf::set_has_choreography_cpuset() {
  _has_bits_[0] |= 0x00000004u;
}
void ChoreographyConf::clear_has_choreography_cpuset() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChoreographyConf::clear_choreography_cpuset() {
  choreography_cpuset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_choreography_cpuset();
}
const ::std::string& ChoreographyConf::choreography_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  return choreography_cpuset_.GetNoArena();
}
void ChoreographyConf::set_choreography_cpuset(const ::std::string& value) {
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
#if LANG_CXX11
void ChoreographyConf::set_choreography_cpuset(::std::string&& value) {
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
#endif
void ChoreographyConf::set_choreography_cpuset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
void ChoreographyConf::set_choreography_cpuset(const char* value, size_t size) {
  set_has_choreography_cpuset();
  choreography_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}
::std::string* ChoreographyConf::mutable_choreography_cpuset() {
  set_has_choreography_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  return choreography_cpuset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChoreographyConf::release_choreography_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
  clear_has_choreography_cpuset();
  return choreography_cpuset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChoreographyConf::set_allocated_choreography_cpuset(::std::string* choreography_cpuset) {
  if (choreography_cpuset != NULL) {
    set_has_choreography_cpuset();
  } else {
    clear_has_choreography_cpuset();
  }
  choreography_cpuset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), choreography_cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.choreography_cpuset)
}

// optional uint32 pool_processor_num = 6;
bool ChoreographyConf::has_pool_processor_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChoreographyConf::set_has_pool_processor_num() {
  _has_bits_[0] |= 0x00000100u;
}
void ChoreographyConf::clear_has_pool_processor_num() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChoreographyConf::clear_pool_processor_num() {
  pool_processor_num_ = 0u;
  clear_has_pool_processor_num();
}
::google::protobuf::uint32 ChoreographyConf::pool_processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_num)
  return pool_processor_num_;
}
void ChoreographyConf::set_pool_processor_num(::google::protobuf::uint32 value) {
  set_has_pool_processor_num();
  pool_processor_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_num)
}

// optional string pool_affinity = 7;
bool ChoreographyConf::has_pool_affinity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChoreographyConf::set_has_pool_affinity() {
  _has_bits_[0] |= 0x00000008u;
}
void ChoreographyConf::clear_has_pool_affinity() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChoreographyConf::clear_pool_affinity() {
  pool_affinity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool_affinity();
}
const ::std::string& ChoreographyConf::pool_affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  return pool_affinity_.GetNoArena();
}
void ChoreographyConf::set_pool_affinity(const ::std::string& value) {
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
#if LANG_CXX11
void ChoreographyConf::set_pool_affinity(::std::string&& value) {
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
#endif
void ChoreographyConf::set_pool_affinity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
void ChoreographyConf::set_pool_affinity(const char* value, size_t size) {
  set_has_pool_affinity();
  pool_affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}
::std::string* ChoreographyConf::mutable_pool_affinity() {
  set_has_pool_affinity();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  return pool_affinity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChoreographyConf::release_pool_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_affinity)
  clear_has_pool_affinity();
  return pool_affinity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChoreographyConf::set_allocated_pool_affinity(::std::string* pool_affinity) {
  if (pool_affinity != NULL) {
    set_has_pool_affinity();
  } else {
    clear_has_pool_affinity();
  }
  pool_affinity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_affinity);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_affinity)
}

// optional string pool_processor_policy = 8;
bool ChoreographyConf::has_pool_processor_policy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChoreographyConf::set_has_pool_processor_policy() {
  _has_bits_[0] |= 0x00000010u;
}
void ChoreographyConf::clear_has_pool_processor_policy() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChoreographyConf::clear_pool_processor_policy() {
  pool_processor_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool_processor_policy();
}
const ::std::string& ChoreographyConf::pool_processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  return pool_processor_policy_.GetNoArena();
}
void ChoreographyConf::set_pool_processor_policy(const ::std::string& value) {
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
#if LANG_CXX11
void ChoreographyConf::set_pool_processor_policy(::std::string&& value) {
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
#endif
void ChoreographyConf::set_pool_processor_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
void ChoreographyConf::set_pool_processor_policy(const char* value, size_t size) {
  set_has_pool_processor_policy();
  pool_processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}
::std::string* ChoreographyConf::mutable_pool_processor_policy() {
  set_has_pool_processor_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  return pool_processor_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChoreographyConf::release_pool_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
  clear_has_pool_processor_policy();
  return pool_processor_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChoreographyConf::set_allocated_pool_processor_policy(::std::string* pool_processor_policy) {
  if (pool_processor_policy != NULL) {
    set_has_pool_processor_policy();
  } else {
    clear_has_pool_processor_policy();
  }
  pool_processor_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_processor_policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_processor_policy)
}

// optional int32 pool_processor_prio = 9;
bool ChoreographyConf::has_pool_processor_prio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChoreographyConf::set_has_pool_processor_prio() {
  _has_bits_[0] |= 0x00000200u;
}
void ChoreographyConf::clear_has_pool_processor_prio() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChoreographyConf::clear_pool_processor_prio() {
  pool_processor_prio_ = 0;
  clear_has_pool_processor_prio();
}
::google::protobuf::int32 ChoreographyConf::pool_processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_processor_prio)
  return pool_processor_prio_;
}
void ChoreographyConf::set_pool_processor_prio(::google::protobuf::int32 value) {
  set_has_pool_processor_prio();
  pool_processor_prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_processor_prio)
}

// optional string pool_cpuset = 10;
bool ChoreographyConf::has_pool_cpuset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChoreographyConf::set_has_pool_cpuset() {
  _has_bits_[0] |= 0x00000020u;
}
void ChoreographyConf::clear_has_pool_cpuset() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChoreographyConf::clear_pool_cpuset() {
  pool_cpuset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pool_cpuset();
}
const ::std::string& ChoreographyConf::pool_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  return pool_cpuset_.GetNoArena();
}
void ChoreographyConf::set_pool_cpuset(const ::std::string& value) {
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
#if LANG_CXX11
void ChoreographyConf::set_pool_cpuset(::std::string&& value) {
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
#endif
void ChoreographyConf::set_pool_cpuset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
void ChoreographyConf::set_pool_cpuset(const char* value, size_t size) {
  set_has_pool_cpuset();
  pool_cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}
::std::string* ChoreographyConf::mutable_pool_cpuset() {
  set_has_pool_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  return pool_cpuset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChoreographyConf::release_pool_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
  clear_has_pool_cpuset();
  return pool_cpuset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChoreographyConf::set_allocated_pool_cpuset(::std::string* pool_cpuset) {
  if (pool_cpuset != NULL) {
    set_has_pool_cpuset();
  } else {
    clear_has_pool_cpuset();
  }
  pool_cpuset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChoreographyConf.pool_cpuset)
}

// repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
int ChoreographyConf::tasks_size() const {
  return tasks_.size();
}
void ChoreographyConf::clear_tasks() {
  tasks_.Clear();
}
const ::apollo::cyber::proto::ChoreographyTask& ChoreographyConf::tasks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_.Get(index);
}
::apollo::cyber::proto::ChoreographyTask* ChoreographyConf::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_.Mutable(index);
}
::apollo::cyber::proto::ChoreographyTask* ChoreographyConf::add_tasks() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >*
ChoreographyConf::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ChoreographyConf.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ChoreographyTask >&
ChoreographyConf::tasks() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ChoreographyConf.tasks)
  return tasks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
