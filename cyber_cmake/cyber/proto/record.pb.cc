// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cyber/proto/record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace cyber {
namespace proto {
class SingleIndexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SingleIndex> {
  public:
  const ::apollo::cyber::proto::ChannelCache* channel_cache_;
  const ::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache_;
  const ::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache_;
} _SingleIndex_default_instance_;
class ChunkHeaderCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChunkHeaderCache> {
} _ChunkHeaderCache_default_instance_;
class ChunkBodyCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChunkBodyCache> {
} _ChunkBodyCache_default_instance_;
class ChannelCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelCache> {
} _ChannelCache_default_instance_;
class SingleMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SingleMessage> {
} _SingleMessage_default_instance_;
class HeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Header> {
} _Header_default_instance_;
class ChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Channel> {
} _Channel_default_instance_;
class ChunkHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChunkHeader> {
} _ChunkHeader_default_instance_;
class ChunkBodyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChunkBody> {
} _ChunkBody_default_instance_;
class IndexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Index> {
} _Index_default_instance_;

namespace protobuf_cyber_2fproto_2frecord_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleIndex, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleIndex, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleIndex, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleIndex, position_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SingleIndex_default_instance_), channel_cache_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SingleIndex_default_instance_), chunk_header_cache_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SingleIndex_default_instance_), chunk_body_cache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleIndex, cache_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeaderCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeaderCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeaderCache, message_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeaderCache, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeaderCache, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeaderCache, raw_size_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkBodyCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkBodyCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkBodyCache, message_number_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCache, message_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCache, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCache, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCache, proto_desc_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMessage, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMessage, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMessage, content_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, compress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, chunk_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, segment_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, index_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, chunk_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, channel_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, message_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, is_complete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, chunk_raw_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, segment_raw_size_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  6,
  9,
  10,
  11,
  12,
  8,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, proto_desc_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeader, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeader, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeader, message_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkHeader, raw_size_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkBody, messages_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, indexes_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(SingleIndex)},
  { 16, 25, sizeof(ChunkHeaderCache)},
  { 29, 35, sizeof(ChunkBodyCache)},
  { 36, 45, sizeof(ChannelCache)},
  { 49, 57, sizeof(SingleMessage)},
  { 60, 80, sizeof(Header)},
  { 95, 103, sizeof(Channel)},
  { 106, 115, sizeof(ChunkHeader)},
  { 119, 125, sizeof(ChunkBody)},
  { 126, 132, sizeof(Index)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SingleIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChunkHeaderCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChunkBodyCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SingleMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Channel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChunkHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChunkBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Index_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cyber/proto/record.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _SingleIndex_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ChunkHeaderCache_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ChunkBodyCache_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ChannelCache_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SingleMessage_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Header_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Channel_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ChunkHeader_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ChunkBody_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Index_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SingleIndex_default_instance_.DefaultConstruct();
  _ChunkHeaderCache_default_instance_.DefaultConstruct();
  _ChunkBodyCache_default_instance_.DefaultConstruct();
  _ChannelCache_default_instance_.DefaultConstruct();
  _SingleMessage_default_instance_.DefaultConstruct();
  _Header_default_instance_.DefaultConstruct();
  _Channel_default_instance_.DefaultConstruct();
  _ChunkHeader_default_instance_.DefaultConstruct();
  _ChunkBody_default_instance_.DefaultConstruct();
  _Index_default_instance_.DefaultConstruct();
  _SingleIndex_default_instance_.channel_cache_ = const_cast< ::apollo::cyber::proto::ChannelCache*>(
      ::apollo::cyber::proto::ChannelCache::internal_default_instance());
  _SingleIndex_default_instance_.chunk_header_cache_ = const_cast< ::apollo::cyber::proto::ChunkHeaderCache*>(
      ::apollo::cyber::proto::ChunkHeaderCache::internal_default_instance());
  _SingleIndex_default_instance_.chunk_body_cache_ = const_cast< ::apollo::cyber::proto::ChunkBodyCache*>(
      ::apollo::cyber::proto::ChunkBodyCache::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030cyber/proto/record.proto\022\022apollo.cyber"
      ".proto\"\226\002\n\013SingleIndex\022-\n\004type\030\001 \001(\0162\037.a"
      "pollo.cyber.proto.SectionType\022\020\n\010positio"
      "n\030\002 \001(\004\0229\n\rchannel_cache\030e \001(\0132 .apollo."
      "cyber.proto.ChannelCacheH\000\022B\n\022chunk_head"
      "er_cache\030f \001(\0132$.apollo.cyber.proto.Chun"
      "kHeaderCacheH\000\022>\n\020chunk_body_cache\030g \001(\013"
      "2\".apollo.cyber.proto.ChunkBodyCacheH\000B\007"
      "\n\005cache\"b\n\020ChunkHeaderCache\022\026\n\016message_n"
      "umber\030\001 \001(\004\022\022\n\nbegin_time\030\002 \001(\004\022\020\n\010end_t"
      "ime\030\003 \001(\004\022\020\n\010raw_size\030\004 \001(\004\"(\n\016ChunkBody"
      "Cache\022\026\n\016message_number\030\001 \001(\004\"^\n\014Channel"
      "Cache\022\026\n\016message_number\030\001 \001(\004\022\014\n\004name\030\002 "
      "\001(\t\022\024\n\014message_type\030\003 \001(\t\022\022\n\nproto_desc\030"
      "\004 \001(\014\"D\n\rSingleMessage\022\024\n\014channel_name\030\001"
      " \001(\t\022\014\n\004time\030\002 \001(\004\022\017\n\007content\030\003 \001(\014\"\221\003\n\006"
      "Header\022\025\n\rmajor_version\030\001 \001(\r\022\025\n\rminor_v"
      "ersion\030\002 \001(\r\0222\n\010compress\030\003 \001(\0162 .apollo."
      "cyber.proto.CompressType\022\026\n\016chunk_interv"
      "al\030\004 \001(\004\022\030\n\020segment_interval\030\005 \001(\004\022\031\n\016in"
      "dex_position\030\006 \001(\004:\0010\022\027\n\014chunk_number\030\007 "
      "\001(\004:\0010\022\031\n\016channel_number\030\010 \001(\004:\0010\022\025\n\nbeg"
      "in_time\030\t \001(\004:\0010\022\023\n\010end_time\030\n \001(\004:\0010\022\031\n"
      "\016message_number\030\013 \001(\004:\0010\022\017\n\004size\030\014 \001(\004:\001"
      "0\022\032\n\013is_complete\030\r \001(\010:\005false\022\026\n\016chunk_r"
      "aw_size\030\016 \001(\004\022\030\n\020segment_raw_size\030\017 \001(\004\""
      "A\n\007Channel\022\014\n\004name\030\001 \001(\t\022\024\n\014message_type"
      "\030\002 \001(\t\022\022\n\nproto_desc\030\003 \001(\014\"]\n\013ChunkHeade"
      "r\022\022\n\nbegin_time\030\001 \001(\004\022\020\n\010end_time\030\002 \001(\004\022"
      "\026\n\016message_number\030\003 \001(\004\022\020\n\010raw_size\030\004 \001("
      "\004\"@\n\tChunkBody\0223\n\010messages\030\001 \003(\0132!.apoll"
      "o.cyber.proto.SingleMessage\"9\n\005Index\0220\n\007"
      "indexes\030\001 \003(\0132\037.apollo.cyber.proto.Singl"
      "eIndex*{\n\013SectionType\022\022\n\016SECTION_HEADER\020"
      "\000\022\030\n\024SECTION_CHUNK_HEADER\020\001\022\026\n\022SECTION_C"
      "HUNK_BODY\020\002\022\021\n\rSECTION_INDEX\020\003\022\023\n\017SECTIO"
      "N_CHANNEL\020\004*E\n\014CompressType\022\021\n\rCOMPRESS_"
      "NONE\020\000\022\020\n\014COMPRESS_BZ2\020\001\022\020\n\014COMPRESS_LZ4"
      "\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cyber/proto/record.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cyber_2fproto_2frecord_2eproto

const ::google::protobuf::EnumDescriptor* SectionType_descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_enum_descriptors[0];
}
bool SectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressType_descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_enum_descriptors[1];
}
bool CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleIndex::kTypeFieldNumber;
const int SingleIndex::kPositionFieldNumber;
const int SingleIndex::kChannelCacheFieldNumber;
const int SingleIndex::kChunkHeaderCacheFieldNumber;
const int SingleIndex::kChunkBodyCacheFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleIndex::SingleIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.SingleIndex)
}
SingleIndex::SingleIndex(const SingleIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_) + sizeof(type_));
  clear_has_cache();
  switch (from.cache_case()) {
    case kChannelCache: {
      mutable_channel_cache()->::apollo::cyber::proto::ChannelCache::MergeFrom(from.channel_cache());
      break;
    }
    case kChunkHeaderCache: {
      mutable_chunk_header_cache()->::apollo::cyber::proto::ChunkHeaderCache::MergeFrom(from.chunk_header_cache());
      break;
    }
    case kChunkBodyCache: {
      mutable_chunk_body_cache()->::apollo::cyber::proto::ChunkBodyCache::MergeFrom(from.chunk_body_cache());
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SingleIndex)
}

void SingleIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_) + sizeof(type_));
  clear_has_cache();
}

SingleIndex::~SingleIndex() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SingleIndex)
  SharedDtor();
}

void SingleIndex::SharedDtor() {
  if (has_cache()) {
    clear_cache();
  }
}

void SingleIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleIndex::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleIndex& SingleIndex::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

SingleIndex* SingleIndex::New(::google::protobuf::Arena* arena) const {
  SingleIndex* n = new SingleIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleIndex::clear_cache() {
// @@protoc_insertion_point(one_of_clear_start:apollo.cyber.proto.SingleIndex)
  switch (cache_case()) {
    case kChannelCache: {
      delete cache_.channel_cache_;
      break;
    }
    case kChunkHeaderCache: {
      delete cache_.chunk_header_cache_;
      break;
    }
    case kChunkBodyCache: {
      delete cache_.chunk_body_cache_;
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CACHE_NOT_SET;
}


void SingleIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SingleIndex)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&position_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&position_) + sizeof(type_));
  }
  clear_cache();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.SingleIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.cyber.proto.SectionType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::SectionType_IsValid(value)) {
            set_type(static_cast< ::apollo::cyber::proto::SectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ChannelCache channel_cache = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ChunkHeaderCache chunk_header_cache = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk_header_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ChunkBodyCache chunk_body_cache = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunk_body_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.SingleIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.SingleIndex)
  return false;
#undef DO_
}

void SingleIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.SingleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.SectionType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->position(), output);
  }

  switch (cache_case()) {
    case kChannelCache:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        101, *cache_.channel_cache_, output);
      break;
    case kChunkHeaderCache:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        102, *cache_.chunk_header_cache_, output);
      break;
    case kChunkBodyCache:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        103, *cache_.chunk_body_cache_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.SingleIndex)
}

::google::protobuf::uint8* SingleIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SingleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.SectionType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->position(), target);
  }

  switch (cache_case()) {
    case kChannelCache:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          101, *cache_.channel_cache_, deterministic, target);
      break;
    case kChunkHeaderCache:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          102, *cache_.chunk_header_cache_, deterministic, target);
      break;
    case kChunkBodyCache:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          103, *cache_.chunk_body_cache_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SingleIndex)
  return target;
}

size_t SingleIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SingleIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

    // optional .apollo.cyber.proto.SectionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (cache_case()) {
    // optional .apollo.cyber.proto.ChannelCache channel_cache = 101;
    case kChannelCache: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cache_.channel_cache_);
      break;
    }
    // optional .apollo.cyber.proto.ChunkHeaderCache chunk_header_cache = 102;
    case kChunkHeaderCache: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cache_.chunk_header_cache_);
      break;
    }
    // optional .apollo.cyber.proto.ChunkBodyCache chunk_body_cache = 103;
    case kChunkBodyCache: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cache_.chunk_body_cache_);
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.SingleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.SingleIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.SingleIndex)
    MergeFrom(*source);
  }
}

void SingleIndex::MergeFrom(const SingleIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SingleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.cache_case()) {
    case kChannelCache: {
      mutable_channel_cache()->::apollo::cyber::proto::ChannelCache::MergeFrom(from.channel_cache());
      break;
    }
    case kChunkHeaderCache: {
      mutable_chunk_header_cache()->::apollo::cyber::proto::ChunkHeaderCache::MergeFrom(from.chunk_header_cache());
      break;
    }
    case kChunkBodyCache: {
      mutable_chunk_body_cache()->::apollo::cyber::proto::ChunkBodyCache::MergeFrom(from.chunk_body_cache());
      break;
    }
    case CACHE_NOT_SET: {
      break;
    }
  }
}

void SingleIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.SingleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleIndex::CopyFrom(const SingleIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SingleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleIndex::IsInitialized() const {
  return true;
}

void SingleIndex::Swap(SingleIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleIndex::InternalSwap(SingleIndex* other) {
  std::swap(position_, other->position_);
  std::swap(type_, other->type_);
  std::swap(cache_, other->cache_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleIndex::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleIndex

// optional .apollo.cyber.proto.SectionType type = 1;
bool SingleIndex::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SingleIndex::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SingleIndex::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SingleIndex::clear_type() {
  type_ = 0;
  clear_has_type();
}
::apollo::cyber::proto::SectionType SingleIndex::type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.type)
  return static_cast< ::apollo::cyber::proto::SectionType >(type_);
}
void SingleIndex::set_type(::apollo::cyber::proto::SectionType value) {
  assert(::apollo::cyber::proto::SectionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleIndex.type)
}

// optional uint64 position = 2;
bool SingleIndex::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SingleIndex::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void SingleIndex::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void SingleIndex::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
::google::protobuf::uint64 SingleIndex::position() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.position)
  return position_;
}
void SingleIndex::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleIndex.position)
}

// optional .apollo.cyber.proto.ChannelCache channel_cache = 101;
bool SingleIndex::has_channel_cache() const {
  return cache_case() == kChannelCache;
}
void SingleIndex::set_has_channel_cache() {
  _oneof_case_[0] = kChannelCache;
}
void SingleIndex::clear_channel_cache() {
  if (has_channel_cache()) {
    delete cache_.channel_cache_;
    clear_has_cache();
  }
}
 const ::apollo::cyber::proto::ChannelCache& SingleIndex::channel_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.channel_cache)
  return has_channel_cache()
      ? *cache_.channel_cache_
      : ::apollo::cyber::proto::ChannelCache::default_instance();
}
::apollo::cyber::proto::ChannelCache* SingleIndex::mutable_channel_cache() {
  if (!has_channel_cache()) {
    clear_cache();
    set_has_channel_cache();
    cache_.channel_cache_ = new ::apollo::cyber::proto::ChannelCache;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.channel_cache)
  return cache_.channel_cache_;
}
::apollo::cyber::proto::ChannelCache* SingleIndex::release_channel_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.channel_cache)
  if (has_channel_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChannelCache* temp = cache_.channel_cache_;
    cache_.channel_cache_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SingleIndex::set_allocated_channel_cache(::apollo::cyber::proto::ChannelCache* channel_cache) {
  clear_cache();
  if (channel_cache) {
    set_has_channel_cache();
    cache_.channel_cache_ = channel_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleIndex.channel_cache)
}

// optional .apollo.cyber.proto.ChunkHeaderCache chunk_header_cache = 102;
bool SingleIndex::has_chunk_header_cache() const {
  return cache_case() == kChunkHeaderCache;
}
void SingleIndex::set_has_chunk_header_cache() {
  _oneof_case_[0] = kChunkHeaderCache;
}
void SingleIndex::clear_chunk_header_cache() {
  if (has_chunk_header_cache()) {
    delete cache_.chunk_header_cache_;
    clear_has_cache();
  }
}
 const ::apollo::cyber::proto::ChunkHeaderCache& SingleIndex::chunk_header_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  return has_chunk_header_cache()
      ? *cache_.chunk_header_cache_
      : ::apollo::cyber::proto::ChunkHeaderCache::default_instance();
}
::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::mutable_chunk_header_cache() {
  if (!has_chunk_header_cache()) {
    clear_cache();
    set_has_chunk_header_cache();
    cache_.chunk_header_cache_ = new ::apollo::cyber::proto::ChunkHeaderCache;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  return cache_.chunk_header_cache_;
}
::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::release_chunk_header_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  if (has_chunk_header_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChunkHeaderCache* temp = cache_.chunk_header_cache_;
    cache_.chunk_header_cache_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SingleIndex::set_allocated_chunk_header_cache(::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache) {
  clear_cache();
  if (chunk_header_cache) {
    set_has_chunk_header_cache();
    cache_.chunk_header_cache_ = chunk_header_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleIndex.chunk_header_cache)
}

// optional .apollo.cyber.proto.ChunkBodyCache chunk_body_cache = 103;
bool SingleIndex::has_chunk_body_cache() const {
  return cache_case() == kChunkBodyCache;
}
void SingleIndex::set_has_chunk_body_cache() {
  _oneof_case_[0] = kChunkBodyCache;
}
void SingleIndex::clear_chunk_body_cache() {
  if (has_chunk_body_cache()) {
    delete cache_.chunk_body_cache_;
    clear_has_cache();
  }
}
 const ::apollo::cyber::proto::ChunkBodyCache& SingleIndex::chunk_body_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  return has_chunk_body_cache()
      ? *cache_.chunk_body_cache_
      : ::apollo::cyber::proto::ChunkBodyCache::default_instance();
}
::apollo::cyber::proto::ChunkBodyCache* SingleIndex::mutable_chunk_body_cache() {
  if (!has_chunk_body_cache()) {
    clear_cache();
    set_has_chunk_body_cache();
    cache_.chunk_body_cache_ = new ::apollo::cyber::proto::ChunkBodyCache;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  return cache_.chunk_body_cache_;
}
::apollo::cyber::proto::ChunkBodyCache* SingleIndex::release_chunk_body_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  if (has_chunk_body_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChunkBodyCache* temp = cache_.chunk_body_cache_;
    cache_.chunk_body_cache_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SingleIndex::set_allocated_chunk_body_cache(::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache) {
  clear_cache();
  if (chunk_body_cache) {
    set_has_chunk_body_cache();
    cache_.chunk_body_cache_ = chunk_body_cache;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleIndex.chunk_body_cache)
}

bool SingleIndex::has_cache() const {
  return cache_case() != CACHE_NOT_SET;
}
void SingleIndex::clear_has_cache() {
  _oneof_case_[0] = CACHE_NOT_SET;
}
SingleIndex::CacheCase SingleIndex::cache_case() const {
  return SingleIndex::CacheCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkHeaderCache::kMessageNumberFieldNumber;
const int ChunkHeaderCache::kBeginTimeFieldNumber;
const int ChunkHeaderCache::kEndTimeFieldNumber;
const int ChunkHeaderCache::kRawSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkHeaderCache::ChunkHeaderCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChunkHeaderCache)
}
ChunkHeaderCache::ChunkHeaderCache(const ChunkHeaderCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_number_, &from.message_number_,
    reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&message_number_) + sizeof(raw_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChunkHeaderCache)
}

void ChunkHeaderCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&message_number_, 0, reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&message_number_) + sizeof(raw_size_));
}

ChunkHeaderCache::~ChunkHeaderCache() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChunkHeaderCache)
  SharedDtor();
}

void ChunkHeaderCache::SharedDtor() {
}

void ChunkHeaderCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkHeaderCache::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkHeaderCache& ChunkHeaderCache::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChunkHeaderCache* ChunkHeaderCache::New(::google::protobuf::Arena* arena) const {
  ChunkHeaderCache* n = new ChunkHeaderCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChunkHeaderCache::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChunkHeaderCache)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&message_number_, 0, reinterpret_cast<char*>(&raw_size_) -
      reinterpret_cast<char*>(&message_number_) + sizeof(raw_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkHeaderCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChunkHeaderCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 message_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_message_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 begin_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 raw_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_raw_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raw_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChunkHeaderCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChunkHeaderCache)
  return false;
#undef DO_
}

void ChunkHeaderCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChunkHeaderCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->message_number(), output);
  }

  // optional uint64 begin_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begin_time(), output);
  }

  // optional uint64 end_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end_time(), output);
  }

  // optional uint64 raw_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->raw_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChunkHeaderCache)
}

::google::protobuf::uint8* ChunkHeaderCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChunkHeaderCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->message_number(), target);
  }

  // optional uint64 begin_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begin_time(), target);
  }

  // optional uint64 end_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end_time(), target);
  }

  // optional uint64 raw_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->raw_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChunkHeaderCache)
  return target;
}

size_t ChunkHeaderCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChunkHeaderCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 message_number = 1;
    if (has_message_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->message_number());
    }

    // optional uint64 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 raw_size = 4;
    if (has_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->raw_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkHeaderCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChunkHeaderCache)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkHeaderCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkHeaderCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChunkHeaderCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChunkHeaderCache)
    MergeFrom(*source);
  }
}

void ChunkHeaderCache::MergeFrom(const ChunkHeaderCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChunkHeaderCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      message_number_ = from.message_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_size_ = from.raw_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkHeaderCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChunkHeaderCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkHeaderCache::CopyFrom(const ChunkHeaderCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChunkHeaderCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkHeaderCache::IsInitialized() const {
  return true;
}

void ChunkHeaderCache::Swap(ChunkHeaderCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkHeaderCache::InternalSwap(ChunkHeaderCache* other) {
  std::swap(message_number_, other->message_number_);
  std::swap(begin_time_, other->begin_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(raw_size_, other->raw_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChunkHeaderCache::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkHeaderCache

// optional uint64 message_number = 1;
bool ChunkHeaderCache::has_message_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChunkHeaderCache::set_has_message_number() {
  _has_bits_[0] |= 0x00000001u;
}
void ChunkHeaderCache::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChunkHeaderCache::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
::google::protobuf::uint64 ChunkHeaderCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.message_number)
  return message_number_;
}
void ChunkHeaderCache::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.message_number)
}

// optional uint64 begin_time = 2;
bool ChunkHeaderCache::has_begin_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChunkHeaderCache::set_has_begin_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ChunkHeaderCache::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChunkHeaderCache::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
::google::protobuf::uint64 ChunkHeaderCache::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.begin_time)
  return begin_time_;
}
void ChunkHeaderCache::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.begin_time)
}

// optional uint64 end_time = 3;
bool ChunkHeaderCache::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChunkHeaderCache::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ChunkHeaderCache::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChunkHeaderCache::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
::google::protobuf::uint64 ChunkHeaderCache::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.end_time)
  return end_time_;
}
void ChunkHeaderCache::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.end_time)
}

// optional uint64 raw_size = 4;
bool ChunkHeaderCache::has_raw_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChunkHeaderCache::set_has_raw_size() {
  _has_bits_[0] |= 0x00000008u;
}
void ChunkHeaderCache::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChunkHeaderCache::clear_raw_size() {
  raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_raw_size();
}
::google::protobuf::uint64 ChunkHeaderCache::raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.raw_size)
  return raw_size_;
}
void ChunkHeaderCache::set_raw_size(::google::protobuf::uint64 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.raw_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkBodyCache::kMessageNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkBodyCache::ChunkBodyCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChunkBodyCache)
}
ChunkBodyCache::ChunkBodyCache(const ChunkBodyCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_number_ = from.message_number_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChunkBodyCache)
}

void ChunkBodyCache::SharedCtor() {
  _cached_size_ = 0;
  message_number_ = GOOGLE_ULONGLONG(0);
}

ChunkBodyCache::~ChunkBodyCache() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChunkBodyCache)
  SharedDtor();
}

void ChunkBodyCache::SharedDtor() {
}

void ChunkBodyCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkBodyCache::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkBodyCache& ChunkBodyCache::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChunkBodyCache* ChunkBodyCache::New(::google::protobuf::Arena* arena) const {
  ChunkBodyCache* n = new ChunkBodyCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChunkBodyCache::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChunkBodyCache)
  message_number_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkBodyCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChunkBodyCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 message_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_message_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChunkBodyCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChunkBodyCache)
  return false;
#undef DO_
}

void ChunkBodyCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChunkBodyCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->message_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChunkBodyCache)
}

::google::protobuf::uint8* ChunkBodyCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChunkBodyCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->message_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChunkBodyCache)
  return target;
}

size_t ChunkBodyCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChunkBodyCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 message_number = 1;
  if (has_message_number()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->message_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkBodyCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChunkBodyCache)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkBodyCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkBodyCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChunkBodyCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChunkBodyCache)
    MergeFrom(*source);
  }
}

void ChunkBodyCache::MergeFrom(const ChunkBodyCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChunkBodyCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_number()) {
    set_message_number(from.message_number());
  }
}

void ChunkBodyCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChunkBodyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkBodyCache::CopyFrom(const ChunkBodyCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChunkBodyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkBodyCache::IsInitialized() const {
  return true;
}

void ChunkBodyCache::Swap(ChunkBodyCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkBodyCache::InternalSwap(ChunkBodyCache* other) {
  std::swap(message_number_, other->message_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChunkBodyCache::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkBodyCache

// optional uint64 message_number = 1;
bool ChunkBodyCache::has_message_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChunkBodyCache::set_has_message_number() {
  _has_bits_[0] |= 0x00000001u;
}
void ChunkBodyCache::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChunkBodyCache::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
::google::protobuf::uint64 ChunkBodyCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkBodyCache.message_number)
  return message_number_;
}
void ChunkBodyCache::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkBodyCache.message_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelCache::kMessageNumberFieldNumber;
const int ChannelCache::kNameFieldNumber;
const int ChannelCache::kMessageTypeFieldNumber;
const int ChannelCache::kProtoDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelCache::ChannelCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChannelCache)
}
ChannelCache::ChannelCache(const ChannelCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  proto_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proto_desc()) {
    proto_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_desc_);
  }
  message_number_ = from.message_number_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChannelCache)
}

void ChannelCache::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_number_ = GOOGLE_ULONGLONG(0);
}

ChannelCache::~ChannelCache() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChannelCache)
  SharedDtor();
}

void ChannelCache::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelCache::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelCache& ChannelCache::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelCache* ChannelCache::New(::google::protobuf::Arena* arena) const {
  ChannelCache* n = new ChannelCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelCache::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChannelCache)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_message_type()) {
      GOOGLE_DCHECK(!message_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_proto_desc()) {
      GOOGLE_DCHECK(!proto_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*proto_desc_.UnsafeRawStringPointer())->clear();
    }
  }
  message_number_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChannelCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 message_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_message_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChannelCache.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ChannelCache.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes proto_desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChannelCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChannelCache)
  return false;
#undef DO_
}

void ChannelCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChannelCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->message_number(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChannelCache.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string message_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChannelCache.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_type(), output);
  }

  // optional bytes proto_desc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->proto_desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChannelCache)
}

::google::protobuf::uint8* ChannelCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChannelCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 message_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->message_number(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChannelCache.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string message_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChannelCache.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_type(), target);
  }

  // optional bytes proto_desc = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->proto_desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChannelCache)
  return target;
}

size_t ChannelCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChannelCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string message_type = 3;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // optional bytes proto_desc = 4;
    if (has_proto_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proto_desc());
    }

    // optional uint64 message_number = 1;
    if (has_message_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->message_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChannelCache)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChannelCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChannelCache)
    MergeFrom(*source);
  }
}

void ChannelCache::MergeFrom(const ChannelCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChannelCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_proto_desc();
      proto_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_desc_);
    }
    if (cached_has_bits & 0x00000008u) {
      message_number_ = from.message_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChannelCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelCache::CopyFrom(const ChannelCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChannelCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelCache::IsInitialized() const {
  return true;
}

void ChannelCache::Swap(ChannelCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelCache::InternalSwap(ChannelCache* other) {
  name_.Swap(&other->name_);
  message_type_.Swap(&other->message_type_);
  proto_desc_.Swap(&other->proto_desc_);
  std::swap(message_number_, other->message_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelCache::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelCache

// optional uint64 message_number = 1;
bool ChannelCache::has_message_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChannelCache::set_has_message_number() {
  _has_bits_[0] |= 0x00000008u;
}
void ChannelCache::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChannelCache::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
::google::protobuf::uint64 ChannelCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.message_number)
  return message_number_;
}
void ChannelCache::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.message_number)
}

// optional string name = 2;
bool ChannelCache::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChannelCache::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ChannelCache::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelCache::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ChannelCache::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.name)
  return name_.GetNoArena();
}
void ChannelCache::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.name)
}
#if LANG_CXX11
void ChannelCache::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.name)
}
#endif
void ChannelCache::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.name)
}
void ChannelCache::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.name)
}
::std::string* ChannelCache::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelCache::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelCache::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.name)
}

// optional string message_type = 3;
bool ChannelCache::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChannelCache::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ChannelCache::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChannelCache::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
const ::std::string& ChannelCache::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.message_type)
  return message_type_.GetNoArena();
}
void ChannelCache::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.message_type)
}
#if LANG_CXX11
void ChannelCache::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.message_type)
}
#endif
void ChannelCache::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.message_type)
}
void ChannelCache::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.message_type)
}
::std::string* ChannelCache::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelCache::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelCache::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.message_type)
}

// optional bytes proto_desc = 4;
bool ChannelCache::has_proto_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChannelCache::set_has_proto_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void ChannelCache::clear_has_proto_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChannelCache::clear_proto_desc() {
  proto_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_desc();
}
const ::std::string& ChannelCache::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.proto_desc)
  return proto_desc_.GetNoArena();
}
void ChannelCache::set_proto_desc(const ::std::string& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.proto_desc)
}
#if LANG_CXX11
void ChannelCache::set_proto_desc(::std::string&& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.proto_desc)
}
#endif
void ChannelCache::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.proto_desc)
}
void ChannelCache::set_proto_desc(const void* value, size_t size) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.proto_desc)
}
::std::string* ChannelCache::mutable_proto_desc() {
  set_has_proto_desc();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.proto_desc)
  return proto_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelCache::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.proto_desc)
  clear_has_proto_desc();
  return proto_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelCache::set_allocated_proto_desc(::std::string* proto_desc) {
  if (proto_desc != NULL) {
    set_has_proto_desc();
  } else {
    clear_has_proto_desc();
  }
  proto_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.proto_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleMessage::kChannelNameFieldNumber;
const int SingleMessage::kTimeFieldNumber;
const int SingleMessage::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleMessage::SingleMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.SingleMessage)
}
SingleMessage::SingleMessage(const SingleMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SingleMessage)
}

void SingleMessage::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

SingleMessage::~SingleMessage() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SingleMessage)
  SharedDtor();
}

void SingleMessage::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleMessage::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleMessage& SingleMessage::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

SingleMessage* SingleMessage::New(::google::protobuf::Arena* arena) const {
  SingleMessage* n = new SingleMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SingleMessage)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_channel_name()) {
      GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*channel_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.SingleMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.SingleMessage.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.SingleMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.SingleMessage)
  return false;
#undef DO_
}

void SingleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.SingleMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SingleMessage.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.SingleMessage)
}

::google::protobuf::uint8* SingleMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SingleMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SingleMessage.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional uint64 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SingleMessage)
  return target;
}

size_t SingleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SingleMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.SingleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.SingleMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.SingleMessage)
    MergeFrom(*source);
  }
}

void SingleMessage::MergeFrom(const SingleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SingleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.SingleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMessage::CopyFrom(const SingleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SingleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMessage::IsInitialized() const {
  return true;
}

void SingleMessage::Swap(SingleMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleMessage::InternalSwap(SingleMessage* other) {
  channel_name_.Swap(&other->channel_name_);
  content_.Swap(&other->content_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleMessage::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleMessage

// optional string channel_name = 1;
bool SingleMessage::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SingleMessage::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SingleMessage::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SingleMessage::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
const ::std::string& SingleMessage::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.channel_name)
  return channel_name_.GetNoArena();
}
void SingleMessage::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.channel_name)
}
#if LANG_CXX11
void SingleMessage::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SingleMessage.channel_name)
}
#endif
void SingleMessage::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SingleMessage.channel_name)
}
void SingleMessage::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SingleMessage.channel_name)
}
::std::string* SingleMessage::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleMessage.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleMessage::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleMessage.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleMessage::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleMessage.channel_name)
}

// optional uint64 time = 2;
bool SingleMessage::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SingleMessage::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void SingleMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void SingleMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 SingleMessage::time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.time)
  return time_;
}
void SingleMessage::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.time)
}

// optional bytes content = 3;
bool SingleMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SingleMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void SingleMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void SingleMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& SingleMessage::content() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.content)
  return content_.GetNoArena();
}
void SingleMessage::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.content)
}
#if LANG_CXX11
void SingleMessage::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SingleMessage.content)
}
#endif
void SingleMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SingleMessage.content)
}
void SingleMessage::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SingleMessage.content)
}
::std::string* SingleMessage::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleMessage::release_content() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleMessage.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleMessage.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kMajorVersionFieldNumber;
const int Header::kMinorVersionFieldNumber;
const int Header::kCompressFieldNumber;
const int Header::kChunkIntervalFieldNumber;
const int Header::kSegmentIntervalFieldNumber;
const int Header::kIndexPositionFieldNumber;
const int Header::kChunkNumberFieldNumber;
const int Header::kChannelNumberFieldNumber;
const int Header::kBeginTimeFieldNumber;
const int Header::kEndTimeFieldNumber;
const int Header::kMessageNumberFieldNumber;
const int Header::kSizeFieldNumber;
const int Header::kIsCompleteFieldNumber;
const int Header::kChunkRawSizeFieldNumber;
const int Header::kSegmentRawSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_version_, &from.major_version_,
    reinterpret_cast<char*>(&segment_raw_size_) -
    reinterpret_cast<char*>(&major_version_) + sizeof(segment_raw_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&major_version_, 0, reinterpret_cast<char*>(&segment_raw_size_) -
    reinterpret_cast<char*>(&major_version_) + sizeof(segment_raw_size_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.Header)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&major_version_, 0, reinterpret_cast<char*>(&compress_) -
      reinterpret_cast<char*>(&major_version_) + sizeof(compress_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&is_complete_, 0, reinterpret_cast<char*>(&segment_raw_size_) -
      reinterpret_cast<char*>(&is_complete_) + sizeof(segment_raw_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 major_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_major_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minor_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.CompressType compress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::CompressType_IsValid(value)) {
            set_compress(static_cast< ::apollo::cyber::proto::CompressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunk_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_chunk_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 segment_interval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_segment_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &segment_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 index_position = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_index_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunk_number = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_chunk_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 channel_number = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_channel_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 begin_time = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end_time = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 message_number = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_message_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 size = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_complete = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chunk_raw_size = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_chunk_raw_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_raw_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 segment_raw_size = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_segment_raw_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &segment_raw_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major_version(), output);
  }

  // optional uint32 minor_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor_version(), output);
  }

  // optional .apollo.cyber.proto.CompressType compress = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->compress(), output);
  }

  // optional uint64 chunk_interval = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->chunk_interval(), output);
  }

  // optional uint64 segment_interval = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->segment_interval(), output);
  }

  // optional uint64 index_position = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->index_position(), output);
  }

  // optional uint64 chunk_number = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->chunk_number(), output);
  }

  // optional uint64 channel_number = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->channel_number(), output);
  }

  // optional uint64 begin_time = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->begin_time(), output);
  }

  // optional uint64 end_time = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->end_time(), output);
  }

  // optional uint64 message_number = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->message_number(), output);
  }

  // optional uint64 size = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->size(), output);
  }

  // optional bool is_complete = 13 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_complete(), output);
  }

  // optional uint64 chunk_raw_size = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->chunk_raw_size(), output);
  }

  // optional uint64 segment_raw_size = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->segment_raw_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major_version(), target);
  }

  // optional uint32 minor_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor_version(), target);
  }

  // optional .apollo.cyber.proto.CompressType compress = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->compress(), target);
  }

  // optional uint64 chunk_interval = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->chunk_interval(), target);
  }

  // optional uint64 segment_interval = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->segment_interval(), target);
  }

  // optional uint64 index_position = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->index_position(), target);
  }

  // optional uint64 chunk_number = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->chunk_number(), target);
  }

  // optional uint64 channel_number = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->channel_number(), target);
  }

  // optional uint64 begin_time = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->begin_time(), target);
  }

  // optional uint64 end_time = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->end_time(), target);
  }

  // optional uint64 message_number = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->message_number(), target);
  }

  // optional uint64 size = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->size(), target);
  }

  // optional bool is_complete = 13 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_complete(), target);
  }

  // optional uint64 chunk_raw_size = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->chunk_raw_size(), target);
  }

  // optional uint64 segment_raw_size = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->segment_raw_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 major_version = 1;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major_version());
    }

    // optional uint32 minor_version = 2;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor_version());
    }

    // optional uint64 chunk_interval = 4;
    if (has_chunk_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunk_interval());
    }

    // optional uint64 segment_interval = 5;
    if (has_segment_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->segment_interval());
    }

    // optional uint64 index_position = 6 [default = 0];
    if (has_index_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index_position());
    }

    // optional uint64 chunk_number = 7 [default = 0];
    if (has_chunk_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunk_number());
    }

    // optional uint64 channel_number = 8 [default = 0];
    if (has_channel_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_number());
    }

    // optional .apollo.cyber.proto.CompressType compress = 3;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool is_complete = 13 [default = false];
    if (has_is_complete()) {
      total_size += 1 + 1;
    }

    // optional uint64 begin_time = 9 [default = 0];
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 10 [default = 0];
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 message_number = 11 [default = 0];
    if (has_message_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->message_number());
    }

    // optional uint64 size = 12 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 chunk_raw_size = 14;
    if (has_chunk_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunk_raw_size());
    }

    // optional uint64 segment_raw_size = 15;
    if (has_segment_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->segment_raw_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      chunk_interval_ = from.chunk_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      segment_interval_ = from.segment_interval_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_position_ = from.index_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      chunk_number_ = from.chunk_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      channel_number_ = from.channel_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      compress_ = from.compress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      is_complete_ = from.is_complete_;
    }
    if (cached_has_bits & 0x00000200u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      message_number_ = from.message_number_;
    }
    if (cached_has_bits & 0x00001000u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00002000u) {
      chunk_raw_size_ = from.chunk_raw_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      segment_raw_size_ = from.segment_raw_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(major_version_, other->major_version_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(chunk_interval_, other->chunk_interval_);
  std::swap(segment_interval_, other->segment_interval_);
  std::swap(index_position_, other->index_position_);
  std::swap(chunk_number_, other->chunk_number_);
  std::swap(channel_number_, other->channel_number_);
  std::swap(compress_, other->compress_);
  std::swap(is_complete_, other->is_complete_);
  std::swap(begin_time_, other->begin_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(message_number_, other->message_number_);
  std::swap(size_, other->size_);
  std::swap(chunk_raw_size_, other->chunk_raw_size_);
  std::swap(segment_raw_size_, other->segment_raw_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional uint32 major_version = 1;
bool Header::has_major_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_major_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_major_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_major_version() {
  major_version_ = 0u;
  clear_has_major_version();
}
::google::protobuf::uint32 Header::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.major_version)
  return major_version_;
}
void Header::set_major_version(::google::protobuf::uint32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.major_version)
}

// optional uint32 minor_version = 2;
bool Header::has_minor_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_minor_version() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_minor_version() {
  minor_version_ = 0u;
  clear_has_minor_version();
}
::google::protobuf::uint32 Header::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.minor_version)
  return minor_version_;
}
void Header::set_minor_version(::google::protobuf::uint32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.minor_version)
}

// optional .apollo.cyber.proto.CompressType compress = 3;
bool Header::has_compress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Header::set_has_compress() {
  _has_bits_[0] |= 0x00000080u;
}
void Header::clear_has_compress() {
  _has_bits_[0] &= ~0x00000080u;
}
void Header::clear_compress() {
  compress_ = 0;
  clear_has_compress();
}
::apollo::cyber::proto::CompressType Header::compress() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.compress)
  return static_cast< ::apollo::cyber::proto::CompressType >(compress_);
}
void Header::set_compress(::apollo::cyber::proto::CompressType value) {
  assert(::apollo::cyber::proto::CompressType_IsValid(value));
  set_has_compress();
  compress_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.compress)
}

// optional uint64 chunk_interval = 4;
bool Header::has_chunk_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_chunk_interval() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_chunk_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_chunk_interval() {
  chunk_interval_ = GOOGLE_ULONGLONG(0);
  clear_has_chunk_interval();
}
::google::protobuf::uint64 Header::chunk_interval() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_interval)
  return chunk_interval_;
}
void Header::set_chunk_interval(::google::protobuf::uint64 value) {
  set_has_chunk_interval();
  chunk_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_interval)
}

// optional uint64 segment_interval = 5;
bool Header::has_segment_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_segment_interval() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_segment_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_segment_interval() {
  segment_interval_ = GOOGLE_ULONGLONG(0);
  clear_has_segment_interval();
}
::google::protobuf::uint64 Header::segment_interval() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.segment_interval)
  return segment_interval_;
}
void Header::set_segment_interval(::google::protobuf::uint64 value) {
  set_has_segment_interval();
  segment_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.segment_interval)
}

// optional uint64 index_position = 6 [default = 0];
bool Header::has_index_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Header::set_has_index_position() {
  _has_bits_[0] |= 0x00000010u;
}
void Header::clear_has_index_position() {
  _has_bits_[0] &= ~0x00000010u;
}
void Header::clear_index_position() {
  index_position_ = GOOGLE_ULONGLONG(0);
  clear_has_index_position();
}
::google::protobuf::uint64 Header::index_position() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.index_position)
  return index_position_;
}
void Header::set_index_position(::google::protobuf::uint64 value) {
  set_has_index_position();
  index_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.index_position)
}

// optional uint64 chunk_number = 7 [default = 0];
bool Header::has_chunk_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Header::set_has_chunk_number() {
  _has_bits_[0] |= 0x00000020u;
}
void Header::clear_has_chunk_number() {
  _has_bits_[0] &= ~0x00000020u;
}
void Header::clear_chunk_number() {
  chunk_number_ = GOOGLE_ULONGLONG(0);
  clear_has_chunk_number();
}
::google::protobuf::uint64 Header::chunk_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_number)
  return chunk_number_;
}
void Header::set_chunk_number(::google::protobuf::uint64 value) {
  set_has_chunk_number();
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_number)
}

// optional uint64 channel_number = 8 [default = 0];
bool Header::has_channel_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Header::set_has_channel_number() {
  _has_bits_[0] |= 0x00000040u;
}
void Header::clear_has_channel_number() {
  _has_bits_[0] &= ~0x00000040u;
}
void Header::clear_channel_number() {
  channel_number_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_number();
}
::google::protobuf::uint64 Header::channel_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.channel_number)
  return channel_number_;
}
void Header::set_channel_number(::google::protobuf::uint64 value) {
  set_has_channel_number();
  channel_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.channel_number)
}

// optional uint64 begin_time = 9 [default = 0];
bool Header::has_begin_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Header::set_has_begin_time() {
  _has_bits_[0] |= 0x00000200u;
}
void Header::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void Header::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
::google::protobuf::uint64 Header::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.begin_time)
  return begin_time_;
}
void Header::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.begin_time)
}

// optional uint64 end_time = 10 [default = 0];
bool Header::has_end_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Header::set_has_end_time() {
  _has_bits_[0] |= 0x00000400u;
}
void Header::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void Header::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
::google::protobuf::uint64 Header::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.end_time)
  return end_time_;
}
void Header::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.end_time)
}

// optional uint64 message_number = 11 [default = 0];
bool Header::has_message_number() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Header::set_has_message_number() {
  _has_bits_[0] |= 0x00000800u;
}
void Header::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000800u;
}
void Header::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
::google::protobuf::uint64 Header::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.message_number)
  return message_number_;
}
void Header::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.message_number)
}

// optional uint64 size = 12 [default = 0];
bool Header::has_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Header::set_has_size() {
  _has_bits_[0] |= 0x00001000u;
}
void Header::clear_has_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void Header::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 Header::size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.size)
  return size_;
}
void Header::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.size)
}

// optional bool is_complete = 13 [default = false];
bool Header::has_is_complete() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Header::set_has_is_complete() {
  _has_bits_[0] |= 0x00000100u;
}
void Header::clear_has_is_complete() {
  _has_bits_[0] &= ~0x00000100u;
}
void Header::clear_is_complete() {
  is_complete_ = false;
  clear_has_is_complete();
}
bool Header::is_complete() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.is_complete)
  return is_complete_;
}
void Header::set_is_complete(bool value) {
  set_has_is_complete();
  is_complete_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.is_complete)
}

// optional uint64 chunk_raw_size = 14;
bool Header::has_chunk_raw_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Header::set_has_chunk_raw_size() {
  _has_bits_[0] |= 0x00002000u;
}
void Header::clear_has_chunk_raw_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void Header::clear_chunk_raw_size() {
  chunk_raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_chunk_raw_size();
}
::google::protobuf::uint64 Header::chunk_raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_raw_size)
  return chunk_raw_size_;
}
void Header::set_chunk_raw_size(::google::protobuf::uint64 value) {
  set_has_chunk_raw_size();
  chunk_raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_raw_size)
}

// optional uint64 segment_raw_size = 15;
bool Header::has_segment_raw_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Header::set_has_segment_raw_size() {
  _has_bits_[0] |= 0x00004000u;
}
void Header::clear_has_segment_raw_size() {
  _has_bits_[0] &= ~0x00004000u;
}
void Header::clear_segment_raw_size() {
  segment_raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_segment_raw_size();
}
::google::protobuf::uint64 Header::segment_raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.segment_raw_size)
  return segment_raw_size_;
}
void Header::set_segment_raw_size(::google::protobuf::uint64 value) {
  set_has_segment_raw_size();
  segment_raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.segment_raw_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kNameFieldNumber;
const int Channel::kMessageTypeFieldNumber;
const int Channel::kProtoDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.Channel)
}
Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_type()) {
    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  proto_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proto_desc()) {
    proto_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_desc_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.Channel)
}

void Channel::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Channel& Channel::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

Channel* Channel::New(::google::protobuf::Arena* arena) const {
  Channel* n = new Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.Channel)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_message_type()) {
      GOOGLE_DCHECK(!message_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_proto_desc()) {
      GOOGLE_DCHECK(!proto_desc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*proto_desc_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.Channel.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.cyber.proto.Channel.message_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes proto_desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.Channel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.Channel.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_type(), output);
  }

  // optional bytes proto_desc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->proto_desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.Channel)
}

::google::protobuf::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.Channel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string message_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.Channel.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_type(), target);
  }

  // optional bytes proto_desc = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->proto_desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.Channel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string message_type = 2;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_type());
    }

    // optional bytes proto_desc = 3;
    if (has_proto_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proto_desc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message_type();
      message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_proto_desc();
      proto_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_desc_);
    }
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  name_.Swap(&other->name_);
  message_type_.Swap(&other->message_type_);
  proto_desc_.Swap(&other->proto_desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channel

// optional string name = 1;
bool Channel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Channel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Channel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.name)
  return name_.GetNoArena();
}
void Channel::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.name)
}
#if LANG_CXX11
void Channel::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.name)
}
#endif
void Channel::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.name)
}
void Channel::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.name)
}
::std::string* Channel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Channel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.name)
}

// optional string message_type = 2;
bool Channel::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Channel::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Channel::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Channel::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_type();
}
const ::std::string& Channel::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.message_type)
  return message_type_.GetNoArena();
}
void Channel::set_message_type(const ::std::string& value) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.message_type)
}
#if LANG_CXX11
void Channel::set_message_type(::std::string&& value) {
  set_has_message_type();
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.message_type)
}
#endif
void Channel::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.message_type)
}
void Channel::set_message_type(const char* value, size_t size) {
  set_has_message_type();
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.message_type)
}
::std::string* Channel::mutable_message_type() {
  set_has_message_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Channel::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.message_type)
  clear_has_message_type();
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Channel::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    set_has_message_type();
  } else {
    clear_has_message_type();
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.message_type)
}

// optional bytes proto_desc = 3;
bool Channel::has_proto_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Channel::set_has_proto_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void Channel::clear_has_proto_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void Channel::clear_proto_desc() {
  proto_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proto_desc();
}
const ::std::string& Channel::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.proto_desc)
  return proto_desc_.GetNoArena();
}
void Channel::set_proto_desc(const ::std::string& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.proto_desc)
}
#if LANG_CXX11
void Channel::set_proto_desc(::std::string&& value) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.proto_desc)
}
#endif
void Channel::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.proto_desc)
}
void Channel::set_proto_desc(const void* value, size_t size) {
  set_has_proto_desc();
  proto_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.proto_desc)
}
::std::string* Channel::mutable_proto_desc() {
  set_has_proto_desc();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.proto_desc)
  return proto_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Channel::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.proto_desc)
  clear_has_proto_desc();
  return proto_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Channel::set_allocated_proto_desc(::std::string* proto_desc) {
  if (proto_desc != NULL) {
    set_has_proto_desc();
  } else {
    clear_has_proto_desc();
  }
  proto_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.proto_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkHeader::kBeginTimeFieldNumber;
const int ChunkHeader::kEndTimeFieldNumber;
const int ChunkHeader::kMessageNumberFieldNumber;
const int ChunkHeader::kRawSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkHeader::ChunkHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChunkHeader)
}
ChunkHeader::ChunkHeader(const ChunkHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_time_, &from.begin_time_,
    reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&begin_time_) + sizeof(raw_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChunkHeader)
}

void ChunkHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begin_time_, 0, reinterpret_cast<char*>(&raw_size_) -
    reinterpret_cast<char*>(&begin_time_) + sizeof(raw_size_));
}

ChunkHeader::~ChunkHeader() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChunkHeader)
  SharedDtor();
}

void ChunkHeader::SharedDtor() {
}

void ChunkHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkHeader::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkHeader& ChunkHeader::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChunkHeader* ChunkHeader::New(::google::protobuf::Arena* arena) const {
  ChunkHeader* n = new ChunkHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChunkHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChunkHeader)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&begin_time_, 0, reinterpret_cast<char*>(&raw_size_) -
      reinterpret_cast<char*>(&begin_time_) + sizeof(raw_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChunkHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 begin_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_begin_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 message_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_message_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 raw_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_raw_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raw_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChunkHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChunkHeader)
  return false;
#undef DO_
}

void ChunkHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChunkHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 begin_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begin_time(), output);
  }

  // optional uint64 end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_time(), output);
  }

  // optional uint64 message_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->message_number(), output);
  }

  // optional uint64 raw_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->raw_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChunkHeader)
}

::google::protobuf::uint8* ChunkHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChunkHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 begin_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begin_time(), target);
  }

  // optional uint64 end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_time(), target);
  }

  // optional uint64 message_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->message_number(), target);
  }

  // optional uint64 raw_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->raw_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChunkHeader)
  return target;
}

size_t ChunkHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChunkHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 begin_time = 1;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 message_number = 3;
    if (has_message_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->message_number());
    }

    // optional uint64 raw_size = 4;
    if (has_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->raw_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChunkHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChunkHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChunkHeader)
    MergeFrom(*source);
  }
}

void ChunkHeader::MergeFrom(const ChunkHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChunkHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      message_number_ = from.message_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_size_ = from.raw_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChunkHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkHeader::CopyFrom(const ChunkHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChunkHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkHeader::IsInitialized() const {
  return true;
}

void ChunkHeader::Swap(ChunkHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkHeader::InternalSwap(ChunkHeader* other) {
  std::swap(begin_time_, other->begin_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(message_number_, other->message_number_);
  std::swap(raw_size_, other->raw_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChunkHeader::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkHeader

// optional uint64 begin_time = 1;
bool ChunkHeader::has_begin_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChunkHeader::set_has_begin_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ChunkHeader::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChunkHeader::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
::google::protobuf::uint64 ChunkHeader::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.begin_time)
  return begin_time_;
}
void ChunkHeader::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.begin_time)
}

// optional uint64 end_time = 2;
bool ChunkHeader::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChunkHeader::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ChunkHeader::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChunkHeader::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
::google::protobuf::uint64 ChunkHeader::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.end_time)
  return end_time_;
}
void ChunkHeader::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.end_time)
}

// optional uint64 message_number = 3;
bool ChunkHeader::has_message_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChunkHeader::set_has_message_number() {
  _has_bits_[0] |= 0x00000004u;
}
void ChunkHeader::clear_has_message_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChunkHeader::clear_message_number() {
  message_number_ = GOOGLE_ULONGLONG(0);
  clear_has_message_number();
}
::google::protobuf::uint64 ChunkHeader::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.message_number)
  return message_number_;
}
void ChunkHeader::set_message_number(::google::protobuf::uint64 value) {
  set_has_message_number();
  message_number_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.message_number)
}

// optional uint64 raw_size = 4;
bool ChunkHeader::has_raw_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChunkHeader::set_has_raw_size() {
  _has_bits_[0] |= 0x00000008u;
}
void ChunkHeader::clear_has_raw_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChunkHeader::clear_raw_size() {
  raw_size_ = GOOGLE_ULONGLONG(0);
  clear_has_raw_size();
}
::google::protobuf::uint64 ChunkHeader::raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.raw_size)
  return raw_size_;
}
void ChunkHeader::set_raw_size(::google::protobuf::uint64 value) {
  set_has_raw_size();
  raw_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.raw_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkBody::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkBody::ChunkBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ChunkBody)
}
ChunkBody::ChunkBody(const ChunkBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChunkBody)
}

void ChunkBody::SharedCtor() {
  _cached_size_ = 0;
}

ChunkBody::~ChunkBody() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChunkBody)
  SharedDtor();
}

void ChunkBody::SharedDtor() {
}

void ChunkBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkBody::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkBody& ChunkBody::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChunkBody* ChunkBody::New(::google::protobuf::Arena* arena) const {
  ChunkBody* n = new ChunkBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChunkBody::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChunkBody)
  messages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ChunkBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.cyber.proto.SingleMessage messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ChunkBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ChunkBody)
  return false;
#undef DO_
}

void ChunkBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ChunkBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.SingleMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ChunkBody)
}

::google::protobuf::uint8* ChunkBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChunkBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.SingleMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->messages(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChunkBody)
  return target;
}

size_t ChunkBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChunkBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.cyber.proto.SingleMessage messages = 1;
  {
    unsigned int count = this->messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChunkBody)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChunkBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChunkBody)
    MergeFrom(*source);
  }
}

void ChunkBody::MergeFrom(const ChunkBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChunkBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void ChunkBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChunkBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkBody::CopyFrom(const ChunkBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChunkBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkBody::IsInitialized() const {
  return true;
}

void ChunkBody::Swap(ChunkBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkBody::InternalSwap(ChunkBody* other) {
  messages_.InternalSwap(&other->messages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChunkBody::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChunkBody

// repeated .apollo.cyber.proto.SingleMessage messages = 1;
int ChunkBody::messages_size() const {
  return messages_.size();
}
void ChunkBody::clear_messages() {
  messages_.Clear();
}
const ::apollo::cyber::proto::SingleMessage& ChunkBody::messages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkBody.messages)
  return messages_.Get(index);
}
::apollo::cyber::proto::SingleMessage* ChunkBody::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChunkBody.messages)
  return messages_.Mutable(index);
}
::apollo::cyber::proto::SingleMessage* ChunkBody::add_messages() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ChunkBody.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >*
ChunkBody::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ChunkBody.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >&
ChunkBody::messages() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ChunkBody.messages)
  return messages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Index::kIndexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Index::Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.Index)
}
Index::Index(const Index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      indexes_(from.indexes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.Index)
}

void Index::SharedCtor() {
  _cached_size_ = 0;
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.Index)
  SharedDtor();
}

void Index::SharedDtor() {
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Index& Index::default_instance() {
  protobuf_cyber_2fproto_2frecord_2eproto::InitDefaults();
  return *internal_default_instance();
}

Index* Index::New(::google::protobuf::Arena* arena) const {
  Index* n = new Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.Index)
  indexes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.cyber.proto.SingleIndex indexes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indexes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.SingleIndex indexes = 1;
  for (unsigned int i = 0, n = this->indexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->indexes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.Index)
}

::google::protobuf::uint8* Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.SingleIndex indexes = 1;
  for (unsigned int i = 0, n = this->indexes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->indexes(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.Index)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.cyber.proto.SingleIndex indexes = 1;
  {
    unsigned int count = this->indexes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.Index)
  GOOGLE_DCHECK_NE(&from, this);
  const Index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.Index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indexes_.MergeFrom(from.indexes_);
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::Swap(Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Index::InternalSwap(Index* other) {
  indexes_.InternalSwap(&other->indexes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_cyber_2fproto_2frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cyber_2fproto_2frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Index

// repeated .apollo.cyber.proto.SingleIndex indexes = 1;
int Index::indexes_size() const {
  return indexes_.size();
}
void Index::clear_indexes() {
  indexes_.Clear();
}
const ::apollo::cyber::proto::SingleIndex& Index::indexes(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Index.indexes)
  return indexes_.Get(index);
}
::apollo::cyber::proto::SingleIndex* Index::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Index.indexes)
  return indexes_.Mutable(index);
}
::apollo::cyber::proto::SingleIndex* Index::add_indexes() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.Index.indexes)
  return indexes_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >*
Index::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.Index.indexes)
  return &indexes_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >&
Index::indexes() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.Index.indexes)
  return indexes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
